"""autogenerated by genpy from neuroadaptive_msgs/controllerParamUpdateRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import neuroadaptive_msgs.msg
import std_msgs.msg

class controllerParamUpdateRequest(genpy.Message):
  _md5sum = "bfb20bf2c229fc41911de76270e14569"
  _type = "neuroadaptive_msgs/controllerParamUpdateRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
controllerParam msg

================================================================================
MSG: neuroadaptive_msgs/controllerParam
Header header

# NN Params
float64 kappa
float64 Kv
float64 lambda
float64 Kz
float64 Zb
float64 F
float64 G
int64 inParams
int64 outParams
int64 hiddenNodes
int64 errorParams
float64 feedForwardForce
float64 nn_ON

# Cart params
float64 cartPos_Kp_x
float64 cartPos_Kp_y
float64 cartPos_Kp_z
float64 cartPos_Kd_x
float64 cartPos_Kd_y
float64 cartPos_Kd_z

float64 cartRot_Kp_x
float64 cartRot_Kp_y
float64 cartRot_Kp_z
float64 cartRot_Kd_x
float64 cartRot_Kd_y
float64 cartRot_Kd_z

bool useCurrentCartPose
bool useNullspacePose

float64 cartIniX    
float64 cartIniY    
float64 cartIniZ
float64 cartIniRoll 
float64 cartIniPitch
float64 cartIniYaw  

float64 cartDesX    
float64 cartDesY    
float64 cartDesZ    
float64 cartDesRoll 
float64 cartDesPitch
float64 cartDesYaw  

# Ref Model Params
float64 m
float64 d
float64 k

float64 task_mA
float64 task_mB
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['msg']
  _slot_types = ['neuroadaptive_msgs/controllerParam']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       msg

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(controllerParamUpdateRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.msg is None:
        self.msg = neuroadaptive_msgs.msg.controllerParam()
    else:
      self.msg = neuroadaptive_msgs.msg.controllerParam()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.msg.header.seq, _x.msg.header.stamp.secs, _x.msg.header.stamp.nsecs))
      _x = self.msg.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d4q14d2B17d.pack(_x.msg.kappa, _x.msg.Kv, _x.msg.lambda_, _x.msg.Kz, _x.msg.Zb, _x.msg.F, _x.msg.G, _x.msg.inParams, _x.msg.outParams, _x.msg.hiddenNodes, _x.msg.errorParams, _x.msg.feedForwardForce, _x.msg.nn_ON, _x.msg.cartPos_Kp_x, _x.msg.cartPos_Kp_y, _x.msg.cartPos_Kp_z, _x.msg.cartPos_Kd_x, _x.msg.cartPos_Kd_y, _x.msg.cartPos_Kd_z, _x.msg.cartRot_Kp_x, _x.msg.cartRot_Kp_y, _x.msg.cartRot_Kp_z, _x.msg.cartRot_Kd_x, _x.msg.cartRot_Kd_y, _x.msg.cartRot_Kd_z, _x.msg.useCurrentCartPose, _x.msg.useNullspacePose, _x.msg.cartIniX, _x.msg.cartIniY, _x.msg.cartIniZ, _x.msg.cartIniRoll, _x.msg.cartIniPitch, _x.msg.cartIniYaw, _x.msg.cartDesX, _x.msg.cartDesY, _x.msg.cartDesZ, _x.msg.cartDesRoll, _x.msg.cartDesPitch, _x.msg.cartDesYaw, _x.msg.m, _x.msg.d, _x.msg.k, _x.msg.task_mA, _x.msg.task_mB))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.msg is None:
        self.msg = neuroadaptive_msgs.msg.controllerParam()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.msg.header.seq, _x.msg.header.stamp.secs, _x.msg.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.msg.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.msg.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 338
      (_x.msg.kappa, _x.msg.Kv, _x.msg.lambda_, _x.msg.Kz, _x.msg.Zb, _x.msg.F, _x.msg.G, _x.msg.inParams, _x.msg.outParams, _x.msg.hiddenNodes, _x.msg.errorParams, _x.msg.feedForwardForce, _x.msg.nn_ON, _x.msg.cartPos_Kp_x, _x.msg.cartPos_Kp_y, _x.msg.cartPos_Kp_z, _x.msg.cartPos_Kd_x, _x.msg.cartPos_Kd_y, _x.msg.cartPos_Kd_z, _x.msg.cartRot_Kp_x, _x.msg.cartRot_Kp_y, _x.msg.cartRot_Kp_z, _x.msg.cartRot_Kd_x, _x.msg.cartRot_Kd_y, _x.msg.cartRot_Kd_z, _x.msg.useCurrentCartPose, _x.msg.useNullspacePose, _x.msg.cartIniX, _x.msg.cartIniY, _x.msg.cartIniZ, _x.msg.cartIniRoll, _x.msg.cartIniPitch, _x.msg.cartIniYaw, _x.msg.cartDesX, _x.msg.cartDesY, _x.msg.cartDesZ, _x.msg.cartDesRoll, _x.msg.cartDesPitch, _x.msg.cartDesYaw, _x.msg.m, _x.msg.d, _x.msg.k, _x.msg.task_mA, _x.msg.task_mB,) = _struct_7d4q14d2B17d.unpack(str[start:end])
      self.msg.useCurrentCartPose = bool(self.msg.useCurrentCartPose)
      self.msg.useNullspacePose = bool(self.msg.useNullspacePose)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.msg.header.seq, _x.msg.header.stamp.secs, _x.msg.header.stamp.nsecs))
      _x = self.msg.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d4q14d2B17d.pack(_x.msg.kappa, _x.msg.Kv, _x.msg.lambda_, _x.msg.Kz, _x.msg.Zb, _x.msg.F, _x.msg.G, _x.msg.inParams, _x.msg.outParams, _x.msg.hiddenNodes, _x.msg.errorParams, _x.msg.feedForwardForce, _x.msg.nn_ON, _x.msg.cartPos_Kp_x, _x.msg.cartPos_Kp_y, _x.msg.cartPos_Kp_z, _x.msg.cartPos_Kd_x, _x.msg.cartPos_Kd_y, _x.msg.cartPos_Kd_z, _x.msg.cartRot_Kp_x, _x.msg.cartRot_Kp_y, _x.msg.cartRot_Kp_z, _x.msg.cartRot_Kd_x, _x.msg.cartRot_Kd_y, _x.msg.cartRot_Kd_z, _x.msg.useCurrentCartPose, _x.msg.useNullspacePose, _x.msg.cartIniX, _x.msg.cartIniY, _x.msg.cartIniZ, _x.msg.cartIniRoll, _x.msg.cartIniPitch, _x.msg.cartIniYaw, _x.msg.cartDesX, _x.msg.cartDesY, _x.msg.cartDesZ, _x.msg.cartDesRoll, _x.msg.cartDesPitch, _x.msg.cartDesYaw, _x.msg.m, _x.msg.d, _x.msg.k, _x.msg.task_mA, _x.msg.task_mB))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.msg is None:
        self.msg = neuroadaptive_msgs.msg.controllerParam()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.msg.header.seq, _x.msg.header.stamp.secs, _x.msg.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.msg.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.msg.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 338
      (_x.msg.kappa, _x.msg.Kv, _x.msg.lambda_, _x.msg.Kz, _x.msg.Zb, _x.msg.F, _x.msg.G, _x.msg.inParams, _x.msg.outParams, _x.msg.hiddenNodes, _x.msg.errorParams, _x.msg.feedForwardForce, _x.msg.nn_ON, _x.msg.cartPos_Kp_x, _x.msg.cartPos_Kp_y, _x.msg.cartPos_Kp_z, _x.msg.cartPos_Kd_x, _x.msg.cartPos_Kd_y, _x.msg.cartPos_Kd_z, _x.msg.cartRot_Kp_x, _x.msg.cartRot_Kp_y, _x.msg.cartRot_Kp_z, _x.msg.cartRot_Kd_x, _x.msg.cartRot_Kd_y, _x.msg.cartRot_Kd_z, _x.msg.useCurrentCartPose, _x.msg.useNullspacePose, _x.msg.cartIniX, _x.msg.cartIniY, _x.msg.cartIniZ, _x.msg.cartIniRoll, _x.msg.cartIniPitch, _x.msg.cartIniYaw, _x.msg.cartDesX, _x.msg.cartDesY, _x.msg.cartDesZ, _x.msg.cartDesRoll, _x.msg.cartDesPitch, _x.msg.cartDesYaw, _x.msg.m, _x.msg.d, _x.msg.k, _x.msg.task_mA, _x.msg.task_mB,) = _struct_7d4q14d2B17d.unpack(str[start:end])
      self.msg.useCurrentCartPose = bool(self.msg.useCurrentCartPose)
      self.msg.useNullspacePose = bool(self.msg.useNullspacePose)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_7d4q14d2B17d = struct.Struct("<7d4q14d2B17d")
"""autogenerated by genpy from neuroadaptive_msgs/controllerParamUpdateResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class controllerParamUpdateResponse(genpy.Message):
  _md5sum = "358e233cde0c8a8bcfea4ce193f8fc15"
  _type = "neuroadaptive_msgs/controllerParamUpdateResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
bool success

"""
  __slots__ = ['success']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(controllerParamUpdateResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
    else:
      self.success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.success))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _struct_B.unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.success))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _struct_B.unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
class controllerParamUpdate(object):
  _type          = 'neuroadaptive_msgs/controllerParamUpdate'
  _md5sum = 'c95d6edeed3ff05d22a3f8b98eefd5bf'
  _request_class  = controllerParamUpdateRequest
  _response_class = controllerParamUpdateResponse
