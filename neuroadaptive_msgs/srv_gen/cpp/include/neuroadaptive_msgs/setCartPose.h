/* Auto-generated by genmsg_cpp for file /home/isura/groovy_workspace/sandbox/uta_pr2/neuroadaptive_msgs/srv/setCartPose.srv */
#ifndef NEUROADAPTIVE_MSGS_SERVICE_SETCARTPOSE_H
#define NEUROADAPTIVE_MSGS_SERVICE_SETCARTPOSE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "geometry_msgs/Pose.h"



namespace neuroadaptive_msgs
{
template <class ContainerAllocator>
struct setCartPoseRequest_ {
  typedef setCartPoseRequest_<ContainerAllocator> Type;

  setCartPoseRequest_()
  : msg()
  {
  }

  setCartPoseRequest_(const ContainerAllocator& _alloc)
  : msg(_alloc)
  {
  }

  typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _msg_type;
   ::geometry_msgs::Pose_<ContainerAllocator>  msg;


  typedef boost::shared_ptr< ::neuroadaptive_msgs::setCartPoseRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::neuroadaptive_msgs::setCartPoseRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct setCartPoseRequest
typedef  ::neuroadaptive_msgs::setCartPoseRequest_<std::allocator<void> > setCartPoseRequest;

typedef boost::shared_ptr< ::neuroadaptive_msgs::setCartPoseRequest> setCartPoseRequestPtr;
typedef boost::shared_ptr< ::neuroadaptive_msgs::setCartPoseRequest const> setCartPoseRequestConstPtr;



template <class ContainerAllocator>
struct setCartPoseResponse_ {
  typedef setCartPoseResponse_<ContainerAllocator> Type;

  setCartPoseResponse_()
  : success(false)
  {
  }

  setCartPoseResponse_(const ContainerAllocator& _alloc)
  : success(false)
  {
  }

  typedef uint8_t _success_type;
  uint8_t success;


  typedef boost::shared_ptr< ::neuroadaptive_msgs::setCartPoseResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::neuroadaptive_msgs::setCartPoseResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct setCartPoseResponse
typedef  ::neuroadaptive_msgs::setCartPoseResponse_<std::allocator<void> > setCartPoseResponse;

typedef boost::shared_ptr< ::neuroadaptive_msgs::setCartPoseResponse> setCartPoseResponsePtr;
typedef boost::shared_ptr< ::neuroadaptive_msgs::setCartPoseResponse const> setCartPoseResponseConstPtr;


struct setCartPose
{

typedef setCartPoseRequest Request;
typedef setCartPoseResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct setCartPose
} // namespace neuroadaptive_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::neuroadaptive_msgs::setCartPoseRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::neuroadaptive_msgs::setCartPoseRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::neuroadaptive_msgs::setCartPoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0590d994caee494523af4995b735734c";
  }

  static const char* value(const  ::neuroadaptive_msgs::setCartPoseRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0590d994caee4945ULL;
  static const uint64_t static_value2 = 0x23af4995b735734cULL;
};

template<class ContainerAllocator>
struct DataType< ::neuroadaptive_msgs::setCartPoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "neuroadaptive_msgs/setCartPoseRequest";
  }

  static const char* value(const  ::neuroadaptive_msgs::setCartPoseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::neuroadaptive_msgs::setCartPoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
geometry_msgs/Pose msg\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::neuroadaptive_msgs::setCartPoseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::neuroadaptive_msgs::setCartPoseRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::neuroadaptive_msgs::setCartPoseResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::neuroadaptive_msgs::setCartPoseResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::neuroadaptive_msgs::setCartPoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "358e233cde0c8a8bcfea4ce193f8fc15";
  }

  static const char* value(const  ::neuroadaptive_msgs::setCartPoseResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x358e233cde0c8a8bULL;
  static const uint64_t static_value2 = 0xcfea4ce193f8fc15ULL;
};

template<class ContainerAllocator>
struct DataType< ::neuroadaptive_msgs::setCartPoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "neuroadaptive_msgs/setCartPoseResponse";
  }

  static const char* value(const  ::neuroadaptive_msgs::setCartPoseResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::neuroadaptive_msgs::setCartPoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
bool success\n\
\n\
";
  }

  static const char* value(const  ::neuroadaptive_msgs::setCartPoseResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::neuroadaptive_msgs::setCartPoseResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::neuroadaptive_msgs::setCartPoseRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.msg);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct setCartPoseRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::neuroadaptive_msgs::setCartPoseResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct setCartPoseResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<neuroadaptive_msgs::setCartPose> {
  static const char* value() 
  {
    return "674895731e081d8b5c47ecc3c04378d9";
  }

  static const char* value(const neuroadaptive_msgs::setCartPose&) { return value(); } 
};

template<>
struct DataType<neuroadaptive_msgs::setCartPose> {
  static const char* value() 
  {
    return "neuroadaptive_msgs/setCartPose";
  }

  static const char* value(const neuroadaptive_msgs::setCartPose&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<neuroadaptive_msgs::setCartPoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "674895731e081d8b5c47ecc3c04378d9";
  }

  static const char* value(const neuroadaptive_msgs::setCartPoseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<neuroadaptive_msgs::setCartPoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "neuroadaptive_msgs/setCartPose";
  }

  static const char* value(const neuroadaptive_msgs::setCartPoseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<neuroadaptive_msgs::setCartPoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "674895731e081d8b5c47ecc3c04378d9";
  }

  static const char* value(const neuroadaptive_msgs::setCartPoseResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<neuroadaptive_msgs::setCartPoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "neuroadaptive_msgs/setCartPose";
  }

  static const char* value(const neuroadaptive_msgs::setCartPoseResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // NEUROADAPTIVE_MSGS_SERVICE_SETCARTPOSE_H

