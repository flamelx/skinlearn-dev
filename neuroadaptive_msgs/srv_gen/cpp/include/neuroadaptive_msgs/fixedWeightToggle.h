/* Auto-generated by genmsg_cpp for file /home/isura/groovy_workspace/sandbox/uta_pr2/neuroadaptive_msgs/srv/fixedWeightToggle.srv */
#ifndef NEUROADAPTIVE_MSGS_SERVICE_FIXEDWEIGHTTOGGLE_H
#define NEUROADAPTIVE_MSGS_SERVICE_FIXEDWEIGHTTOGGLE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace neuroadaptive_msgs
{
template <class ContainerAllocator>
struct fixedWeightToggleRequest_ {
  typedef fixedWeightToggleRequest_<ContainerAllocator> Type;

  fixedWeightToggleRequest_()
  {
  }

  fixedWeightToggleRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::neuroadaptive_msgs::fixedWeightToggleRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::neuroadaptive_msgs::fixedWeightToggleRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct fixedWeightToggleRequest
typedef  ::neuroadaptive_msgs::fixedWeightToggleRequest_<std::allocator<void> > fixedWeightToggleRequest;

typedef boost::shared_ptr< ::neuroadaptive_msgs::fixedWeightToggleRequest> fixedWeightToggleRequestPtr;
typedef boost::shared_ptr< ::neuroadaptive_msgs::fixedWeightToggleRequest const> fixedWeightToggleRequestConstPtr;



template <class ContainerAllocator>
struct fixedWeightToggleResponse_ {
  typedef fixedWeightToggleResponse_<ContainerAllocator> Type;

  fixedWeightToggleResponse_()
  : useFixedWeights(false)
  {
  }

  fixedWeightToggleResponse_(const ContainerAllocator& _alloc)
  : useFixedWeights(false)
  {
  }

  typedef uint8_t _useFixedWeights_type;
  uint8_t useFixedWeights;


  typedef boost::shared_ptr< ::neuroadaptive_msgs::fixedWeightToggleResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::neuroadaptive_msgs::fixedWeightToggleResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct fixedWeightToggleResponse
typedef  ::neuroadaptive_msgs::fixedWeightToggleResponse_<std::allocator<void> > fixedWeightToggleResponse;

typedef boost::shared_ptr< ::neuroadaptive_msgs::fixedWeightToggleResponse> fixedWeightToggleResponsePtr;
typedef boost::shared_ptr< ::neuroadaptive_msgs::fixedWeightToggleResponse const> fixedWeightToggleResponseConstPtr;


struct fixedWeightToggle
{

typedef fixedWeightToggleRequest Request;
typedef fixedWeightToggleResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct fixedWeightToggle
} // namespace neuroadaptive_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::neuroadaptive_msgs::fixedWeightToggleRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::neuroadaptive_msgs::fixedWeightToggleRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::neuroadaptive_msgs::fixedWeightToggleRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::neuroadaptive_msgs::fixedWeightToggleRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::neuroadaptive_msgs::fixedWeightToggleRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "neuroadaptive_msgs/fixedWeightToggleRequest";
  }

  static const char* value(const  ::neuroadaptive_msgs::fixedWeightToggleRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::neuroadaptive_msgs::fixedWeightToggleRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
";
  }

  static const char* value(const  ::neuroadaptive_msgs::fixedWeightToggleRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::neuroadaptive_msgs::fixedWeightToggleRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::neuroadaptive_msgs::fixedWeightToggleResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::neuroadaptive_msgs::fixedWeightToggleResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::neuroadaptive_msgs::fixedWeightToggleResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "02dff059c4f4a1b745fefa8ea7956d11";
  }

  static const char* value(const  ::neuroadaptive_msgs::fixedWeightToggleResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x02dff059c4f4a1b7ULL;
  static const uint64_t static_value2 = 0x45fefa8ea7956d11ULL;
};

template<class ContainerAllocator>
struct DataType< ::neuroadaptive_msgs::fixedWeightToggleResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "neuroadaptive_msgs/fixedWeightToggleResponse";
  }

  static const char* value(const  ::neuroadaptive_msgs::fixedWeightToggleResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::neuroadaptive_msgs::fixedWeightToggleResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
bool useFixedWeights\n\
\n\
";
  }

  static const char* value(const  ::neuroadaptive_msgs::fixedWeightToggleResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::neuroadaptive_msgs::fixedWeightToggleResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::neuroadaptive_msgs::fixedWeightToggleRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct fixedWeightToggleRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::neuroadaptive_msgs::fixedWeightToggleResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.useFixedWeights);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct fixedWeightToggleResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<neuroadaptive_msgs::fixedWeightToggle> {
  static const char* value() 
  {
    return "02dff059c4f4a1b745fefa8ea7956d11";
  }

  static const char* value(const neuroadaptive_msgs::fixedWeightToggle&) { return value(); } 
};

template<>
struct DataType<neuroadaptive_msgs::fixedWeightToggle> {
  static const char* value() 
  {
    return "neuroadaptive_msgs/fixedWeightToggle";
  }

  static const char* value(const neuroadaptive_msgs::fixedWeightToggle&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<neuroadaptive_msgs::fixedWeightToggleRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "02dff059c4f4a1b745fefa8ea7956d11";
  }

  static const char* value(const neuroadaptive_msgs::fixedWeightToggleRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<neuroadaptive_msgs::fixedWeightToggleRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "neuroadaptive_msgs/fixedWeightToggle";
  }

  static const char* value(const neuroadaptive_msgs::fixedWeightToggleRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<neuroadaptive_msgs::fixedWeightToggleResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "02dff059c4f4a1b745fefa8ea7956d11";
  }

  static const char* value(const neuroadaptive_msgs::fixedWeightToggleResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<neuroadaptive_msgs::fixedWeightToggleResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "neuroadaptive_msgs/fixedWeightToggle";
  }

  static const char* value(const neuroadaptive_msgs::fixedWeightToggleResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // NEUROADAPTIVE_MSGS_SERVICE_FIXEDWEIGHTTOGGLE_H

