/* Auto-generated by genmsg_cpp for file /home/isura/groovy_workspace/sandbox/uta_pr2/neuroadaptive_msgs/msg/controllerFullData.msg */
#ifndef NEUROADAPTIVE_MSGS_MESSAGE_CONTROLLERFULLDATA_H
#define NEUROADAPTIVE_MSGS_MESSAGE_CONTROLLERFULLDATA_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace neuroadaptive_msgs
{
template <class ContainerAllocator>
struct controllerFullData_ {
  typedef controllerFullData_<ContainerAllocator> Type;

  controllerFullData_()
  : dt(0.0)
  , force_x(0.0)
  , force_y(0.0)
  , force_z(0.0)
  , torque_x(0.0)
  , torque_y(0.0)
  , torque_z(0.0)
  , acc_x(0.0)
  , acc_y(0.0)
  , acc_z(0.0)
  , r_eff_x(0.0)
  , r_eff_y(0.0)
  , r_eff_z(0.0)
  , r_trq_x(0.0)
  , r_trq_y(0.0)
  , r_trq_z(0.0)
  , reference_eff_j0(0.0)
  , reference_eff_j1(0.0)
  , reference_eff_j2(0.0)
  , reference_eff_j3(0.0)
  , reference_eff_j4(0.0)
  , reference_eff_j5(0.0)
  , reference_eff_j6(0.0)
  , taskRef_x(0.0)
  , taskRef_y(0.0)
  , taskRef_z(0.0)
  , taskRef_phi(0.0)
  , taskRef_theta(0.0)
  , taskRef_psi(0.0)
  , taskRefModel_x(0.0)
  , taskRefModel_y(0.0)
  , taskRefModel_z(0.0)
  , taskRefModel_phi(0.0)
  , taskRefModel_theta(0.0)
  , taskRefModel_psi(0.0)
  , m_cartPos_x(0.0)
  , m_cartPos_y(0.0)
  , m_cartPos_z(0.0)
  , m_cartPos_Qx(0.0)
  , m_cartPos_Qy(0.0)
  , m_cartPos_Qz(0.0)
  , m_cartPos_QW(0.0)
  , m_pos_x(0.0)
  , m_pos_y(0.0)
  , m_pos_z(0.0)
  , m_vel_x(0.0)
  , m_vel_y(0.0)
  , m_vel_z(0.0)
  , m_acc_x(0.0)
  , m_acc_y(0.0)
  , m_acc_z(0.0)
  , m_pos_j0(0.0)
  , m_pos_j1(0.0)
  , m_pos_j2(0.0)
  , m_pos_j3(0.0)
  , m_pos_j4(0.0)
  , m_pos_j5(0.0)
  , m_pos_j6(0.0)
  , m_vel_j0(0.0)
  , m_vel_j1(0.0)
  , m_vel_j2(0.0)
  , m_vel_j3(0.0)
  , m_vel_j4(0.0)
  , m_vel_j5(0.0)
  , m_vel_j6(0.0)
  , m_acc_j0(0.0)
  , m_acc_j1(0.0)
  , m_acc_j2(0.0)
  , m_acc_j3(0.0)
  , m_acc_j4(0.0)
  , m_acc_j5(0.0)
  , m_acc_j6(0.0)
  , m_eff_j0(0.0)
  , m_eff_j1(0.0)
  , m_eff_j2(0.0)
  , m_eff_j3(0.0)
  , m_eff_j4(0.0)
  , m_eff_j5(0.0)
  , m_eff_j6(0.0)
  , control_eff_j0(0.0)
  , control_eff_j1(0.0)
  , control_eff_j2(0.0)
  , control_eff_j3(0.0)
  , control_eff_j4(0.0)
  , control_eff_j5(0.0)
  , control_eff_j6(0.0)
  , r_cartPos_x(0.0)
  , r_cartPos_y(0.0)
  , r_cartPos_z(0.0)
  , r_cartPos_Qx(0.0)
  , r_cartPos_Qy(0.0)
  , r_cartPos_Qz(0.0)
  , r_cartPos_QW(0.0)
  , r_pos_j0(0.0)
  , r_pos_j1(0.0)
  , r_pos_j2(0.0)
  , r_pos_j3(0.0)
  , r_pos_j4(0.0)
  , r_pos_j5(0.0)
  , r_pos_j6(0.0)
  , r_vel_j0(0.0)
  , r_vel_j1(0.0)
  , r_vel_j2(0.0)
  , r_vel_j3(0.0)
  , r_vel_j4(0.0)
  , r_vel_j5(0.0)
  , r_vel_j6(0.0)
  , r_acc_j0(0.0)
  , r_acc_j1(0.0)
  , r_acc_j2(0.0)
  , r_acc_j3(0.0)
  , r_acc_j4(0.0)
  , r_acc_j5(0.0)
  , r_acc_j6(0.0)
  , r_eff_j0(0.0)
  , r_eff_j1(0.0)
  , r_eff_j2(0.0)
  , r_eff_j3(0.0)
  , r_eff_j4(0.0)
  , r_eff_j5(0.0)
  , r_eff_j6(0.0)
  , l_limit_0(0.0)
  , l_limit_1(0.0)
  , l_limit_2(0.0)
  , l_limit_3(0.0)
  , l_limit_4(0.0)
  , l_limit_5(0.0)
  , l_limit_6(0.0)
  , u_limit_0(0.0)
  , u_limit_1(0.0)
  , u_limit_2(0.0)
  , u_limit_3(0.0)
  , u_limit_4(0.0)
  , u_limit_5(0.0)
  , u_limit_6(0.0)
  , kappa(0.0)
  , Kv(0.0)
  , lambda(0.0)
  , Kz(0.0)
  , Zb(0.0)
  , F(0.0)
  , G(0.0)
  , inParams(0)
  , outParams(0)
  , hiddenNodes(0)
  , errorParams(0)
  , feedForwardForce(0.0)
  , nn_ON(0.0)
  , cartPos_Kp_x(0.0)
  , cartPos_Kp_y(0.0)
  , cartPos_Kp_z(0.0)
  , cartPos_Kd_x(0.0)
  , cartPos_Kd_y(0.0)
  , cartPos_Kd_z(0.0)
  , cartRot_Kp_x(0.0)
  , cartRot_Kp_y(0.0)
  , cartRot_Kp_z(0.0)
  , cartRot_Kd_x(0.0)
  , cartRot_Kd_y(0.0)
  , cartRot_Kd_z(0.0)
  , useCurrentCartPose(false)
  , useNullspacePose(false)
  , cartIniX(0.0)
  , cartIniY(0.0)
  , cartIniZ(0.0)
  , cartIniRoll(0.0)
  , cartIniPitch(0.0)
  , cartIniYaw(0.0)
  , cartDesX(0.0)
  , cartDesY(0.0)
  , cartDesZ(0.0)
  , cartDesRoll(0.0)
  , cartDesPitch(0.0)
  , cartDesYaw(0.0)
  , m(0.0)
  , d(0.0)
  , k(0.0)
  , task_mA(0.0)
  , task_mB(0.0)
  , fixedFilterWeights(0.0)
  , w0(0.0)
  , w1(0.0)
  , w2(0.0)
  , w3(0.0)
  , w4(0.0)
  , w5(0.0)
  , w6(0.0)
  , w7(0.0)
  {
  }

  controllerFullData_(const ContainerAllocator& _alloc)
  : dt(0.0)
  , force_x(0.0)
  , force_y(0.0)
  , force_z(0.0)
  , torque_x(0.0)
  , torque_y(0.0)
  , torque_z(0.0)
  , acc_x(0.0)
  , acc_y(0.0)
  , acc_z(0.0)
  , r_eff_x(0.0)
  , r_eff_y(0.0)
  , r_eff_z(0.0)
  , r_trq_x(0.0)
  , r_trq_y(0.0)
  , r_trq_z(0.0)
  , reference_eff_j0(0.0)
  , reference_eff_j1(0.0)
  , reference_eff_j2(0.0)
  , reference_eff_j3(0.0)
  , reference_eff_j4(0.0)
  , reference_eff_j5(0.0)
  , reference_eff_j6(0.0)
  , taskRef_x(0.0)
  , taskRef_y(0.0)
  , taskRef_z(0.0)
  , taskRef_phi(0.0)
  , taskRef_theta(0.0)
  , taskRef_psi(0.0)
  , taskRefModel_x(0.0)
  , taskRefModel_y(0.0)
  , taskRefModel_z(0.0)
  , taskRefModel_phi(0.0)
  , taskRefModel_theta(0.0)
  , taskRefModel_psi(0.0)
  , m_cartPos_x(0.0)
  , m_cartPos_y(0.0)
  , m_cartPos_z(0.0)
  , m_cartPos_Qx(0.0)
  , m_cartPos_Qy(0.0)
  , m_cartPos_Qz(0.0)
  , m_cartPos_QW(0.0)
  , m_pos_x(0.0)
  , m_pos_y(0.0)
  , m_pos_z(0.0)
  , m_vel_x(0.0)
  , m_vel_y(0.0)
  , m_vel_z(0.0)
  , m_acc_x(0.0)
  , m_acc_y(0.0)
  , m_acc_z(0.0)
  , m_pos_j0(0.0)
  , m_pos_j1(0.0)
  , m_pos_j2(0.0)
  , m_pos_j3(0.0)
  , m_pos_j4(0.0)
  , m_pos_j5(0.0)
  , m_pos_j6(0.0)
  , m_vel_j0(0.0)
  , m_vel_j1(0.0)
  , m_vel_j2(0.0)
  , m_vel_j3(0.0)
  , m_vel_j4(0.0)
  , m_vel_j5(0.0)
  , m_vel_j6(0.0)
  , m_acc_j0(0.0)
  , m_acc_j1(0.0)
  , m_acc_j2(0.0)
  , m_acc_j3(0.0)
  , m_acc_j4(0.0)
  , m_acc_j5(0.0)
  , m_acc_j6(0.0)
  , m_eff_j0(0.0)
  , m_eff_j1(0.0)
  , m_eff_j2(0.0)
  , m_eff_j3(0.0)
  , m_eff_j4(0.0)
  , m_eff_j5(0.0)
  , m_eff_j6(0.0)
  , control_eff_j0(0.0)
  , control_eff_j1(0.0)
  , control_eff_j2(0.0)
  , control_eff_j3(0.0)
  , control_eff_j4(0.0)
  , control_eff_j5(0.0)
  , control_eff_j6(0.0)
  , r_cartPos_x(0.0)
  , r_cartPos_y(0.0)
  , r_cartPos_z(0.0)
  , r_cartPos_Qx(0.0)
  , r_cartPos_Qy(0.0)
  , r_cartPos_Qz(0.0)
  , r_cartPos_QW(0.0)
  , r_pos_j0(0.0)
  , r_pos_j1(0.0)
  , r_pos_j2(0.0)
  , r_pos_j3(0.0)
  , r_pos_j4(0.0)
  , r_pos_j5(0.0)
  , r_pos_j6(0.0)
  , r_vel_j0(0.0)
  , r_vel_j1(0.0)
  , r_vel_j2(0.0)
  , r_vel_j3(0.0)
  , r_vel_j4(0.0)
  , r_vel_j5(0.0)
  , r_vel_j6(0.0)
  , r_acc_j0(0.0)
  , r_acc_j1(0.0)
  , r_acc_j2(0.0)
  , r_acc_j3(0.0)
  , r_acc_j4(0.0)
  , r_acc_j5(0.0)
  , r_acc_j6(0.0)
  , r_eff_j0(0.0)
  , r_eff_j1(0.0)
  , r_eff_j2(0.0)
  , r_eff_j3(0.0)
  , r_eff_j4(0.0)
  , r_eff_j5(0.0)
  , r_eff_j6(0.0)
  , l_limit_0(0.0)
  , l_limit_1(0.0)
  , l_limit_2(0.0)
  , l_limit_3(0.0)
  , l_limit_4(0.0)
  , l_limit_5(0.0)
  , l_limit_6(0.0)
  , u_limit_0(0.0)
  , u_limit_1(0.0)
  , u_limit_2(0.0)
  , u_limit_3(0.0)
  , u_limit_4(0.0)
  , u_limit_5(0.0)
  , u_limit_6(0.0)
  , kappa(0.0)
  , Kv(0.0)
  , lambda(0.0)
  , Kz(0.0)
  , Zb(0.0)
  , F(0.0)
  , G(0.0)
  , inParams(0)
  , outParams(0)
  , hiddenNodes(0)
  , errorParams(0)
  , feedForwardForce(0.0)
  , nn_ON(0.0)
  , cartPos_Kp_x(0.0)
  , cartPos_Kp_y(0.0)
  , cartPos_Kp_z(0.0)
  , cartPos_Kd_x(0.0)
  , cartPos_Kd_y(0.0)
  , cartPos_Kd_z(0.0)
  , cartRot_Kp_x(0.0)
  , cartRot_Kp_y(0.0)
  , cartRot_Kp_z(0.0)
  , cartRot_Kd_x(0.0)
  , cartRot_Kd_y(0.0)
  , cartRot_Kd_z(0.0)
  , useCurrentCartPose(false)
  , useNullspacePose(false)
  , cartIniX(0.0)
  , cartIniY(0.0)
  , cartIniZ(0.0)
  , cartIniRoll(0.0)
  , cartIniPitch(0.0)
  , cartIniYaw(0.0)
  , cartDesX(0.0)
  , cartDesY(0.0)
  , cartDesZ(0.0)
  , cartDesRoll(0.0)
  , cartDesPitch(0.0)
  , cartDesYaw(0.0)
  , m(0.0)
  , d(0.0)
  , k(0.0)
  , task_mA(0.0)
  , task_mB(0.0)
  , fixedFilterWeights(0.0)
  , w0(0.0)
  , w1(0.0)
  , w2(0.0)
  , w3(0.0)
  , w4(0.0)
  , w5(0.0)
  , w6(0.0)
  , w7(0.0)
  {
  }

  typedef double _dt_type;
  double dt;

  typedef double _force_x_type;
  double force_x;

  typedef double _force_y_type;
  double force_y;

  typedef double _force_z_type;
  double force_z;

  typedef double _torque_x_type;
  double torque_x;

  typedef double _torque_y_type;
  double torque_y;

  typedef double _torque_z_type;
  double torque_z;

  typedef double _acc_x_type;
  double acc_x;

  typedef double _acc_y_type;
  double acc_y;

  typedef double _acc_z_type;
  double acc_z;

  typedef double _r_eff_x_type;
  double r_eff_x;

  typedef double _r_eff_y_type;
  double r_eff_y;

  typedef double _r_eff_z_type;
  double r_eff_z;

  typedef double _r_trq_x_type;
  double r_trq_x;

  typedef double _r_trq_y_type;
  double r_trq_y;

  typedef double _r_trq_z_type;
  double r_trq_z;

  typedef double _reference_eff_j0_type;
  double reference_eff_j0;

  typedef double _reference_eff_j1_type;
  double reference_eff_j1;

  typedef double _reference_eff_j2_type;
  double reference_eff_j2;

  typedef double _reference_eff_j3_type;
  double reference_eff_j3;

  typedef double _reference_eff_j4_type;
  double reference_eff_j4;

  typedef double _reference_eff_j5_type;
  double reference_eff_j5;

  typedef double _reference_eff_j6_type;
  double reference_eff_j6;

  typedef double _taskRef_x_type;
  double taskRef_x;

  typedef double _taskRef_y_type;
  double taskRef_y;

  typedef double _taskRef_z_type;
  double taskRef_z;

  typedef double _taskRef_phi_type;
  double taskRef_phi;

  typedef double _taskRef_theta_type;
  double taskRef_theta;

  typedef double _taskRef_psi_type;
  double taskRef_psi;

  typedef double _taskRefModel_x_type;
  double taskRefModel_x;

  typedef double _taskRefModel_y_type;
  double taskRefModel_y;

  typedef double _taskRefModel_z_type;
  double taskRefModel_z;

  typedef double _taskRefModel_phi_type;
  double taskRefModel_phi;

  typedef double _taskRefModel_theta_type;
  double taskRefModel_theta;

  typedef double _taskRefModel_psi_type;
  double taskRefModel_psi;

  typedef double _m_cartPos_x_type;
  double m_cartPos_x;

  typedef double _m_cartPos_y_type;
  double m_cartPos_y;

  typedef double _m_cartPos_z_type;
  double m_cartPos_z;

  typedef double _m_cartPos_Qx_type;
  double m_cartPos_Qx;

  typedef double _m_cartPos_Qy_type;
  double m_cartPos_Qy;

  typedef double _m_cartPos_Qz_type;
  double m_cartPos_Qz;

  typedef double _m_cartPos_QW_type;
  double m_cartPos_QW;

  typedef double _m_pos_x_type;
  double m_pos_x;

  typedef double _m_pos_y_type;
  double m_pos_y;

  typedef double _m_pos_z_type;
  double m_pos_z;

  typedef double _m_vel_x_type;
  double m_vel_x;

  typedef double _m_vel_y_type;
  double m_vel_y;

  typedef double _m_vel_z_type;
  double m_vel_z;

  typedef double _m_acc_x_type;
  double m_acc_x;

  typedef double _m_acc_y_type;
  double m_acc_y;

  typedef double _m_acc_z_type;
  double m_acc_z;

  typedef double _m_pos_j0_type;
  double m_pos_j0;

  typedef double _m_pos_j1_type;
  double m_pos_j1;

  typedef double _m_pos_j2_type;
  double m_pos_j2;

  typedef double _m_pos_j3_type;
  double m_pos_j3;

  typedef double _m_pos_j4_type;
  double m_pos_j4;

  typedef double _m_pos_j5_type;
  double m_pos_j5;

  typedef double _m_pos_j6_type;
  double m_pos_j6;

  typedef double _m_vel_j0_type;
  double m_vel_j0;

  typedef double _m_vel_j1_type;
  double m_vel_j1;

  typedef double _m_vel_j2_type;
  double m_vel_j2;

  typedef double _m_vel_j3_type;
  double m_vel_j3;

  typedef double _m_vel_j4_type;
  double m_vel_j4;

  typedef double _m_vel_j5_type;
  double m_vel_j5;

  typedef double _m_vel_j6_type;
  double m_vel_j6;

  typedef double _m_acc_j0_type;
  double m_acc_j0;

  typedef double _m_acc_j1_type;
  double m_acc_j1;

  typedef double _m_acc_j2_type;
  double m_acc_j2;

  typedef double _m_acc_j3_type;
  double m_acc_j3;

  typedef double _m_acc_j4_type;
  double m_acc_j4;

  typedef double _m_acc_j5_type;
  double m_acc_j5;

  typedef double _m_acc_j6_type;
  double m_acc_j6;

  typedef double _m_eff_j0_type;
  double m_eff_j0;

  typedef double _m_eff_j1_type;
  double m_eff_j1;

  typedef double _m_eff_j2_type;
  double m_eff_j2;

  typedef double _m_eff_j3_type;
  double m_eff_j3;

  typedef double _m_eff_j4_type;
  double m_eff_j4;

  typedef double _m_eff_j5_type;
  double m_eff_j5;

  typedef double _m_eff_j6_type;
  double m_eff_j6;

  typedef double _control_eff_j0_type;
  double control_eff_j0;

  typedef double _control_eff_j1_type;
  double control_eff_j1;

  typedef double _control_eff_j2_type;
  double control_eff_j2;

  typedef double _control_eff_j3_type;
  double control_eff_j3;

  typedef double _control_eff_j4_type;
  double control_eff_j4;

  typedef double _control_eff_j5_type;
  double control_eff_j5;

  typedef double _control_eff_j6_type;
  double control_eff_j6;

  typedef double _r_cartPos_x_type;
  double r_cartPos_x;

  typedef double _r_cartPos_y_type;
  double r_cartPos_y;

  typedef double _r_cartPos_z_type;
  double r_cartPos_z;

  typedef double _r_cartPos_Qx_type;
  double r_cartPos_Qx;

  typedef double _r_cartPos_Qy_type;
  double r_cartPos_Qy;

  typedef double _r_cartPos_Qz_type;
  double r_cartPos_Qz;

  typedef double _r_cartPos_QW_type;
  double r_cartPos_QW;

  typedef double _r_pos_j0_type;
  double r_pos_j0;

  typedef double _r_pos_j1_type;
  double r_pos_j1;

  typedef double _r_pos_j2_type;
  double r_pos_j2;

  typedef double _r_pos_j3_type;
  double r_pos_j3;

  typedef double _r_pos_j4_type;
  double r_pos_j4;

  typedef double _r_pos_j5_type;
  double r_pos_j5;

  typedef double _r_pos_j6_type;
  double r_pos_j6;

  typedef double _r_vel_j0_type;
  double r_vel_j0;

  typedef double _r_vel_j1_type;
  double r_vel_j1;

  typedef double _r_vel_j2_type;
  double r_vel_j2;

  typedef double _r_vel_j3_type;
  double r_vel_j3;

  typedef double _r_vel_j4_type;
  double r_vel_j4;

  typedef double _r_vel_j5_type;
  double r_vel_j5;

  typedef double _r_vel_j6_type;
  double r_vel_j6;

  typedef double _r_acc_j0_type;
  double r_acc_j0;

  typedef double _r_acc_j1_type;
  double r_acc_j1;

  typedef double _r_acc_j2_type;
  double r_acc_j2;

  typedef double _r_acc_j3_type;
  double r_acc_j3;

  typedef double _r_acc_j4_type;
  double r_acc_j4;

  typedef double _r_acc_j5_type;
  double r_acc_j5;

  typedef double _r_acc_j6_type;
  double r_acc_j6;

  typedef double _r_eff_j0_type;
  double r_eff_j0;

  typedef double _r_eff_j1_type;
  double r_eff_j1;

  typedef double _r_eff_j2_type;
  double r_eff_j2;

  typedef double _r_eff_j3_type;
  double r_eff_j3;

  typedef double _r_eff_j4_type;
  double r_eff_j4;

  typedef double _r_eff_j5_type;
  double r_eff_j5;

  typedef double _r_eff_j6_type;
  double r_eff_j6;

  typedef double _l_limit_0_type;
  double l_limit_0;

  typedef double _l_limit_1_type;
  double l_limit_1;

  typedef double _l_limit_2_type;
  double l_limit_2;

  typedef double _l_limit_3_type;
  double l_limit_3;

  typedef double _l_limit_4_type;
  double l_limit_4;

  typedef double _l_limit_5_type;
  double l_limit_5;

  typedef double _l_limit_6_type;
  double l_limit_6;

  typedef double _u_limit_0_type;
  double u_limit_0;

  typedef double _u_limit_1_type;
  double u_limit_1;

  typedef double _u_limit_2_type;
  double u_limit_2;

  typedef double _u_limit_3_type;
  double u_limit_3;

  typedef double _u_limit_4_type;
  double u_limit_4;

  typedef double _u_limit_5_type;
  double u_limit_5;

  typedef double _u_limit_6_type;
  double u_limit_6;

  typedef double _kappa_type;
  double kappa;

  typedef double _Kv_type;
  double Kv;

  typedef double _lambda_type;
  double lambda;

  typedef double _Kz_type;
  double Kz;

  typedef double _Zb_type;
  double Zb;

  typedef double _F_type;
  double F;

  typedef double _G_type;
  double G;

  typedef int64_t _inParams_type;
  int64_t inParams;

  typedef int64_t _outParams_type;
  int64_t outParams;

  typedef int64_t _hiddenNodes_type;
  int64_t hiddenNodes;

  typedef int64_t _errorParams_type;
  int64_t errorParams;

  typedef double _feedForwardForce_type;
  double feedForwardForce;

  typedef double _nn_ON_type;
  double nn_ON;

  typedef double _cartPos_Kp_x_type;
  double cartPos_Kp_x;

  typedef double _cartPos_Kp_y_type;
  double cartPos_Kp_y;

  typedef double _cartPos_Kp_z_type;
  double cartPos_Kp_z;

  typedef double _cartPos_Kd_x_type;
  double cartPos_Kd_x;

  typedef double _cartPos_Kd_y_type;
  double cartPos_Kd_y;

  typedef double _cartPos_Kd_z_type;
  double cartPos_Kd_z;

  typedef double _cartRot_Kp_x_type;
  double cartRot_Kp_x;

  typedef double _cartRot_Kp_y_type;
  double cartRot_Kp_y;

  typedef double _cartRot_Kp_z_type;
  double cartRot_Kp_z;

  typedef double _cartRot_Kd_x_type;
  double cartRot_Kd_x;

  typedef double _cartRot_Kd_y_type;
  double cartRot_Kd_y;

  typedef double _cartRot_Kd_z_type;
  double cartRot_Kd_z;

  typedef uint8_t _useCurrentCartPose_type;
  uint8_t useCurrentCartPose;

  typedef uint8_t _useNullspacePose_type;
  uint8_t useNullspacePose;

  typedef double _cartIniX_type;
  double cartIniX;

  typedef double _cartIniY_type;
  double cartIniY;

  typedef double _cartIniZ_type;
  double cartIniZ;

  typedef double _cartIniRoll_type;
  double cartIniRoll;

  typedef double _cartIniPitch_type;
  double cartIniPitch;

  typedef double _cartIniYaw_type;
  double cartIniYaw;

  typedef double _cartDesX_type;
  double cartDesX;

  typedef double _cartDesY_type;
  double cartDesY;

  typedef double _cartDesZ_type;
  double cartDesZ;

  typedef double _cartDesRoll_type;
  double cartDesRoll;

  typedef double _cartDesPitch_type;
  double cartDesPitch;

  typedef double _cartDesYaw_type;
  double cartDesYaw;

  typedef double _m_type;
  double m;

  typedef double _d_type;
  double d;

  typedef double _k_type;
  double k;

  typedef double _task_mA_type;
  double task_mA;

  typedef double _task_mB_type;
  double task_mB;

  typedef double _fixedFilterWeights_type;
  double fixedFilterWeights;

  typedef double _w0_type;
  double w0;

  typedef double _w1_type;
  double w1;

  typedef double _w2_type;
  double w2;

  typedef double _w3_type;
  double w3;

  typedef double _w4_type;
  double w4;

  typedef double _w5_type;
  double w5;

  typedef double _w6_type;
  double w6;

  typedef double _w7_type;
  double w7;


  typedef boost::shared_ptr< ::neuroadaptive_msgs::controllerFullData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::neuroadaptive_msgs::controllerFullData_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct controllerFullData
typedef  ::neuroadaptive_msgs::controllerFullData_<std::allocator<void> > controllerFullData;

typedef boost::shared_ptr< ::neuroadaptive_msgs::controllerFullData> controllerFullDataPtr;
typedef boost::shared_ptr< ::neuroadaptive_msgs::controllerFullData const> controllerFullDataConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::neuroadaptive_msgs::controllerFullData_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::neuroadaptive_msgs::controllerFullData_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace neuroadaptive_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::neuroadaptive_msgs::controllerFullData_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::neuroadaptive_msgs::controllerFullData_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::neuroadaptive_msgs::controllerFullData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3b700d9b967b330bbafaa74bfb7ba442";
  }

  static const char* value(const  ::neuroadaptive_msgs::controllerFullData_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3b700d9b967b330bULL;
  static const uint64_t static_value2 = 0xbafaa74bfb7ba442ULL;
};

template<class ContainerAllocator>
struct DataType< ::neuroadaptive_msgs::controllerFullData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "neuroadaptive_msgs/controllerFullData";
  }

  static const char* value(const  ::neuroadaptive_msgs::controllerFullData_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::neuroadaptive_msgs::controllerFullData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Time\n\
float64  dt\n\
\n\
# Force Data\n\
float64 force_x\n\
float64 force_y\n\
float64 force_z\n\
float64 torque_x\n\
float64 torque_y\n\
float64 torque_z\n\
\n\
# Accelerometer data\n\
float64 acc_x\n\
float64 acc_y\n\
float64 acc_z\n\
\n\
# Input Force Data\n\
float64 r_eff_x\n\
float64 r_eff_y\n\
float64 r_eff_z\n\
float64 r_trq_x\n\
float64 r_trq_y\n\
float64 r_trq_z\n\
\n\
# Input reference efforts(torques)\n\
float64 reference_eff_j0\n\
float64 reference_eff_j1\n\
float64 reference_eff_j2\n\
float64 reference_eff_j3\n\
float64 reference_eff_j4\n\
float64 reference_eff_j5\n\
float64 reference_eff_j6\n\
\n\
# Cartesian task reference                \n\
float64 taskRef_x\n\
float64 taskRef_y\n\
float64 taskRef_z\n\
float64 taskRef_phi\n\
float64 taskRef_theta\n\
float64 taskRef_psi\n\
\n\
# Cartesian task reference                \n\
float64 taskRefModel_x\n\
float64 taskRefModel_y\n\
float64 taskRefModel_z\n\
float64 taskRefModel_phi\n\
float64 taskRefModel_theta\n\
float64 taskRefModel_psi\n\
\n\
# Model States\n\
float64 m_cartPos_x \n\
float64 m_cartPos_y \n\
float64 m_cartPos_z \n\
float64 m_cartPos_Qx\n\
float64 m_cartPos_Qy\n\
float64 m_cartPos_Qz\n\
float64 m_cartPos_QW\n\
\n\
float64 m_pos_x\n\
float64 m_pos_y\n\
float64 m_pos_z\n\
       \n\
float64 m_vel_x\n\
float64 m_vel_y\n\
float64 m_vel_z\n\
       \n\
float64 m_acc_x\n\
float64 m_acc_y\n\
float64 m_acc_z\n\
\n\
float64 m_pos_j0\n\
float64 m_pos_j1\n\
float64 m_pos_j2\n\
float64 m_pos_j3\n\
float64 m_pos_j4\n\
float64 m_pos_j5\n\
float64 m_pos_j6\n\
\n\
float64 m_vel_j0\n\
float64 m_vel_j1\n\
float64 m_vel_j2\n\
float64 m_vel_j3\n\
float64 m_vel_j4\n\
float64 m_vel_j5\n\
float64 m_vel_j6\n\
\n\
float64 m_acc_j0\n\
float64 m_acc_j1\n\
float64 m_acc_j2\n\
float64 m_acc_j3\n\
float64 m_acc_j4\n\
float64 m_acc_j5\n\
float64 m_acc_j6\n\
\n\
float64 m_eff_j0\n\
float64 m_eff_j1\n\
float64 m_eff_j2\n\
float64 m_eff_j3\n\
float64 m_eff_j4\n\
float64 m_eff_j5\n\
float64 m_eff_j6\n\
\n\
# Control Output\n\
float64 control_eff_j0\n\
float64 control_eff_j1\n\
float64 control_eff_j2\n\
float64 control_eff_j3\n\
float64 control_eff_j4\n\
float64 control_eff_j5\n\
float64 control_eff_j6\n\
\n\
# Robot States\n\
float64 r_cartPos_x \n\
float64 r_cartPos_y \n\
float64 r_cartPos_z \n\
float64 r_cartPos_Qx\n\
float64 r_cartPos_Qy\n\
float64 r_cartPos_Qz\n\
float64 r_cartPos_QW\n\
\n\
float64 r_pos_j0\n\
float64 r_pos_j1\n\
float64 r_pos_j2\n\
float64 r_pos_j3\n\
float64 r_pos_j4\n\
float64 r_pos_j5\n\
float64 r_pos_j6\n\
\n\
float64 r_vel_j0\n\
float64 r_vel_j1\n\
float64 r_vel_j2\n\
float64 r_vel_j3\n\
float64 r_vel_j4\n\
float64 r_vel_j5\n\
float64 r_vel_j6\n\
	\n\
float64 r_acc_j0\n\
float64 r_acc_j1\n\
float64 r_acc_j2\n\
float64 r_acc_j3\n\
float64 r_acc_j4\n\
float64 r_acc_j5\n\
float64 r_acc_j6\n\
\n\
float64 r_eff_j0\n\
float64 r_eff_j1\n\
float64 r_eff_j2\n\
float64 r_eff_j3\n\
float64 r_eff_j4\n\
float64 r_eff_j5\n\
float64 r_eff_j6\n\
\n\
# Joint lower limit \n\
float64 l_limit_0\n\
float64 l_limit_1\n\
float64 l_limit_2\n\
float64 l_limit_3\n\
float64 l_limit_4\n\
float64 l_limit_5\n\
float64 l_limit_6\n\
         \n\
# Joint upper limit\n\
float64 u_limit_0\n\
float64 u_limit_1\n\
float64 u_limit_2\n\
float64 u_limit_3\n\
float64 u_limit_4\n\
float64 u_limit_5\n\
float64 u_limit_6\n\
\n\
# NN Params\n\
float64 kappa\n\
float64 Kv\n\
float64 lambda\n\
float64 Kz\n\
float64 Zb\n\
float64 F\n\
float64 G\n\
int64 inParams\n\
int64 outParams\n\
int64 hiddenNodes\n\
int64 errorParams\n\
float64 feedForwardForce\n\
float64 nn_ON\n\
\n\
# Cart params\n\
float64 cartPos_Kp_x\n\
float64 cartPos_Kp_y\n\
float64 cartPos_Kp_z\n\
float64 cartPos_Kd_x\n\
float64 cartPos_Kd_y\n\
float64 cartPos_Kd_z\n\
\n\
float64 cartRot_Kp_x\n\
float64 cartRot_Kp_y\n\
float64 cartRot_Kp_z\n\
float64 cartRot_Kd_x\n\
float64 cartRot_Kd_y\n\
float64 cartRot_Kd_z\n\
\n\
bool useCurrentCartPose\n\
bool useNullspacePose\n\
\n\
float64 cartIniX    \n\
float64 cartIniY    \n\
float64 cartIniZ\n\
float64 cartIniRoll \n\
float64 cartIniPitch\n\
float64 cartIniYaw  \n\
        \n\
float64 cartDesX    \n\
float64 cartDesY    \n\
float64 cartDesZ    \n\
float64 cartDesRoll \n\
float64 cartDesPitch\n\
float64 cartDesYaw  \n\
\n\
# Ref Model Params\n\
float64 m\n\
float64 d\n\
float64 k\n\
\n\
# Task Ref Params\n\
float64 task_mA\n\
float64 task_mB\n\
\n\
# Use fixed weights\n\
float64 fixedFilterWeights\n\
\n\
# Filter Weights\n\
float64 w0\n\
float64 w1\n\
float64 w2\n\
float64 w3\n\
float64 w4\n\
float64 w5\n\
float64 w6\n\
float64 w7\n\
";
  }

  static const char* value(const  ::neuroadaptive_msgs::controllerFullData_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::neuroadaptive_msgs::controllerFullData_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::neuroadaptive_msgs::controllerFullData_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.dt);
    stream.next(m.force_x);
    stream.next(m.force_y);
    stream.next(m.force_z);
    stream.next(m.torque_x);
    stream.next(m.torque_y);
    stream.next(m.torque_z);
    stream.next(m.acc_x);
    stream.next(m.acc_y);
    stream.next(m.acc_z);
    stream.next(m.r_eff_x);
    stream.next(m.r_eff_y);
    stream.next(m.r_eff_z);
    stream.next(m.r_trq_x);
    stream.next(m.r_trq_y);
    stream.next(m.r_trq_z);
    stream.next(m.reference_eff_j0);
    stream.next(m.reference_eff_j1);
    stream.next(m.reference_eff_j2);
    stream.next(m.reference_eff_j3);
    stream.next(m.reference_eff_j4);
    stream.next(m.reference_eff_j5);
    stream.next(m.reference_eff_j6);
    stream.next(m.taskRef_x);
    stream.next(m.taskRef_y);
    stream.next(m.taskRef_z);
    stream.next(m.taskRef_phi);
    stream.next(m.taskRef_theta);
    stream.next(m.taskRef_psi);
    stream.next(m.taskRefModel_x);
    stream.next(m.taskRefModel_y);
    stream.next(m.taskRefModel_z);
    stream.next(m.taskRefModel_phi);
    stream.next(m.taskRefModel_theta);
    stream.next(m.taskRefModel_psi);
    stream.next(m.m_cartPos_x);
    stream.next(m.m_cartPos_y);
    stream.next(m.m_cartPos_z);
    stream.next(m.m_cartPos_Qx);
    stream.next(m.m_cartPos_Qy);
    stream.next(m.m_cartPos_Qz);
    stream.next(m.m_cartPos_QW);
    stream.next(m.m_pos_x);
    stream.next(m.m_pos_y);
    stream.next(m.m_pos_z);
    stream.next(m.m_vel_x);
    stream.next(m.m_vel_y);
    stream.next(m.m_vel_z);
    stream.next(m.m_acc_x);
    stream.next(m.m_acc_y);
    stream.next(m.m_acc_z);
    stream.next(m.m_pos_j0);
    stream.next(m.m_pos_j1);
    stream.next(m.m_pos_j2);
    stream.next(m.m_pos_j3);
    stream.next(m.m_pos_j4);
    stream.next(m.m_pos_j5);
    stream.next(m.m_pos_j6);
    stream.next(m.m_vel_j0);
    stream.next(m.m_vel_j1);
    stream.next(m.m_vel_j2);
    stream.next(m.m_vel_j3);
    stream.next(m.m_vel_j4);
    stream.next(m.m_vel_j5);
    stream.next(m.m_vel_j6);
    stream.next(m.m_acc_j0);
    stream.next(m.m_acc_j1);
    stream.next(m.m_acc_j2);
    stream.next(m.m_acc_j3);
    stream.next(m.m_acc_j4);
    stream.next(m.m_acc_j5);
    stream.next(m.m_acc_j6);
    stream.next(m.m_eff_j0);
    stream.next(m.m_eff_j1);
    stream.next(m.m_eff_j2);
    stream.next(m.m_eff_j3);
    stream.next(m.m_eff_j4);
    stream.next(m.m_eff_j5);
    stream.next(m.m_eff_j6);
    stream.next(m.control_eff_j0);
    stream.next(m.control_eff_j1);
    stream.next(m.control_eff_j2);
    stream.next(m.control_eff_j3);
    stream.next(m.control_eff_j4);
    stream.next(m.control_eff_j5);
    stream.next(m.control_eff_j6);
    stream.next(m.r_cartPos_x);
    stream.next(m.r_cartPos_y);
    stream.next(m.r_cartPos_z);
    stream.next(m.r_cartPos_Qx);
    stream.next(m.r_cartPos_Qy);
    stream.next(m.r_cartPos_Qz);
    stream.next(m.r_cartPos_QW);
    stream.next(m.r_pos_j0);
    stream.next(m.r_pos_j1);
    stream.next(m.r_pos_j2);
    stream.next(m.r_pos_j3);
    stream.next(m.r_pos_j4);
    stream.next(m.r_pos_j5);
    stream.next(m.r_pos_j6);
    stream.next(m.r_vel_j0);
    stream.next(m.r_vel_j1);
    stream.next(m.r_vel_j2);
    stream.next(m.r_vel_j3);
    stream.next(m.r_vel_j4);
    stream.next(m.r_vel_j5);
    stream.next(m.r_vel_j6);
    stream.next(m.r_acc_j0);
    stream.next(m.r_acc_j1);
    stream.next(m.r_acc_j2);
    stream.next(m.r_acc_j3);
    stream.next(m.r_acc_j4);
    stream.next(m.r_acc_j5);
    stream.next(m.r_acc_j6);
    stream.next(m.r_eff_j0);
    stream.next(m.r_eff_j1);
    stream.next(m.r_eff_j2);
    stream.next(m.r_eff_j3);
    stream.next(m.r_eff_j4);
    stream.next(m.r_eff_j5);
    stream.next(m.r_eff_j6);
    stream.next(m.l_limit_0);
    stream.next(m.l_limit_1);
    stream.next(m.l_limit_2);
    stream.next(m.l_limit_3);
    stream.next(m.l_limit_4);
    stream.next(m.l_limit_5);
    stream.next(m.l_limit_6);
    stream.next(m.u_limit_0);
    stream.next(m.u_limit_1);
    stream.next(m.u_limit_2);
    stream.next(m.u_limit_3);
    stream.next(m.u_limit_4);
    stream.next(m.u_limit_5);
    stream.next(m.u_limit_6);
    stream.next(m.kappa);
    stream.next(m.Kv);
    stream.next(m.lambda);
    stream.next(m.Kz);
    stream.next(m.Zb);
    stream.next(m.F);
    stream.next(m.G);
    stream.next(m.inParams);
    stream.next(m.outParams);
    stream.next(m.hiddenNodes);
    stream.next(m.errorParams);
    stream.next(m.feedForwardForce);
    stream.next(m.nn_ON);
    stream.next(m.cartPos_Kp_x);
    stream.next(m.cartPos_Kp_y);
    stream.next(m.cartPos_Kp_z);
    stream.next(m.cartPos_Kd_x);
    stream.next(m.cartPos_Kd_y);
    stream.next(m.cartPos_Kd_z);
    stream.next(m.cartRot_Kp_x);
    stream.next(m.cartRot_Kp_y);
    stream.next(m.cartRot_Kp_z);
    stream.next(m.cartRot_Kd_x);
    stream.next(m.cartRot_Kd_y);
    stream.next(m.cartRot_Kd_z);
    stream.next(m.useCurrentCartPose);
    stream.next(m.useNullspacePose);
    stream.next(m.cartIniX);
    stream.next(m.cartIniY);
    stream.next(m.cartIniZ);
    stream.next(m.cartIniRoll);
    stream.next(m.cartIniPitch);
    stream.next(m.cartIniYaw);
    stream.next(m.cartDesX);
    stream.next(m.cartDesY);
    stream.next(m.cartDesZ);
    stream.next(m.cartDesRoll);
    stream.next(m.cartDesPitch);
    stream.next(m.cartDesYaw);
    stream.next(m.m);
    stream.next(m.d);
    stream.next(m.k);
    stream.next(m.task_mA);
    stream.next(m.task_mB);
    stream.next(m.fixedFilterWeights);
    stream.next(m.w0);
    stream.next(m.w1);
    stream.next(m.w2);
    stream.next(m.w3);
    stream.next(m.w4);
    stream.next(m.w5);
    stream.next(m.w6);
    stream.next(m.w7);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct controllerFullData_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::neuroadaptive_msgs::controllerFullData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::neuroadaptive_msgs::controllerFullData_<ContainerAllocator> & v) 
  {
    s << indent << "dt: ";
    Printer<double>::stream(s, indent + "  ", v.dt);
    s << indent << "force_x: ";
    Printer<double>::stream(s, indent + "  ", v.force_x);
    s << indent << "force_y: ";
    Printer<double>::stream(s, indent + "  ", v.force_y);
    s << indent << "force_z: ";
    Printer<double>::stream(s, indent + "  ", v.force_z);
    s << indent << "torque_x: ";
    Printer<double>::stream(s, indent + "  ", v.torque_x);
    s << indent << "torque_y: ";
    Printer<double>::stream(s, indent + "  ", v.torque_y);
    s << indent << "torque_z: ";
    Printer<double>::stream(s, indent + "  ", v.torque_z);
    s << indent << "acc_x: ";
    Printer<double>::stream(s, indent + "  ", v.acc_x);
    s << indent << "acc_y: ";
    Printer<double>::stream(s, indent + "  ", v.acc_y);
    s << indent << "acc_z: ";
    Printer<double>::stream(s, indent + "  ", v.acc_z);
    s << indent << "r_eff_x: ";
    Printer<double>::stream(s, indent + "  ", v.r_eff_x);
    s << indent << "r_eff_y: ";
    Printer<double>::stream(s, indent + "  ", v.r_eff_y);
    s << indent << "r_eff_z: ";
    Printer<double>::stream(s, indent + "  ", v.r_eff_z);
    s << indent << "r_trq_x: ";
    Printer<double>::stream(s, indent + "  ", v.r_trq_x);
    s << indent << "r_trq_y: ";
    Printer<double>::stream(s, indent + "  ", v.r_trq_y);
    s << indent << "r_trq_z: ";
    Printer<double>::stream(s, indent + "  ", v.r_trq_z);
    s << indent << "reference_eff_j0: ";
    Printer<double>::stream(s, indent + "  ", v.reference_eff_j0);
    s << indent << "reference_eff_j1: ";
    Printer<double>::stream(s, indent + "  ", v.reference_eff_j1);
    s << indent << "reference_eff_j2: ";
    Printer<double>::stream(s, indent + "  ", v.reference_eff_j2);
    s << indent << "reference_eff_j3: ";
    Printer<double>::stream(s, indent + "  ", v.reference_eff_j3);
    s << indent << "reference_eff_j4: ";
    Printer<double>::stream(s, indent + "  ", v.reference_eff_j4);
    s << indent << "reference_eff_j5: ";
    Printer<double>::stream(s, indent + "  ", v.reference_eff_j5);
    s << indent << "reference_eff_j6: ";
    Printer<double>::stream(s, indent + "  ", v.reference_eff_j6);
    s << indent << "taskRef_x: ";
    Printer<double>::stream(s, indent + "  ", v.taskRef_x);
    s << indent << "taskRef_y: ";
    Printer<double>::stream(s, indent + "  ", v.taskRef_y);
    s << indent << "taskRef_z: ";
    Printer<double>::stream(s, indent + "  ", v.taskRef_z);
    s << indent << "taskRef_phi: ";
    Printer<double>::stream(s, indent + "  ", v.taskRef_phi);
    s << indent << "taskRef_theta: ";
    Printer<double>::stream(s, indent + "  ", v.taskRef_theta);
    s << indent << "taskRef_psi: ";
    Printer<double>::stream(s, indent + "  ", v.taskRef_psi);
    s << indent << "taskRefModel_x: ";
    Printer<double>::stream(s, indent + "  ", v.taskRefModel_x);
    s << indent << "taskRefModel_y: ";
    Printer<double>::stream(s, indent + "  ", v.taskRefModel_y);
    s << indent << "taskRefModel_z: ";
    Printer<double>::stream(s, indent + "  ", v.taskRefModel_z);
    s << indent << "taskRefModel_phi: ";
    Printer<double>::stream(s, indent + "  ", v.taskRefModel_phi);
    s << indent << "taskRefModel_theta: ";
    Printer<double>::stream(s, indent + "  ", v.taskRefModel_theta);
    s << indent << "taskRefModel_psi: ";
    Printer<double>::stream(s, indent + "  ", v.taskRefModel_psi);
    s << indent << "m_cartPos_x: ";
    Printer<double>::stream(s, indent + "  ", v.m_cartPos_x);
    s << indent << "m_cartPos_y: ";
    Printer<double>::stream(s, indent + "  ", v.m_cartPos_y);
    s << indent << "m_cartPos_z: ";
    Printer<double>::stream(s, indent + "  ", v.m_cartPos_z);
    s << indent << "m_cartPos_Qx: ";
    Printer<double>::stream(s, indent + "  ", v.m_cartPos_Qx);
    s << indent << "m_cartPos_Qy: ";
    Printer<double>::stream(s, indent + "  ", v.m_cartPos_Qy);
    s << indent << "m_cartPos_Qz: ";
    Printer<double>::stream(s, indent + "  ", v.m_cartPos_Qz);
    s << indent << "m_cartPos_QW: ";
    Printer<double>::stream(s, indent + "  ", v.m_cartPos_QW);
    s << indent << "m_pos_x: ";
    Printer<double>::stream(s, indent + "  ", v.m_pos_x);
    s << indent << "m_pos_y: ";
    Printer<double>::stream(s, indent + "  ", v.m_pos_y);
    s << indent << "m_pos_z: ";
    Printer<double>::stream(s, indent + "  ", v.m_pos_z);
    s << indent << "m_vel_x: ";
    Printer<double>::stream(s, indent + "  ", v.m_vel_x);
    s << indent << "m_vel_y: ";
    Printer<double>::stream(s, indent + "  ", v.m_vel_y);
    s << indent << "m_vel_z: ";
    Printer<double>::stream(s, indent + "  ", v.m_vel_z);
    s << indent << "m_acc_x: ";
    Printer<double>::stream(s, indent + "  ", v.m_acc_x);
    s << indent << "m_acc_y: ";
    Printer<double>::stream(s, indent + "  ", v.m_acc_y);
    s << indent << "m_acc_z: ";
    Printer<double>::stream(s, indent + "  ", v.m_acc_z);
    s << indent << "m_pos_j0: ";
    Printer<double>::stream(s, indent + "  ", v.m_pos_j0);
    s << indent << "m_pos_j1: ";
    Printer<double>::stream(s, indent + "  ", v.m_pos_j1);
    s << indent << "m_pos_j2: ";
    Printer<double>::stream(s, indent + "  ", v.m_pos_j2);
    s << indent << "m_pos_j3: ";
    Printer<double>::stream(s, indent + "  ", v.m_pos_j3);
    s << indent << "m_pos_j4: ";
    Printer<double>::stream(s, indent + "  ", v.m_pos_j4);
    s << indent << "m_pos_j5: ";
    Printer<double>::stream(s, indent + "  ", v.m_pos_j5);
    s << indent << "m_pos_j6: ";
    Printer<double>::stream(s, indent + "  ", v.m_pos_j6);
    s << indent << "m_vel_j0: ";
    Printer<double>::stream(s, indent + "  ", v.m_vel_j0);
    s << indent << "m_vel_j1: ";
    Printer<double>::stream(s, indent + "  ", v.m_vel_j1);
    s << indent << "m_vel_j2: ";
    Printer<double>::stream(s, indent + "  ", v.m_vel_j2);
    s << indent << "m_vel_j3: ";
    Printer<double>::stream(s, indent + "  ", v.m_vel_j3);
    s << indent << "m_vel_j4: ";
    Printer<double>::stream(s, indent + "  ", v.m_vel_j4);
    s << indent << "m_vel_j5: ";
    Printer<double>::stream(s, indent + "  ", v.m_vel_j5);
    s << indent << "m_vel_j6: ";
    Printer<double>::stream(s, indent + "  ", v.m_vel_j6);
    s << indent << "m_acc_j0: ";
    Printer<double>::stream(s, indent + "  ", v.m_acc_j0);
    s << indent << "m_acc_j1: ";
    Printer<double>::stream(s, indent + "  ", v.m_acc_j1);
    s << indent << "m_acc_j2: ";
    Printer<double>::stream(s, indent + "  ", v.m_acc_j2);
    s << indent << "m_acc_j3: ";
    Printer<double>::stream(s, indent + "  ", v.m_acc_j3);
    s << indent << "m_acc_j4: ";
    Printer<double>::stream(s, indent + "  ", v.m_acc_j4);
    s << indent << "m_acc_j5: ";
    Printer<double>::stream(s, indent + "  ", v.m_acc_j5);
    s << indent << "m_acc_j6: ";
    Printer<double>::stream(s, indent + "  ", v.m_acc_j6);
    s << indent << "m_eff_j0: ";
    Printer<double>::stream(s, indent + "  ", v.m_eff_j0);
    s << indent << "m_eff_j1: ";
    Printer<double>::stream(s, indent + "  ", v.m_eff_j1);
    s << indent << "m_eff_j2: ";
    Printer<double>::stream(s, indent + "  ", v.m_eff_j2);
    s << indent << "m_eff_j3: ";
    Printer<double>::stream(s, indent + "  ", v.m_eff_j3);
    s << indent << "m_eff_j4: ";
    Printer<double>::stream(s, indent + "  ", v.m_eff_j4);
    s << indent << "m_eff_j5: ";
    Printer<double>::stream(s, indent + "  ", v.m_eff_j5);
    s << indent << "m_eff_j6: ";
    Printer<double>::stream(s, indent + "  ", v.m_eff_j6);
    s << indent << "control_eff_j0: ";
    Printer<double>::stream(s, indent + "  ", v.control_eff_j0);
    s << indent << "control_eff_j1: ";
    Printer<double>::stream(s, indent + "  ", v.control_eff_j1);
    s << indent << "control_eff_j2: ";
    Printer<double>::stream(s, indent + "  ", v.control_eff_j2);
    s << indent << "control_eff_j3: ";
    Printer<double>::stream(s, indent + "  ", v.control_eff_j3);
    s << indent << "control_eff_j4: ";
    Printer<double>::stream(s, indent + "  ", v.control_eff_j4);
    s << indent << "control_eff_j5: ";
    Printer<double>::stream(s, indent + "  ", v.control_eff_j5);
    s << indent << "control_eff_j6: ";
    Printer<double>::stream(s, indent + "  ", v.control_eff_j6);
    s << indent << "r_cartPos_x: ";
    Printer<double>::stream(s, indent + "  ", v.r_cartPos_x);
    s << indent << "r_cartPos_y: ";
    Printer<double>::stream(s, indent + "  ", v.r_cartPos_y);
    s << indent << "r_cartPos_z: ";
    Printer<double>::stream(s, indent + "  ", v.r_cartPos_z);
    s << indent << "r_cartPos_Qx: ";
    Printer<double>::stream(s, indent + "  ", v.r_cartPos_Qx);
    s << indent << "r_cartPos_Qy: ";
    Printer<double>::stream(s, indent + "  ", v.r_cartPos_Qy);
    s << indent << "r_cartPos_Qz: ";
    Printer<double>::stream(s, indent + "  ", v.r_cartPos_Qz);
    s << indent << "r_cartPos_QW: ";
    Printer<double>::stream(s, indent + "  ", v.r_cartPos_QW);
    s << indent << "r_pos_j0: ";
    Printer<double>::stream(s, indent + "  ", v.r_pos_j0);
    s << indent << "r_pos_j1: ";
    Printer<double>::stream(s, indent + "  ", v.r_pos_j1);
    s << indent << "r_pos_j2: ";
    Printer<double>::stream(s, indent + "  ", v.r_pos_j2);
    s << indent << "r_pos_j3: ";
    Printer<double>::stream(s, indent + "  ", v.r_pos_j3);
    s << indent << "r_pos_j4: ";
    Printer<double>::stream(s, indent + "  ", v.r_pos_j4);
    s << indent << "r_pos_j5: ";
    Printer<double>::stream(s, indent + "  ", v.r_pos_j5);
    s << indent << "r_pos_j6: ";
    Printer<double>::stream(s, indent + "  ", v.r_pos_j6);
    s << indent << "r_vel_j0: ";
    Printer<double>::stream(s, indent + "  ", v.r_vel_j0);
    s << indent << "r_vel_j1: ";
    Printer<double>::stream(s, indent + "  ", v.r_vel_j1);
    s << indent << "r_vel_j2: ";
    Printer<double>::stream(s, indent + "  ", v.r_vel_j2);
    s << indent << "r_vel_j3: ";
    Printer<double>::stream(s, indent + "  ", v.r_vel_j3);
    s << indent << "r_vel_j4: ";
    Printer<double>::stream(s, indent + "  ", v.r_vel_j4);
    s << indent << "r_vel_j5: ";
    Printer<double>::stream(s, indent + "  ", v.r_vel_j5);
    s << indent << "r_vel_j6: ";
    Printer<double>::stream(s, indent + "  ", v.r_vel_j6);
    s << indent << "r_acc_j0: ";
    Printer<double>::stream(s, indent + "  ", v.r_acc_j0);
    s << indent << "r_acc_j1: ";
    Printer<double>::stream(s, indent + "  ", v.r_acc_j1);
    s << indent << "r_acc_j2: ";
    Printer<double>::stream(s, indent + "  ", v.r_acc_j2);
    s << indent << "r_acc_j3: ";
    Printer<double>::stream(s, indent + "  ", v.r_acc_j3);
    s << indent << "r_acc_j4: ";
    Printer<double>::stream(s, indent + "  ", v.r_acc_j4);
    s << indent << "r_acc_j5: ";
    Printer<double>::stream(s, indent + "  ", v.r_acc_j5);
    s << indent << "r_acc_j6: ";
    Printer<double>::stream(s, indent + "  ", v.r_acc_j6);
    s << indent << "r_eff_j0: ";
    Printer<double>::stream(s, indent + "  ", v.r_eff_j0);
    s << indent << "r_eff_j1: ";
    Printer<double>::stream(s, indent + "  ", v.r_eff_j1);
    s << indent << "r_eff_j2: ";
    Printer<double>::stream(s, indent + "  ", v.r_eff_j2);
    s << indent << "r_eff_j3: ";
    Printer<double>::stream(s, indent + "  ", v.r_eff_j3);
    s << indent << "r_eff_j4: ";
    Printer<double>::stream(s, indent + "  ", v.r_eff_j4);
    s << indent << "r_eff_j5: ";
    Printer<double>::stream(s, indent + "  ", v.r_eff_j5);
    s << indent << "r_eff_j6: ";
    Printer<double>::stream(s, indent + "  ", v.r_eff_j6);
    s << indent << "l_limit_0: ";
    Printer<double>::stream(s, indent + "  ", v.l_limit_0);
    s << indent << "l_limit_1: ";
    Printer<double>::stream(s, indent + "  ", v.l_limit_1);
    s << indent << "l_limit_2: ";
    Printer<double>::stream(s, indent + "  ", v.l_limit_2);
    s << indent << "l_limit_3: ";
    Printer<double>::stream(s, indent + "  ", v.l_limit_3);
    s << indent << "l_limit_4: ";
    Printer<double>::stream(s, indent + "  ", v.l_limit_4);
    s << indent << "l_limit_5: ";
    Printer<double>::stream(s, indent + "  ", v.l_limit_5);
    s << indent << "l_limit_6: ";
    Printer<double>::stream(s, indent + "  ", v.l_limit_6);
    s << indent << "u_limit_0: ";
    Printer<double>::stream(s, indent + "  ", v.u_limit_0);
    s << indent << "u_limit_1: ";
    Printer<double>::stream(s, indent + "  ", v.u_limit_1);
    s << indent << "u_limit_2: ";
    Printer<double>::stream(s, indent + "  ", v.u_limit_2);
    s << indent << "u_limit_3: ";
    Printer<double>::stream(s, indent + "  ", v.u_limit_3);
    s << indent << "u_limit_4: ";
    Printer<double>::stream(s, indent + "  ", v.u_limit_4);
    s << indent << "u_limit_5: ";
    Printer<double>::stream(s, indent + "  ", v.u_limit_5);
    s << indent << "u_limit_6: ";
    Printer<double>::stream(s, indent + "  ", v.u_limit_6);
    s << indent << "kappa: ";
    Printer<double>::stream(s, indent + "  ", v.kappa);
    s << indent << "Kv: ";
    Printer<double>::stream(s, indent + "  ", v.Kv);
    s << indent << "lambda: ";
    Printer<double>::stream(s, indent + "  ", v.lambda);
    s << indent << "Kz: ";
    Printer<double>::stream(s, indent + "  ", v.Kz);
    s << indent << "Zb: ";
    Printer<double>::stream(s, indent + "  ", v.Zb);
    s << indent << "F: ";
    Printer<double>::stream(s, indent + "  ", v.F);
    s << indent << "G: ";
    Printer<double>::stream(s, indent + "  ", v.G);
    s << indent << "inParams: ";
    Printer<int64_t>::stream(s, indent + "  ", v.inParams);
    s << indent << "outParams: ";
    Printer<int64_t>::stream(s, indent + "  ", v.outParams);
    s << indent << "hiddenNodes: ";
    Printer<int64_t>::stream(s, indent + "  ", v.hiddenNodes);
    s << indent << "errorParams: ";
    Printer<int64_t>::stream(s, indent + "  ", v.errorParams);
    s << indent << "feedForwardForce: ";
    Printer<double>::stream(s, indent + "  ", v.feedForwardForce);
    s << indent << "nn_ON: ";
    Printer<double>::stream(s, indent + "  ", v.nn_ON);
    s << indent << "cartPos_Kp_x: ";
    Printer<double>::stream(s, indent + "  ", v.cartPos_Kp_x);
    s << indent << "cartPos_Kp_y: ";
    Printer<double>::stream(s, indent + "  ", v.cartPos_Kp_y);
    s << indent << "cartPos_Kp_z: ";
    Printer<double>::stream(s, indent + "  ", v.cartPos_Kp_z);
    s << indent << "cartPos_Kd_x: ";
    Printer<double>::stream(s, indent + "  ", v.cartPos_Kd_x);
    s << indent << "cartPos_Kd_y: ";
    Printer<double>::stream(s, indent + "  ", v.cartPos_Kd_y);
    s << indent << "cartPos_Kd_z: ";
    Printer<double>::stream(s, indent + "  ", v.cartPos_Kd_z);
    s << indent << "cartRot_Kp_x: ";
    Printer<double>::stream(s, indent + "  ", v.cartRot_Kp_x);
    s << indent << "cartRot_Kp_y: ";
    Printer<double>::stream(s, indent + "  ", v.cartRot_Kp_y);
    s << indent << "cartRot_Kp_z: ";
    Printer<double>::stream(s, indent + "  ", v.cartRot_Kp_z);
    s << indent << "cartRot_Kd_x: ";
    Printer<double>::stream(s, indent + "  ", v.cartRot_Kd_x);
    s << indent << "cartRot_Kd_y: ";
    Printer<double>::stream(s, indent + "  ", v.cartRot_Kd_y);
    s << indent << "cartRot_Kd_z: ";
    Printer<double>::stream(s, indent + "  ", v.cartRot_Kd_z);
    s << indent << "useCurrentCartPose: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.useCurrentCartPose);
    s << indent << "useNullspacePose: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.useNullspacePose);
    s << indent << "cartIniX: ";
    Printer<double>::stream(s, indent + "  ", v.cartIniX);
    s << indent << "cartIniY: ";
    Printer<double>::stream(s, indent + "  ", v.cartIniY);
    s << indent << "cartIniZ: ";
    Printer<double>::stream(s, indent + "  ", v.cartIniZ);
    s << indent << "cartIniRoll: ";
    Printer<double>::stream(s, indent + "  ", v.cartIniRoll);
    s << indent << "cartIniPitch: ";
    Printer<double>::stream(s, indent + "  ", v.cartIniPitch);
    s << indent << "cartIniYaw: ";
    Printer<double>::stream(s, indent + "  ", v.cartIniYaw);
    s << indent << "cartDesX: ";
    Printer<double>::stream(s, indent + "  ", v.cartDesX);
    s << indent << "cartDesY: ";
    Printer<double>::stream(s, indent + "  ", v.cartDesY);
    s << indent << "cartDesZ: ";
    Printer<double>::stream(s, indent + "  ", v.cartDesZ);
    s << indent << "cartDesRoll: ";
    Printer<double>::stream(s, indent + "  ", v.cartDesRoll);
    s << indent << "cartDesPitch: ";
    Printer<double>::stream(s, indent + "  ", v.cartDesPitch);
    s << indent << "cartDesYaw: ";
    Printer<double>::stream(s, indent + "  ", v.cartDesYaw);
    s << indent << "m: ";
    Printer<double>::stream(s, indent + "  ", v.m);
    s << indent << "d: ";
    Printer<double>::stream(s, indent + "  ", v.d);
    s << indent << "k: ";
    Printer<double>::stream(s, indent + "  ", v.k);
    s << indent << "task_mA: ";
    Printer<double>::stream(s, indent + "  ", v.task_mA);
    s << indent << "task_mB: ";
    Printer<double>::stream(s, indent + "  ", v.task_mB);
    s << indent << "fixedFilterWeights: ";
    Printer<double>::stream(s, indent + "  ", v.fixedFilterWeights);
    s << indent << "w0: ";
    Printer<double>::stream(s, indent + "  ", v.w0);
    s << indent << "w1: ";
    Printer<double>::stream(s, indent + "  ", v.w1);
    s << indent << "w2: ";
    Printer<double>::stream(s, indent + "  ", v.w2);
    s << indent << "w3: ";
    Printer<double>::stream(s, indent + "  ", v.w3);
    s << indent << "w4: ";
    Printer<double>::stream(s, indent + "  ", v.w4);
    s << indent << "w5: ";
    Printer<double>::stream(s, indent + "  ", v.w5);
    s << indent << "w6: ";
    Printer<double>::stream(s, indent + "  ", v.w6);
    s << indent << "w7: ";
    Printer<double>::stream(s, indent + "  ", v.w7);
  }
};


} // namespace message_operations
} // namespace ros

#endif // NEUROADAPTIVE_MSGS_MESSAGE_CONTROLLERFULLDATA_H

