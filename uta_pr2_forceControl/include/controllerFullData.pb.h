// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: controllerFullData.proto

#ifndef PROTOBUF_controllerFullData_2eproto__INCLUDED
#define PROTOBUF_controllerFullData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace dataPoint {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_controllerFullData_2eproto();
void protobuf_AssignDesc_controllerFullData_2eproto();
void protobuf_ShutdownFile_controllerFullData_2eproto();

class Datum;
class controllerFullData;

// ===================================================================

class Datum : public ::google::protobuf::Message {
 public:
  Datum();
  virtual ~Datum();

  Datum(const Datum& from);

  inline Datum& operator=(const Datum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Datum& default_instance();

  void Swap(Datum* other);

  // implements Message ----------------------------------------------

  Datum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Datum& from);
  void MergeFrom(const Datum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double dt = 1;
  inline bool has_dt() const;
  inline void clear_dt();
  static const int kDtFieldNumber = 1;
  inline double dt() const;
  inline void set_dt(double value);

  // optional double force_x = 2;
  inline bool has_force_x() const;
  inline void clear_force_x();
  static const int kForceXFieldNumber = 2;
  inline double force_x() const;
  inline void set_force_x(double value);

  // optional double force_y = 3;
  inline bool has_force_y() const;
  inline void clear_force_y();
  static const int kForceYFieldNumber = 3;
  inline double force_y() const;
  inline void set_force_y(double value);

  // optional double force_z = 4;
  inline bool has_force_z() const;
  inline void clear_force_z();
  static const int kForceZFieldNumber = 4;
  inline double force_z() const;
  inline void set_force_z(double value);

  // optional double torque_x = 5;
  inline bool has_torque_x() const;
  inline void clear_torque_x();
  static const int kTorqueXFieldNumber = 5;
  inline double torque_x() const;
  inline void set_torque_x(double value);

  // optional double torque_y = 6;
  inline bool has_torque_y() const;
  inline void clear_torque_y();
  static const int kTorqueYFieldNumber = 6;
  inline double torque_y() const;
  inline void set_torque_y(double value);

  // optional double torque_z = 7;
  inline bool has_torque_z() const;
  inline void clear_torque_z();
  static const int kTorqueZFieldNumber = 7;
  inline double torque_z() const;
  inline void set_torque_z(double value);

  // optional double acc_x = 8;
  inline bool has_acc_x() const;
  inline void clear_acc_x();
  static const int kAccXFieldNumber = 8;
  inline double acc_x() const;
  inline void set_acc_x(double value);

  // optional double acc_y = 9;
  inline bool has_acc_y() const;
  inline void clear_acc_y();
  static const int kAccYFieldNumber = 9;
  inline double acc_y() const;
  inline void set_acc_y(double value);

  // optional double acc_z = 10;
  inline bool has_acc_z() const;
  inline void clear_acc_z();
  static const int kAccZFieldNumber = 10;
  inline double acc_z() const;
  inline void set_acc_z(double value);

  // optional double r_eff_x = 11;
  inline bool has_r_eff_x() const;
  inline void clear_r_eff_x();
  static const int kREffXFieldNumber = 11;
  inline double r_eff_x() const;
  inline void set_r_eff_x(double value);

  // optional double r_eff_y = 12;
  inline bool has_r_eff_y() const;
  inline void clear_r_eff_y();
  static const int kREffYFieldNumber = 12;
  inline double r_eff_y() const;
  inline void set_r_eff_y(double value);

  // optional double r_eff_z = 13;
  inline bool has_r_eff_z() const;
  inline void clear_r_eff_z();
  static const int kREffZFieldNumber = 13;
  inline double r_eff_z() const;
  inline void set_r_eff_z(double value);

  // optional double r_trq_x = 14;
  inline bool has_r_trq_x() const;
  inline void clear_r_trq_x();
  static const int kRTrqXFieldNumber = 14;
  inline double r_trq_x() const;
  inline void set_r_trq_x(double value);

  // optional double r_trq_y = 15;
  inline bool has_r_trq_y() const;
  inline void clear_r_trq_y();
  static const int kRTrqYFieldNumber = 15;
  inline double r_trq_y() const;
  inline void set_r_trq_y(double value);

  // optional double r_trq_z = 16;
  inline bool has_r_trq_z() const;
  inline void clear_r_trq_z();
  static const int kRTrqZFieldNumber = 16;
  inline double r_trq_z() const;
  inline void set_r_trq_z(double value);

  // optional double reference_eff_j0 = 17;
  inline bool has_reference_eff_j0() const;
  inline void clear_reference_eff_j0();
  static const int kReferenceEffJ0FieldNumber = 17;
  inline double reference_eff_j0() const;
  inline void set_reference_eff_j0(double value);

  // optional double reference_eff_j1 = 18;
  inline bool has_reference_eff_j1() const;
  inline void clear_reference_eff_j1();
  static const int kReferenceEffJ1FieldNumber = 18;
  inline double reference_eff_j1() const;
  inline void set_reference_eff_j1(double value);

  // optional double reference_eff_j2 = 19;
  inline bool has_reference_eff_j2() const;
  inline void clear_reference_eff_j2();
  static const int kReferenceEffJ2FieldNumber = 19;
  inline double reference_eff_j2() const;
  inline void set_reference_eff_j2(double value);

  // optional double reference_eff_j3 = 20;
  inline bool has_reference_eff_j3() const;
  inline void clear_reference_eff_j3();
  static const int kReferenceEffJ3FieldNumber = 20;
  inline double reference_eff_j3() const;
  inline void set_reference_eff_j3(double value);

  // optional double reference_eff_j4 = 21;
  inline bool has_reference_eff_j4() const;
  inline void clear_reference_eff_j4();
  static const int kReferenceEffJ4FieldNumber = 21;
  inline double reference_eff_j4() const;
  inline void set_reference_eff_j4(double value);

  // optional double reference_eff_j5 = 22;
  inline bool has_reference_eff_j5() const;
  inline void clear_reference_eff_j5();
  static const int kReferenceEffJ5FieldNumber = 22;
  inline double reference_eff_j5() const;
  inline void set_reference_eff_j5(double value);

  // optional double reference_eff_j6 = 23;
  inline bool has_reference_eff_j6() const;
  inline void clear_reference_eff_j6();
  static const int kReferenceEffJ6FieldNumber = 23;
  inline double reference_eff_j6() const;
  inline void set_reference_eff_j6(double value);

  // optional double taskRef_x = 24;
  inline bool has_taskref_x() const;
  inline void clear_taskref_x();
  static const int kTaskRefXFieldNumber = 24;
  inline double taskref_x() const;
  inline void set_taskref_x(double value);

  // optional double taskRef_y = 25;
  inline bool has_taskref_y() const;
  inline void clear_taskref_y();
  static const int kTaskRefYFieldNumber = 25;
  inline double taskref_y() const;
  inline void set_taskref_y(double value);

  // optional double taskRef_z = 26;
  inline bool has_taskref_z() const;
  inline void clear_taskref_z();
  static const int kTaskRefZFieldNumber = 26;
  inline double taskref_z() const;
  inline void set_taskref_z(double value);

  // optional double taskRef_phi = 27;
  inline bool has_taskref_phi() const;
  inline void clear_taskref_phi();
  static const int kTaskRefPhiFieldNumber = 27;
  inline double taskref_phi() const;
  inline void set_taskref_phi(double value);

  // optional double taskRef_theta = 28;
  inline bool has_taskref_theta() const;
  inline void clear_taskref_theta();
  static const int kTaskRefThetaFieldNumber = 28;
  inline double taskref_theta() const;
  inline void set_taskref_theta(double value);

  // optional double taskRef_psi = 29;
  inline bool has_taskref_psi() const;
  inline void clear_taskref_psi();
  static const int kTaskRefPsiFieldNumber = 29;
  inline double taskref_psi() const;
  inline void set_taskref_psi(double value);

  // optional double taskRefModel_x = 30;
  inline bool has_taskrefmodel_x() const;
  inline void clear_taskrefmodel_x();
  static const int kTaskRefModelXFieldNumber = 30;
  inline double taskrefmodel_x() const;
  inline void set_taskrefmodel_x(double value);

  // optional double taskRefModel_y = 31;
  inline bool has_taskrefmodel_y() const;
  inline void clear_taskrefmodel_y();
  static const int kTaskRefModelYFieldNumber = 31;
  inline double taskrefmodel_y() const;
  inline void set_taskrefmodel_y(double value);

  // optional double taskRefModel_z = 32;
  inline bool has_taskrefmodel_z() const;
  inline void clear_taskrefmodel_z();
  static const int kTaskRefModelZFieldNumber = 32;
  inline double taskrefmodel_z() const;
  inline void set_taskrefmodel_z(double value);

  // optional double taskRefModel_phi = 33;
  inline bool has_taskrefmodel_phi() const;
  inline void clear_taskrefmodel_phi();
  static const int kTaskRefModelPhiFieldNumber = 33;
  inline double taskrefmodel_phi() const;
  inline void set_taskrefmodel_phi(double value);

  // optional double taskRefModel_theta = 34;
  inline bool has_taskrefmodel_theta() const;
  inline void clear_taskrefmodel_theta();
  static const int kTaskRefModelThetaFieldNumber = 34;
  inline double taskrefmodel_theta() const;
  inline void set_taskrefmodel_theta(double value);

  // optional double taskRefModel_psi = 35;
  inline bool has_taskrefmodel_psi() const;
  inline void clear_taskrefmodel_psi();
  static const int kTaskRefModelPsiFieldNumber = 35;
  inline double taskrefmodel_psi() const;
  inline void set_taskrefmodel_psi(double value);

  // optional double m_cartPos_x = 36;
  inline bool has_m_cartpos_x() const;
  inline void clear_m_cartpos_x();
  static const int kMCartPosXFieldNumber = 36;
  inline double m_cartpos_x() const;
  inline void set_m_cartpos_x(double value);

  // optional double m_cartPos_y = 37;
  inline bool has_m_cartpos_y() const;
  inline void clear_m_cartpos_y();
  static const int kMCartPosYFieldNumber = 37;
  inline double m_cartpos_y() const;
  inline void set_m_cartpos_y(double value);

  // optional double m_cartPos_z = 38;
  inline bool has_m_cartpos_z() const;
  inline void clear_m_cartpos_z();
  static const int kMCartPosZFieldNumber = 38;
  inline double m_cartpos_z() const;
  inline void set_m_cartpos_z(double value);

  // optional double m_cartPos_Qx = 39;
  inline bool has_m_cartpos_qx() const;
  inline void clear_m_cartpos_qx();
  static const int kMCartPosQxFieldNumber = 39;
  inline double m_cartpos_qx() const;
  inline void set_m_cartpos_qx(double value);

  // optional double m_cartPos_Qy = 40;
  inline bool has_m_cartpos_qy() const;
  inline void clear_m_cartpos_qy();
  static const int kMCartPosQyFieldNumber = 40;
  inline double m_cartpos_qy() const;
  inline void set_m_cartpos_qy(double value);

  // optional double m_cartPos_Qz = 41;
  inline bool has_m_cartpos_qz() const;
  inline void clear_m_cartpos_qz();
  static const int kMCartPosQzFieldNumber = 41;
  inline double m_cartpos_qz() const;
  inline void set_m_cartpos_qz(double value);

  // optional double m_cartPos_QW = 42;
  inline bool has_m_cartpos_qw() const;
  inline void clear_m_cartpos_qw();
  static const int kMCartPosQWFieldNumber = 42;
  inline double m_cartpos_qw() const;
  inline void set_m_cartpos_qw(double value);

  // optional double m_pos_x = 43;
  inline bool has_m_pos_x() const;
  inline void clear_m_pos_x();
  static const int kMPosXFieldNumber = 43;
  inline double m_pos_x() const;
  inline void set_m_pos_x(double value);

  // optional double m_pos_y = 44;
  inline bool has_m_pos_y() const;
  inline void clear_m_pos_y();
  static const int kMPosYFieldNumber = 44;
  inline double m_pos_y() const;
  inline void set_m_pos_y(double value);

  // optional double m_pos_z = 45;
  inline bool has_m_pos_z() const;
  inline void clear_m_pos_z();
  static const int kMPosZFieldNumber = 45;
  inline double m_pos_z() const;
  inline void set_m_pos_z(double value);

  // optional double m_vel_x = 46;
  inline bool has_m_vel_x() const;
  inline void clear_m_vel_x();
  static const int kMVelXFieldNumber = 46;
  inline double m_vel_x() const;
  inline void set_m_vel_x(double value);

  // optional double m_vel_y = 47;
  inline bool has_m_vel_y() const;
  inline void clear_m_vel_y();
  static const int kMVelYFieldNumber = 47;
  inline double m_vel_y() const;
  inline void set_m_vel_y(double value);

  // optional double m_vel_z = 48;
  inline bool has_m_vel_z() const;
  inline void clear_m_vel_z();
  static const int kMVelZFieldNumber = 48;
  inline double m_vel_z() const;
  inline void set_m_vel_z(double value);

  // optional double m_acc_x = 49;
  inline bool has_m_acc_x() const;
  inline void clear_m_acc_x();
  static const int kMAccXFieldNumber = 49;
  inline double m_acc_x() const;
  inline void set_m_acc_x(double value);

  // optional double m_acc_y = 50;
  inline bool has_m_acc_y() const;
  inline void clear_m_acc_y();
  static const int kMAccYFieldNumber = 50;
  inline double m_acc_y() const;
  inline void set_m_acc_y(double value);

  // optional double m_acc_z = 51;
  inline bool has_m_acc_z() const;
  inline void clear_m_acc_z();
  static const int kMAccZFieldNumber = 51;
  inline double m_acc_z() const;
  inline void set_m_acc_z(double value);

  // optional double m_pos_j0 = 52;
  inline bool has_m_pos_j0() const;
  inline void clear_m_pos_j0();
  static const int kMPosJ0FieldNumber = 52;
  inline double m_pos_j0() const;
  inline void set_m_pos_j0(double value);

  // optional double m_pos_j1 = 53;
  inline bool has_m_pos_j1() const;
  inline void clear_m_pos_j1();
  static const int kMPosJ1FieldNumber = 53;
  inline double m_pos_j1() const;
  inline void set_m_pos_j1(double value);

  // optional double m_pos_j2 = 54;
  inline bool has_m_pos_j2() const;
  inline void clear_m_pos_j2();
  static const int kMPosJ2FieldNumber = 54;
  inline double m_pos_j2() const;
  inline void set_m_pos_j2(double value);

  // optional double m_pos_j3 = 55;
  inline bool has_m_pos_j3() const;
  inline void clear_m_pos_j3();
  static const int kMPosJ3FieldNumber = 55;
  inline double m_pos_j3() const;
  inline void set_m_pos_j3(double value);

  // optional double m_pos_j4 = 56;
  inline bool has_m_pos_j4() const;
  inline void clear_m_pos_j4();
  static const int kMPosJ4FieldNumber = 56;
  inline double m_pos_j4() const;
  inline void set_m_pos_j4(double value);

  // optional double m_pos_j5 = 57;
  inline bool has_m_pos_j5() const;
  inline void clear_m_pos_j5();
  static const int kMPosJ5FieldNumber = 57;
  inline double m_pos_j5() const;
  inline void set_m_pos_j5(double value);

  // optional double m_pos_j6 = 58;
  inline bool has_m_pos_j6() const;
  inline void clear_m_pos_j6();
  static const int kMPosJ6FieldNumber = 58;
  inline double m_pos_j6() const;
  inline void set_m_pos_j6(double value);

  // optional double m_vel_j0 = 59;
  inline bool has_m_vel_j0() const;
  inline void clear_m_vel_j0();
  static const int kMVelJ0FieldNumber = 59;
  inline double m_vel_j0() const;
  inline void set_m_vel_j0(double value);

  // optional double m_vel_j1 = 60;
  inline bool has_m_vel_j1() const;
  inline void clear_m_vel_j1();
  static const int kMVelJ1FieldNumber = 60;
  inline double m_vel_j1() const;
  inline void set_m_vel_j1(double value);

  // optional double m_vel_j2 = 61;
  inline bool has_m_vel_j2() const;
  inline void clear_m_vel_j2();
  static const int kMVelJ2FieldNumber = 61;
  inline double m_vel_j2() const;
  inline void set_m_vel_j2(double value);

  // optional double m_vel_j3 = 62;
  inline bool has_m_vel_j3() const;
  inline void clear_m_vel_j3();
  static const int kMVelJ3FieldNumber = 62;
  inline double m_vel_j3() const;
  inline void set_m_vel_j3(double value);

  // optional double m_vel_j4 = 63;
  inline bool has_m_vel_j4() const;
  inline void clear_m_vel_j4();
  static const int kMVelJ4FieldNumber = 63;
  inline double m_vel_j4() const;
  inline void set_m_vel_j4(double value);

  // optional double m_vel_j5 = 64;
  inline bool has_m_vel_j5() const;
  inline void clear_m_vel_j5();
  static const int kMVelJ5FieldNumber = 64;
  inline double m_vel_j5() const;
  inline void set_m_vel_j5(double value);

  // optional double m_vel_j6 = 65;
  inline bool has_m_vel_j6() const;
  inline void clear_m_vel_j6();
  static const int kMVelJ6FieldNumber = 65;
  inline double m_vel_j6() const;
  inline void set_m_vel_j6(double value);

  // optional double m_acc_j0 = 66;
  inline bool has_m_acc_j0() const;
  inline void clear_m_acc_j0();
  static const int kMAccJ0FieldNumber = 66;
  inline double m_acc_j0() const;
  inline void set_m_acc_j0(double value);

  // optional double m_acc_j1 = 67;
  inline bool has_m_acc_j1() const;
  inline void clear_m_acc_j1();
  static const int kMAccJ1FieldNumber = 67;
  inline double m_acc_j1() const;
  inline void set_m_acc_j1(double value);

  // optional double m_acc_j2 = 68;
  inline bool has_m_acc_j2() const;
  inline void clear_m_acc_j2();
  static const int kMAccJ2FieldNumber = 68;
  inline double m_acc_j2() const;
  inline void set_m_acc_j2(double value);

  // optional double m_acc_j3 = 69;
  inline bool has_m_acc_j3() const;
  inline void clear_m_acc_j3();
  static const int kMAccJ3FieldNumber = 69;
  inline double m_acc_j3() const;
  inline void set_m_acc_j3(double value);

  // optional double m_acc_j4 = 70;
  inline bool has_m_acc_j4() const;
  inline void clear_m_acc_j4();
  static const int kMAccJ4FieldNumber = 70;
  inline double m_acc_j4() const;
  inline void set_m_acc_j4(double value);

  // optional double m_acc_j5 = 71;
  inline bool has_m_acc_j5() const;
  inline void clear_m_acc_j5();
  static const int kMAccJ5FieldNumber = 71;
  inline double m_acc_j5() const;
  inline void set_m_acc_j5(double value);

  // optional double m_acc_j6 = 72;
  inline bool has_m_acc_j6() const;
  inline void clear_m_acc_j6();
  static const int kMAccJ6FieldNumber = 72;
  inline double m_acc_j6() const;
  inline void set_m_acc_j6(double value);

  // optional double m_eff_j0 = 73;
  inline bool has_m_eff_j0() const;
  inline void clear_m_eff_j0();
  static const int kMEffJ0FieldNumber = 73;
  inline double m_eff_j0() const;
  inline void set_m_eff_j0(double value);

  // optional double m_eff_j1 = 74;
  inline bool has_m_eff_j1() const;
  inline void clear_m_eff_j1();
  static const int kMEffJ1FieldNumber = 74;
  inline double m_eff_j1() const;
  inline void set_m_eff_j1(double value);

  // optional double m_eff_j2 = 75;
  inline bool has_m_eff_j2() const;
  inline void clear_m_eff_j2();
  static const int kMEffJ2FieldNumber = 75;
  inline double m_eff_j2() const;
  inline void set_m_eff_j2(double value);

  // optional double m_eff_j3 = 76;
  inline bool has_m_eff_j3() const;
  inline void clear_m_eff_j3();
  static const int kMEffJ3FieldNumber = 76;
  inline double m_eff_j3() const;
  inline void set_m_eff_j3(double value);

  // optional double m_eff_j4 = 77;
  inline bool has_m_eff_j4() const;
  inline void clear_m_eff_j4();
  static const int kMEffJ4FieldNumber = 77;
  inline double m_eff_j4() const;
  inline void set_m_eff_j4(double value);

  // optional double m_eff_j5 = 78;
  inline bool has_m_eff_j5() const;
  inline void clear_m_eff_j5();
  static const int kMEffJ5FieldNumber = 78;
  inline double m_eff_j5() const;
  inline void set_m_eff_j5(double value);

  // optional double m_eff_j6 = 79;
  inline bool has_m_eff_j6() const;
  inline void clear_m_eff_j6();
  static const int kMEffJ6FieldNumber = 79;
  inline double m_eff_j6() const;
  inline void set_m_eff_j6(double value);

  // optional double control_eff_j0 = 80;
  inline bool has_control_eff_j0() const;
  inline void clear_control_eff_j0();
  static const int kControlEffJ0FieldNumber = 80;
  inline double control_eff_j0() const;
  inline void set_control_eff_j0(double value);

  // optional double control_eff_j1 = 81;
  inline bool has_control_eff_j1() const;
  inline void clear_control_eff_j1();
  static const int kControlEffJ1FieldNumber = 81;
  inline double control_eff_j1() const;
  inline void set_control_eff_j1(double value);

  // optional double control_eff_j2 = 82;
  inline bool has_control_eff_j2() const;
  inline void clear_control_eff_j2();
  static const int kControlEffJ2FieldNumber = 82;
  inline double control_eff_j2() const;
  inline void set_control_eff_j2(double value);

  // optional double control_eff_j3 = 83;
  inline bool has_control_eff_j3() const;
  inline void clear_control_eff_j3();
  static const int kControlEffJ3FieldNumber = 83;
  inline double control_eff_j3() const;
  inline void set_control_eff_j3(double value);

  // optional double control_eff_j4 = 84;
  inline bool has_control_eff_j4() const;
  inline void clear_control_eff_j4();
  static const int kControlEffJ4FieldNumber = 84;
  inline double control_eff_j4() const;
  inline void set_control_eff_j4(double value);

  // optional double control_eff_j5 = 85;
  inline bool has_control_eff_j5() const;
  inline void clear_control_eff_j5();
  static const int kControlEffJ5FieldNumber = 85;
  inline double control_eff_j5() const;
  inline void set_control_eff_j5(double value);

  // optional double control_eff_j6 = 86;
  inline bool has_control_eff_j6() const;
  inline void clear_control_eff_j6();
  static const int kControlEffJ6FieldNumber = 86;
  inline double control_eff_j6() const;
  inline void set_control_eff_j6(double value);

  // optional double r_cartPos_x = 87;
  inline bool has_r_cartpos_x() const;
  inline void clear_r_cartpos_x();
  static const int kRCartPosXFieldNumber = 87;
  inline double r_cartpos_x() const;
  inline void set_r_cartpos_x(double value);

  // optional double r_cartPos_y = 88;
  inline bool has_r_cartpos_y() const;
  inline void clear_r_cartpos_y();
  static const int kRCartPosYFieldNumber = 88;
  inline double r_cartpos_y() const;
  inline void set_r_cartpos_y(double value);

  // optional double r_cartPos_z = 89;
  inline bool has_r_cartpos_z() const;
  inline void clear_r_cartpos_z();
  static const int kRCartPosZFieldNumber = 89;
  inline double r_cartpos_z() const;
  inline void set_r_cartpos_z(double value);

  // optional double r_cartPos_Qx = 90;
  inline bool has_r_cartpos_qx() const;
  inline void clear_r_cartpos_qx();
  static const int kRCartPosQxFieldNumber = 90;
  inline double r_cartpos_qx() const;
  inline void set_r_cartpos_qx(double value);

  // optional double r_cartPos_Qy = 91;
  inline bool has_r_cartpos_qy() const;
  inline void clear_r_cartpos_qy();
  static const int kRCartPosQyFieldNumber = 91;
  inline double r_cartpos_qy() const;
  inline void set_r_cartpos_qy(double value);

  // optional double r_cartPos_Qz = 92;
  inline bool has_r_cartpos_qz() const;
  inline void clear_r_cartpos_qz();
  static const int kRCartPosQzFieldNumber = 92;
  inline double r_cartpos_qz() const;
  inline void set_r_cartpos_qz(double value);

  // optional double r_cartPos_QW = 93;
  inline bool has_r_cartpos_qw() const;
  inline void clear_r_cartpos_qw();
  static const int kRCartPosQWFieldNumber = 93;
  inline double r_cartpos_qw() const;
  inline void set_r_cartpos_qw(double value);

  // optional double r_pos_j0 = 94;
  inline bool has_r_pos_j0() const;
  inline void clear_r_pos_j0();
  static const int kRPosJ0FieldNumber = 94;
  inline double r_pos_j0() const;
  inline void set_r_pos_j0(double value);

  // optional double r_pos_j1 = 95;
  inline bool has_r_pos_j1() const;
  inline void clear_r_pos_j1();
  static const int kRPosJ1FieldNumber = 95;
  inline double r_pos_j1() const;
  inline void set_r_pos_j1(double value);

  // optional double r_pos_j2 = 96;
  inline bool has_r_pos_j2() const;
  inline void clear_r_pos_j2();
  static const int kRPosJ2FieldNumber = 96;
  inline double r_pos_j2() const;
  inline void set_r_pos_j2(double value);

  // optional double r_pos_j3 = 97;
  inline bool has_r_pos_j3() const;
  inline void clear_r_pos_j3();
  static const int kRPosJ3FieldNumber = 97;
  inline double r_pos_j3() const;
  inline void set_r_pos_j3(double value);

  // optional double r_pos_j4 = 98;
  inline bool has_r_pos_j4() const;
  inline void clear_r_pos_j4();
  static const int kRPosJ4FieldNumber = 98;
  inline double r_pos_j4() const;
  inline void set_r_pos_j4(double value);

  // optional double r_pos_j5 = 99;
  inline bool has_r_pos_j5() const;
  inline void clear_r_pos_j5();
  static const int kRPosJ5FieldNumber = 99;
  inline double r_pos_j5() const;
  inline void set_r_pos_j5(double value);

  // optional double r_pos_j6 = 100;
  inline bool has_r_pos_j6() const;
  inline void clear_r_pos_j6();
  static const int kRPosJ6FieldNumber = 100;
  inline double r_pos_j6() const;
  inline void set_r_pos_j6(double value);

  // optional double r_vel_j0 = 101;
  inline bool has_r_vel_j0() const;
  inline void clear_r_vel_j0();
  static const int kRVelJ0FieldNumber = 101;
  inline double r_vel_j0() const;
  inline void set_r_vel_j0(double value);

  // optional double r_vel_j1 = 102;
  inline bool has_r_vel_j1() const;
  inline void clear_r_vel_j1();
  static const int kRVelJ1FieldNumber = 102;
  inline double r_vel_j1() const;
  inline void set_r_vel_j1(double value);

  // optional double r_vel_j2 = 103;
  inline bool has_r_vel_j2() const;
  inline void clear_r_vel_j2();
  static const int kRVelJ2FieldNumber = 103;
  inline double r_vel_j2() const;
  inline void set_r_vel_j2(double value);

  // optional double r_vel_j3 = 104;
  inline bool has_r_vel_j3() const;
  inline void clear_r_vel_j3();
  static const int kRVelJ3FieldNumber = 104;
  inline double r_vel_j3() const;
  inline void set_r_vel_j3(double value);

  // optional double r_vel_j4 = 105;
  inline bool has_r_vel_j4() const;
  inline void clear_r_vel_j4();
  static const int kRVelJ4FieldNumber = 105;
  inline double r_vel_j4() const;
  inline void set_r_vel_j4(double value);

  // optional double r_vel_j5 = 106;
  inline bool has_r_vel_j5() const;
  inline void clear_r_vel_j5();
  static const int kRVelJ5FieldNumber = 106;
  inline double r_vel_j5() const;
  inline void set_r_vel_j5(double value);

  // optional double r_vel_j6 = 107;
  inline bool has_r_vel_j6() const;
  inline void clear_r_vel_j6();
  static const int kRVelJ6FieldNumber = 107;
  inline double r_vel_j6() const;
  inline void set_r_vel_j6(double value);

  // optional double r_acc_j0 = 108;
  inline bool has_r_acc_j0() const;
  inline void clear_r_acc_j0();
  static const int kRAccJ0FieldNumber = 108;
  inline double r_acc_j0() const;
  inline void set_r_acc_j0(double value);

  // optional double r_acc_j1 = 109;
  inline bool has_r_acc_j1() const;
  inline void clear_r_acc_j1();
  static const int kRAccJ1FieldNumber = 109;
  inline double r_acc_j1() const;
  inline void set_r_acc_j1(double value);

  // optional double r_acc_j2 = 110;
  inline bool has_r_acc_j2() const;
  inline void clear_r_acc_j2();
  static const int kRAccJ2FieldNumber = 110;
  inline double r_acc_j2() const;
  inline void set_r_acc_j2(double value);

  // optional double r_acc_j3 = 111;
  inline bool has_r_acc_j3() const;
  inline void clear_r_acc_j3();
  static const int kRAccJ3FieldNumber = 111;
  inline double r_acc_j3() const;
  inline void set_r_acc_j3(double value);

  // optional double r_acc_j4 = 112;
  inline bool has_r_acc_j4() const;
  inline void clear_r_acc_j4();
  static const int kRAccJ4FieldNumber = 112;
  inline double r_acc_j4() const;
  inline void set_r_acc_j4(double value);

  // optional double r_acc_j5 = 113;
  inline bool has_r_acc_j5() const;
  inline void clear_r_acc_j5();
  static const int kRAccJ5FieldNumber = 113;
  inline double r_acc_j5() const;
  inline void set_r_acc_j5(double value);

  // optional double r_acc_j6 = 114;
  inline bool has_r_acc_j6() const;
  inline void clear_r_acc_j6();
  static const int kRAccJ6FieldNumber = 114;
  inline double r_acc_j6() const;
  inline void set_r_acc_j6(double value);

  // optional double r_eff_j0 = 115;
  inline bool has_r_eff_j0() const;
  inline void clear_r_eff_j0();
  static const int kREffJ0FieldNumber = 115;
  inline double r_eff_j0() const;
  inline void set_r_eff_j0(double value);

  // optional double r_eff_j1 = 116;
  inline bool has_r_eff_j1() const;
  inline void clear_r_eff_j1();
  static const int kREffJ1FieldNumber = 116;
  inline double r_eff_j1() const;
  inline void set_r_eff_j1(double value);

  // optional double r_eff_j2 = 117;
  inline bool has_r_eff_j2() const;
  inline void clear_r_eff_j2();
  static const int kREffJ2FieldNumber = 117;
  inline double r_eff_j2() const;
  inline void set_r_eff_j2(double value);

  // optional double r_eff_j3 = 118;
  inline bool has_r_eff_j3() const;
  inline void clear_r_eff_j3();
  static const int kREffJ3FieldNumber = 118;
  inline double r_eff_j3() const;
  inline void set_r_eff_j3(double value);

  // optional double r_eff_j4 = 119;
  inline bool has_r_eff_j4() const;
  inline void clear_r_eff_j4();
  static const int kREffJ4FieldNumber = 119;
  inline double r_eff_j4() const;
  inline void set_r_eff_j4(double value);

  // optional double r_eff_j5 = 120;
  inline bool has_r_eff_j5() const;
  inline void clear_r_eff_j5();
  static const int kREffJ5FieldNumber = 120;
  inline double r_eff_j5() const;
  inline void set_r_eff_j5(double value);

  // optional double r_eff_j6 = 121;
  inline bool has_r_eff_j6() const;
  inline void clear_r_eff_j6();
  static const int kREffJ6FieldNumber = 121;
  inline double r_eff_j6() const;
  inline void set_r_eff_j6(double value);

  // optional double l_limit_0 = 122;
  inline bool has_l_limit_0() const;
  inline void clear_l_limit_0();
  static const int kLLimit0FieldNumber = 122;
  inline double l_limit_0() const;
  inline void set_l_limit_0(double value);

  // optional double l_limit_1 = 123;
  inline bool has_l_limit_1() const;
  inline void clear_l_limit_1();
  static const int kLLimit1FieldNumber = 123;
  inline double l_limit_1() const;
  inline void set_l_limit_1(double value);

  // optional double l_limit_2 = 124;
  inline bool has_l_limit_2() const;
  inline void clear_l_limit_2();
  static const int kLLimit2FieldNumber = 124;
  inline double l_limit_2() const;
  inline void set_l_limit_2(double value);

  // optional double l_limit_3 = 125;
  inline bool has_l_limit_3() const;
  inline void clear_l_limit_3();
  static const int kLLimit3FieldNumber = 125;
  inline double l_limit_3() const;
  inline void set_l_limit_3(double value);

  // optional double l_limit_4 = 126;
  inline bool has_l_limit_4() const;
  inline void clear_l_limit_4();
  static const int kLLimit4FieldNumber = 126;
  inline double l_limit_4() const;
  inline void set_l_limit_4(double value);

  // optional double l_limit_5 = 127;
  inline bool has_l_limit_5() const;
  inline void clear_l_limit_5();
  static const int kLLimit5FieldNumber = 127;
  inline double l_limit_5() const;
  inline void set_l_limit_5(double value);

  // optional double l_limit_6 = 128;
  inline bool has_l_limit_6() const;
  inline void clear_l_limit_6();
  static const int kLLimit6FieldNumber = 128;
  inline double l_limit_6() const;
  inline void set_l_limit_6(double value);

  // optional double u_limit_0 = 129;
  inline bool has_u_limit_0() const;
  inline void clear_u_limit_0();
  static const int kULimit0FieldNumber = 129;
  inline double u_limit_0() const;
  inline void set_u_limit_0(double value);

  // optional double u_limit_1 = 130;
  inline bool has_u_limit_1() const;
  inline void clear_u_limit_1();
  static const int kULimit1FieldNumber = 130;
  inline double u_limit_1() const;
  inline void set_u_limit_1(double value);

  // optional double u_limit_2 = 131;
  inline bool has_u_limit_2() const;
  inline void clear_u_limit_2();
  static const int kULimit2FieldNumber = 131;
  inline double u_limit_2() const;
  inline void set_u_limit_2(double value);

  // optional double u_limit_3 = 132;
  inline bool has_u_limit_3() const;
  inline void clear_u_limit_3();
  static const int kULimit3FieldNumber = 132;
  inline double u_limit_3() const;
  inline void set_u_limit_3(double value);

  // optional double u_limit_4 = 133;
  inline bool has_u_limit_4() const;
  inline void clear_u_limit_4();
  static const int kULimit4FieldNumber = 133;
  inline double u_limit_4() const;
  inline void set_u_limit_4(double value);

  // optional double u_limit_5 = 134;
  inline bool has_u_limit_5() const;
  inline void clear_u_limit_5();
  static const int kULimit5FieldNumber = 134;
  inline double u_limit_5() const;
  inline void set_u_limit_5(double value);

  // optional double u_limit_6 = 135;
  inline bool has_u_limit_6() const;
  inline void clear_u_limit_6();
  static const int kULimit6FieldNumber = 135;
  inline double u_limit_6() const;
  inline void set_u_limit_6(double value);

  // optional double kappa = 136;
  inline bool has_kappa() const;
  inline void clear_kappa();
  static const int kKappaFieldNumber = 136;
  inline double kappa() const;
  inline void set_kappa(double value);

  // optional double Kv = 137;
  inline bool has_kv() const;
  inline void clear_kv();
  static const int kKvFieldNumber = 137;
  inline double kv() const;
  inline void set_kv(double value);

  // optional double lambda = 138;
  inline bool has_lambda() const;
  inline void clear_lambda();
  static const int kLambdaFieldNumber = 138;
  inline double lambda() const;
  inline void set_lambda(double value);

  // optional double Kz = 139;
  inline bool has_kz() const;
  inline void clear_kz();
  static const int kKzFieldNumber = 139;
  inline double kz() const;
  inline void set_kz(double value);

  // optional double Zb = 140;
  inline bool has_zb() const;
  inline void clear_zb();
  static const int kZbFieldNumber = 140;
  inline double zb() const;
  inline void set_zb(double value);

  // optional double F = 141;
  inline bool has_f() const;
  inline void clear_f();
  static const int kFFieldNumber = 141;
  inline double f() const;
  inline void set_f(double value);

  // optional double G = 142;
  inline bool has_g() const;
  inline void clear_g();
  static const int kGFieldNumber = 142;
  inline double g() const;
  inline void set_g(double value);

  // optional int64 inParams = 143;
  inline bool has_inparams() const;
  inline void clear_inparams();
  static const int kInParamsFieldNumber = 143;
  inline ::google::protobuf::int64 inparams() const;
  inline void set_inparams(::google::protobuf::int64 value);

  // optional int64 outParams = 144;
  inline bool has_outparams() const;
  inline void clear_outparams();
  static const int kOutParamsFieldNumber = 144;
  inline ::google::protobuf::int64 outparams() const;
  inline void set_outparams(::google::protobuf::int64 value);

  // optional int64 hiddenNodes = 145;
  inline bool has_hiddennodes() const;
  inline void clear_hiddennodes();
  static const int kHiddenNodesFieldNumber = 145;
  inline ::google::protobuf::int64 hiddennodes() const;
  inline void set_hiddennodes(::google::protobuf::int64 value);

  // optional int64 errorParams = 146;
  inline bool has_errorparams() const;
  inline void clear_errorparams();
  static const int kErrorParamsFieldNumber = 146;
  inline ::google::protobuf::int64 errorparams() const;
  inline void set_errorparams(::google::protobuf::int64 value);

  // optional double feedForwardForce = 147;
  inline bool has_feedforwardforce() const;
  inline void clear_feedforwardforce();
  static const int kFeedForwardForceFieldNumber = 147;
  inline double feedforwardforce() const;
  inline void set_feedforwardforce(double value);

  // optional double nn_ON = 148;
  inline bool has_nn_on() const;
  inline void clear_nn_on();
  static const int kNnONFieldNumber = 148;
  inline double nn_on() const;
  inline void set_nn_on(double value);

  // optional double cartPos_Kp_x = 149;
  inline bool has_cartpos_kp_x() const;
  inline void clear_cartpos_kp_x();
  static const int kCartPosKpXFieldNumber = 149;
  inline double cartpos_kp_x() const;
  inline void set_cartpos_kp_x(double value);

  // optional double cartPos_Kp_y = 150;
  inline bool has_cartpos_kp_y() const;
  inline void clear_cartpos_kp_y();
  static const int kCartPosKpYFieldNumber = 150;
  inline double cartpos_kp_y() const;
  inline void set_cartpos_kp_y(double value);

  // optional double cartPos_Kp_z = 151;
  inline bool has_cartpos_kp_z() const;
  inline void clear_cartpos_kp_z();
  static const int kCartPosKpZFieldNumber = 151;
  inline double cartpos_kp_z() const;
  inline void set_cartpos_kp_z(double value);

  // optional double cartPos_Kd_x = 152;
  inline bool has_cartpos_kd_x() const;
  inline void clear_cartpos_kd_x();
  static const int kCartPosKdXFieldNumber = 152;
  inline double cartpos_kd_x() const;
  inline void set_cartpos_kd_x(double value);

  // optional double cartPos_Kd_y = 153;
  inline bool has_cartpos_kd_y() const;
  inline void clear_cartpos_kd_y();
  static const int kCartPosKdYFieldNumber = 153;
  inline double cartpos_kd_y() const;
  inline void set_cartpos_kd_y(double value);

  // optional double cartPos_Kd_z = 154;
  inline bool has_cartpos_kd_z() const;
  inline void clear_cartpos_kd_z();
  static const int kCartPosKdZFieldNumber = 154;
  inline double cartpos_kd_z() const;
  inline void set_cartpos_kd_z(double value);

  // optional double cartRot_Kp_x = 155;
  inline bool has_cartrot_kp_x() const;
  inline void clear_cartrot_kp_x();
  static const int kCartRotKpXFieldNumber = 155;
  inline double cartrot_kp_x() const;
  inline void set_cartrot_kp_x(double value);

  // optional double cartRot_Kp_y = 156;
  inline bool has_cartrot_kp_y() const;
  inline void clear_cartrot_kp_y();
  static const int kCartRotKpYFieldNumber = 156;
  inline double cartrot_kp_y() const;
  inline void set_cartrot_kp_y(double value);

  // optional double cartRot_Kp_z = 157;
  inline bool has_cartrot_kp_z() const;
  inline void clear_cartrot_kp_z();
  static const int kCartRotKpZFieldNumber = 157;
  inline double cartrot_kp_z() const;
  inline void set_cartrot_kp_z(double value);

  // optional double cartRot_Kd_x = 158;
  inline bool has_cartrot_kd_x() const;
  inline void clear_cartrot_kd_x();
  static const int kCartRotKdXFieldNumber = 158;
  inline double cartrot_kd_x() const;
  inline void set_cartrot_kd_x(double value);

  // optional double cartRot_Kd_y = 159;
  inline bool has_cartrot_kd_y() const;
  inline void clear_cartrot_kd_y();
  static const int kCartRotKdYFieldNumber = 159;
  inline double cartrot_kd_y() const;
  inline void set_cartrot_kd_y(double value);

  // optional double cartRot_Kd_z = 160;
  inline bool has_cartrot_kd_z() const;
  inline void clear_cartrot_kd_z();
  static const int kCartRotKdZFieldNumber = 160;
  inline double cartrot_kd_z() const;
  inline void set_cartrot_kd_z(double value);

  // optional bool useCurrentCartPose = 161;
  inline bool has_usecurrentcartpose() const;
  inline void clear_usecurrentcartpose();
  static const int kUseCurrentCartPoseFieldNumber = 161;
  inline bool usecurrentcartpose() const;
  inline void set_usecurrentcartpose(bool value);

  // optional bool useNullspacePose = 162;
  inline bool has_usenullspacepose() const;
  inline void clear_usenullspacepose();
  static const int kUseNullspacePoseFieldNumber = 162;
  inline bool usenullspacepose() const;
  inline void set_usenullspacepose(bool value);

  // optional double cartIniX = 163;
  inline bool has_cartinix() const;
  inline void clear_cartinix();
  static const int kCartIniXFieldNumber = 163;
  inline double cartinix() const;
  inline void set_cartinix(double value);

  // optional double cartIniY = 164;
  inline bool has_cartiniy() const;
  inline void clear_cartiniy();
  static const int kCartIniYFieldNumber = 164;
  inline double cartiniy() const;
  inline void set_cartiniy(double value);

  // optional double cartIniZ = 165;
  inline bool has_cartiniz() const;
  inline void clear_cartiniz();
  static const int kCartIniZFieldNumber = 165;
  inline double cartiniz() const;
  inline void set_cartiniz(double value);

  // optional double cartIniRoll = 166;
  inline bool has_cartiniroll() const;
  inline void clear_cartiniroll();
  static const int kCartIniRollFieldNumber = 166;
  inline double cartiniroll() const;
  inline void set_cartiniroll(double value);

  // optional double cartIniPitch = 167;
  inline bool has_cartinipitch() const;
  inline void clear_cartinipitch();
  static const int kCartIniPitchFieldNumber = 167;
  inline double cartinipitch() const;
  inline void set_cartinipitch(double value);

  // optional double cartIniYaw = 168;
  inline bool has_cartiniyaw() const;
  inline void clear_cartiniyaw();
  static const int kCartIniYawFieldNumber = 168;
  inline double cartiniyaw() const;
  inline void set_cartiniyaw(double value);

  // optional double cartDesX = 169;
  inline bool has_cartdesx() const;
  inline void clear_cartdesx();
  static const int kCartDesXFieldNumber = 169;
  inline double cartdesx() const;
  inline void set_cartdesx(double value);

  // optional double cartDesY = 170;
  inline bool has_cartdesy() const;
  inline void clear_cartdesy();
  static const int kCartDesYFieldNumber = 170;
  inline double cartdesy() const;
  inline void set_cartdesy(double value);

  // optional double cartDesZ = 171;
  inline bool has_cartdesz() const;
  inline void clear_cartdesz();
  static const int kCartDesZFieldNumber = 171;
  inline double cartdesz() const;
  inline void set_cartdesz(double value);

  // optional double cartDesRoll = 172;
  inline bool has_cartdesroll() const;
  inline void clear_cartdesroll();
  static const int kCartDesRollFieldNumber = 172;
  inline double cartdesroll() const;
  inline void set_cartdesroll(double value);

  // optional double cartDesPitch = 173;
  inline bool has_cartdespitch() const;
  inline void clear_cartdespitch();
  static const int kCartDesPitchFieldNumber = 173;
  inline double cartdespitch() const;
  inline void set_cartdespitch(double value);

  // optional double cartDesYaw = 174;
  inline bool has_cartdesyaw() const;
  inline void clear_cartdesyaw();
  static const int kCartDesYawFieldNumber = 174;
  inline double cartdesyaw() const;
  inline void set_cartdesyaw(double value);

  // optional double m = 175;
  inline bool has_m() const;
  inline void clear_m();
  static const int kMFieldNumber = 175;
  inline double m() const;
  inline void set_m(double value);

  // optional double d = 176;
  inline bool has_d() const;
  inline void clear_d();
  static const int kDFieldNumber = 176;
  inline double d() const;
  inline void set_d(double value);

  // optional double k = 177;
  inline bool has_k() const;
  inline void clear_k();
  static const int kKFieldNumber = 177;
  inline double k() const;
  inline void set_k(double value);

  // optional double task_mA = 178;
  inline bool has_task_ma() const;
  inline void clear_task_ma();
  static const int kTaskMAFieldNumber = 178;
  inline double task_ma() const;
  inline void set_task_ma(double value);

  // optional double task_mB = 179;
  inline bool has_task_mb() const;
  inline void clear_task_mb();
  static const int kTaskMBFieldNumber = 179;
  inline double task_mb() const;
  inline void set_task_mb(double value);

  // optional double fixedFilterWeights = 180;
  inline bool has_fixedfilterweights() const;
  inline void clear_fixedfilterweights();
  static const int kFixedFilterWeightsFieldNumber = 180;
  inline double fixedfilterweights() const;
  inline void set_fixedfilterweights(double value);

  // optional double w0 = 182;
  inline bool has_w0() const;
  inline void clear_w0();
  static const int kW0FieldNumber = 182;
  inline double w0() const;
  inline void set_w0(double value);

  // optional double w1 = 183;
  inline bool has_w1() const;
  inline void clear_w1();
  static const int kW1FieldNumber = 183;
  inline double w1() const;
  inline void set_w1(double value);

  // optional double w2 = 184;
  inline bool has_w2() const;
  inline void clear_w2();
  static const int kW2FieldNumber = 184;
  inline double w2() const;
  inline void set_w2(double value);

  // optional double w3 = 185;
  inline bool has_w3() const;
  inline void clear_w3();
  static const int kW3FieldNumber = 185;
  inline double w3() const;
  inline void set_w3(double value);

  // optional double w4 = 186;
  inline bool has_w4() const;
  inline void clear_w4();
  static const int kW4FieldNumber = 186;
  inline double w4() const;
  inline void set_w4(double value);

  // optional double w5 = 187;
  inline bool has_w5() const;
  inline void clear_w5();
  static const int kW5FieldNumber = 187;
  inline double w5() const;
  inline void set_w5(double value);

  // optional double w6 = 188;
  inline bool has_w6() const;
  inline void clear_w6();
  static const int kW6FieldNumber = 188;
  inline double w6() const;
  inline void set_w6(double value);

  // optional double w7 = 189;
  inline bool has_w7() const;
  inline void clear_w7();
  static const int kW7FieldNumber = 189;
  inline double w7() const;
  inline void set_w7(double value);

  // @@protoc_insertion_point(class_scope:dataPoint.Datum)
 private:
  inline void set_has_dt();
  inline void clear_has_dt();
  inline void set_has_force_x();
  inline void clear_has_force_x();
  inline void set_has_force_y();
  inline void clear_has_force_y();
  inline void set_has_force_z();
  inline void clear_has_force_z();
  inline void set_has_torque_x();
  inline void clear_has_torque_x();
  inline void set_has_torque_y();
  inline void clear_has_torque_y();
  inline void set_has_torque_z();
  inline void clear_has_torque_z();
  inline void set_has_acc_x();
  inline void clear_has_acc_x();
  inline void set_has_acc_y();
  inline void clear_has_acc_y();
  inline void set_has_acc_z();
  inline void clear_has_acc_z();
  inline void set_has_r_eff_x();
  inline void clear_has_r_eff_x();
  inline void set_has_r_eff_y();
  inline void clear_has_r_eff_y();
  inline void set_has_r_eff_z();
  inline void clear_has_r_eff_z();
  inline void set_has_r_trq_x();
  inline void clear_has_r_trq_x();
  inline void set_has_r_trq_y();
  inline void clear_has_r_trq_y();
  inline void set_has_r_trq_z();
  inline void clear_has_r_trq_z();
  inline void set_has_reference_eff_j0();
  inline void clear_has_reference_eff_j0();
  inline void set_has_reference_eff_j1();
  inline void clear_has_reference_eff_j1();
  inline void set_has_reference_eff_j2();
  inline void clear_has_reference_eff_j2();
  inline void set_has_reference_eff_j3();
  inline void clear_has_reference_eff_j3();
  inline void set_has_reference_eff_j4();
  inline void clear_has_reference_eff_j4();
  inline void set_has_reference_eff_j5();
  inline void clear_has_reference_eff_j5();
  inline void set_has_reference_eff_j6();
  inline void clear_has_reference_eff_j6();
  inline void set_has_taskref_x();
  inline void clear_has_taskref_x();
  inline void set_has_taskref_y();
  inline void clear_has_taskref_y();
  inline void set_has_taskref_z();
  inline void clear_has_taskref_z();
  inline void set_has_taskref_phi();
  inline void clear_has_taskref_phi();
  inline void set_has_taskref_theta();
  inline void clear_has_taskref_theta();
  inline void set_has_taskref_psi();
  inline void clear_has_taskref_psi();
  inline void set_has_taskrefmodel_x();
  inline void clear_has_taskrefmodel_x();
  inline void set_has_taskrefmodel_y();
  inline void clear_has_taskrefmodel_y();
  inline void set_has_taskrefmodel_z();
  inline void clear_has_taskrefmodel_z();
  inline void set_has_taskrefmodel_phi();
  inline void clear_has_taskrefmodel_phi();
  inline void set_has_taskrefmodel_theta();
  inline void clear_has_taskrefmodel_theta();
  inline void set_has_taskrefmodel_psi();
  inline void clear_has_taskrefmodel_psi();
  inline void set_has_m_cartpos_x();
  inline void clear_has_m_cartpos_x();
  inline void set_has_m_cartpos_y();
  inline void clear_has_m_cartpos_y();
  inline void set_has_m_cartpos_z();
  inline void clear_has_m_cartpos_z();
  inline void set_has_m_cartpos_qx();
  inline void clear_has_m_cartpos_qx();
  inline void set_has_m_cartpos_qy();
  inline void clear_has_m_cartpos_qy();
  inline void set_has_m_cartpos_qz();
  inline void clear_has_m_cartpos_qz();
  inline void set_has_m_cartpos_qw();
  inline void clear_has_m_cartpos_qw();
  inline void set_has_m_pos_x();
  inline void clear_has_m_pos_x();
  inline void set_has_m_pos_y();
  inline void clear_has_m_pos_y();
  inline void set_has_m_pos_z();
  inline void clear_has_m_pos_z();
  inline void set_has_m_vel_x();
  inline void clear_has_m_vel_x();
  inline void set_has_m_vel_y();
  inline void clear_has_m_vel_y();
  inline void set_has_m_vel_z();
  inline void clear_has_m_vel_z();
  inline void set_has_m_acc_x();
  inline void clear_has_m_acc_x();
  inline void set_has_m_acc_y();
  inline void clear_has_m_acc_y();
  inline void set_has_m_acc_z();
  inline void clear_has_m_acc_z();
  inline void set_has_m_pos_j0();
  inline void clear_has_m_pos_j0();
  inline void set_has_m_pos_j1();
  inline void clear_has_m_pos_j1();
  inline void set_has_m_pos_j2();
  inline void clear_has_m_pos_j2();
  inline void set_has_m_pos_j3();
  inline void clear_has_m_pos_j3();
  inline void set_has_m_pos_j4();
  inline void clear_has_m_pos_j4();
  inline void set_has_m_pos_j5();
  inline void clear_has_m_pos_j5();
  inline void set_has_m_pos_j6();
  inline void clear_has_m_pos_j6();
  inline void set_has_m_vel_j0();
  inline void clear_has_m_vel_j0();
  inline void set_has_m_vel_j1();
  inline void clear_has_m_vel_j1();
  inline void set_has_m_vel_j2();
  inline void clear_has_m_vel_j2();
  inline void set_has_m_vel_j3();
  inline void clear_has_m_vel_j3();
  inline void set_has_m_vel_j4();
  inline void clear_has_m_vel_j4();
  inline void set_has_m_vel_j5();
  inline void clear_has_m_vel_j5();
  inline void set_has_m_vel_j6();
  inline void clear_has_m_vel_j6();
  inline void set_has_m_acc_j0();
  inline void clear_has_m_acc_j0();
  inline void set_has_m_acc_j1();
  inline void clear_has_m_acc_j1();
  inline void set_has_m_acc_j2();
  inline void clear_has_m_acc_j2();
  inline void set_has_m_acc_j3();
  inline void clear_has_m_acc_j3();
  inline void set_has_m_acc_j4();
  inline void clear_has_m_acc_j4();
  inline void set_has_m_acc_j5();
  inline void clear_has_m_acc_j5();
  inline void set_has_m_acc_j6();
  inline void clear_has_m_acc_j6();
  inline void set_has_m_eff_j0();
  inline void clear_has_m_eff_j0();
  inline void set_has_m_eff_j1();
  inline void clear_has_m_eff_j1();
  inline void set_has_m_eff_j2();
  inline void clear_has_m_eff_j2();
  inline void set_has_m_eff_j3();
  inline void clear_has_m_eff_j3();
  inline void set_has_m_eff_j4();
  inline void clear_has_m_eff_j4();
  inline void set_has_m_eff_j5();
  inline void clear_has_m_eff_j5();
  inline void set_has_m_eff_j6();
  inline void clear_has_m_eff_j6();
  inline void set_has_control_eff_j0();
  inline void clear_has_control_eff_j0();
  inline void set_has_control_eff_j1();
  inline void clear_has_control_eff_j1();
  inline void set_has_control_eff_j2();
  inline void clear_has_control_eff_j2();
  inline void set_has_control_eff_j3();
  inline void clear_has_control_eff_j3();
  inline void set_has_control_eff_j4();
  inline void clear_has_control_eff_j4();
  inline void set_has_control_eff_j5();
  inline void clear_has_control_eff_j5();
  inline void set_has_control_eff_j6();
  inline void clear_has_control_eff_j6();
  inline void set_has_r_cartpos_x();
  inline void clear_has_r_cartpos_x();
  inline void set_has_r_cartpos_y();
  inline void clear_has_r_cartpos_y();
  inline void set_has_r_cartpos_z();
  inline void clear_has_r_cartpos_z();
  inline void set_has_r_cartpos_qx();
  inline void clear_has_r_cartpos_qx();
  inline void set_has_r_cartpos_qy();
  inline void clear_has_r_cartpos_qy();
  inline void set_has_r_cartpos_qz();
  inline void clear_has_r_cartpos_qz();
  inline void set_has_r_cartpos_qw();
  inline void clear_has_r_cartpos_qw();
  inline void set_has_r_pos_j0();
  inline void clear_has_r_pos_j0();
  inline void set_has_r_pos_j1();
  inline void clear_has_r_pos_j1();
  inline void set_has_r_pos_j2();
  inline void clear_has_r_pos_j2();
  inline void set_has_r_pos_j3();
  inline void clear_has_r_pos_j3();
  inline void set_has_r_pos_j4();
  inline void clear_has_r_pos_j4();
  inline void set_has_r_pos_j5();
  inline void clear_has_r_pos_j5();
  inline void set_has_r_pos_j6();
  inline void clear_has_r_pos_j6();
  inline void set_has_r_vel_j0();
  inline void clear_has_r_vel_j0();
  inline void set_has_r_vel_j1();
  inline void clear_has_r_vel_j1();
  inline void set_has_r_vel_j2();
  inline void clear_has_r_vel_j2();
  inline void set_has_r_vel_j3();
  inline void clear_has_r_vel_j3();
  inline void set_has_r_vel_j4();
  inline void clear_has_r_vel_j4();
  inline void set_has_r_vel_j5();
  inline void clear_has_r_vel_j5();
  inline void set_has_r_vel_j6();
  inline void clear_has_r_vel_j6();
  inline void set_has_r_acc_j0();
  inline void clear_has_r_acc_j0();
  inline void set_has_r_acc_j1();
  inline void clear_has_r_acc_j1();
  inline void set_has_r_acc_j2();
  inline void clear_has_r_acc_j2();
  inline void set_has_r_acc_j3();
  inline void clear_has_r_acc_j3();
  inline void set_has_r_acc_j4();
  inline void clear_has_r_acc_j4();
  inline void set_has_r_acc_j5();
  inline void clear_has_r_acc_j5();
  inline void set_has_r_acc_j6();
  inline void clear_has_r_acc_j6();
  inline void set_has_r_eff_j0();
  inline void clear_has_r_eff_j0();
  inline void set_has_r_eff_j1();
  inline void clear_has_r_eff_j1();
  inline void set_has_r_eff_j2();
  inline void clear_has_r_eff_j2();
  inline void set_has_r_eff_j3();
  inline void clear_has_r_eff_j3();
  inline void set_has_r_eff_j4();
  inline void clear_has_r_eff_j4();
  inline void set_has_r_eff_j5();
  inline void clear_has_r_eff_j5();
  inline void set_has_r_eff_j6();
  inline void clear_has_r_eff_j6();
  inline void set_has_l_limit_0();
  inline void clear_has_l_limit_0();
  inline void set_has_l_limit_1();
  inline void clear_has_l_limit_1();
  inline void set_has_l_limit_2();
  inline void clear_has_l_limit_2();
  inline void set_has_l_limit_3();
  inline void clear_has_l_limit_3();
  inline void set_has_l_limit_4();
  inline void clear_has_l_limit_4();
  inline void set_has_l_limit_5();
  inline void clear_has_l_limit_5();
  inline void set_has_l_limit_6();
  inline void clear_has_l_limit_6();
  inline void set_has_u_limit_0();
  inline void clear_has_u_limit_0();
  inline void set_has_u_limit_1();
  inline void clear_has_u_limit_1();
  inline void set_has_u_limit_2();
  inline void clear_has_u_limit_2();
  inline void set_has_u_limit_3();
  inline void clear_has_u_limit_3();
  inline void set_has_u_limit_4();
  inline void clear_has_u_limit_4();
  inline void set_has_u_limit_5();
  inline void clear_has_u_limit_5();
  inline void set_has_u_limit_6();
  inline void clear_has_u_limit_6();
  inline void set_has_kappa();
  inline void clear_has_kappa();
  inline void set_has_kv();
  inline void clear_has_kv();
  inline void set_has_lambda();
  inline void clear_has_lambda();
  inline void set_has_kz();
  inline void clear_has_kz();
  inline void set_has_zb();
  inline void clear_has_zb();
  inline void set_has_f();
  inline void clear_has_f();
  inline void set_has_g();
  inline void clear_has_g();
  inline void set_has_inparams();
  inline void clear_has_inparams();
  inline void set_has_outparams();
  inline void clear_has_outparams();
  inline void set_has_hiddennodes();
  inline void clear_has_hiddennodes();
  inline void set_has_errorparams();
  inline void clear_has_errorparams();
  inline void set_has_feedforwardforce();
  inline void clear_has_feedforwardforce();
  inline void set_has_nn_on();
  inline void clear_has_nn_on();
  inline void set_has_cartpos_kp_x();
  inline void clear_has_cartpos_kp_x();
  inline void set_has_cartpos_kp_y();
  inline void clear_has_cartpos_kp_y();
  inline void set_has_cartpos_kp_z();
  inline void clear_has_cartpos_kp_z();
  inline void set_has_cartpos_kd_x();
  inline void clear_has_cartpos_kd_x();
  inline void set_has_cartpos_kd_y();
  inline void clear_has_cartpos_kd_y();
  inline void set_has_cartpos_kd_z();
  inline void clear_has_cartpos_kd_z();
  inline void set_has_cartrot_kp_x();
  inline void clear_has_cartrot_kp_x();
  inline void set_has_cartrot_kp_y();
  inline void clear_has_cartrot_kp_y();
  inline void set_has_cartrot_kp_z();
  inline void clear_has_cartrot_kp_z();
  inline void set_has_cartrot_kd_x();
  inline void clear_has_cartrot_kd_x();
  inline void set_has_cartrot_kd_y();
  inline void clear_has_cartrot_kd_y();
  inline void set_has_cartrot_kd_z();
  inline void clear_has_cartrot_kd_z();
  inline void set_has_usecurrentcartpose();
  inline void clear_has_usecurrentcartpose();
  inline void set_has_usenullspacepose();
  inline void clear_has_usenullspacepose();
  inline void set_has_cartinix();
  inline void clear_has_cartinix();
  inline void set_has_cartiniy();
  inline void clear_has_cartiniy();
  inline void set_has_cartiniz();
  inline void clear_has_cartiniz();
  inline void set_has_cartiniroll();
  inline void clear_has_cartiniroll();
  inline void set_has_cartinipitch();
  inline void clear_has_cartinipitch();
  inline void set_has_cartiniyaw();
  inline void clear_has_cartiniyaw();
  inline void set_has_cartdesx();
  inline void clear_has_cartdesx();
  inline void set_has_cartdesy();
  inline void clear_has_cartdesy();
  inline void set_has_cartdesz();
  inline void clear_has_cartdesz();
  inline void set_has_cartdesroll();
  inline void clear_has_cartdesroll();
  inline void set_has_cartdespitch();
  inline void clear_has_cartdespitch();
  inline void set_has_cartdesyaw();
  inline void clear_has_cartdesyaw();
  inline void set_has_m();
  inline void clear_has_m();
  inline void set_has_d();
  inline void clear_has_d();
  inline void set_has_k();
  inline void clear_has_k();
  inline void set_has_task_ma();
  inline void clear_has_task_ma();
  inline void set_has_task_mb();
  inline void clear_has_task_mb();
  inline void set_has_fixedfilterweights();
  inline void clear_has_fixedfilterweights();
  inline void set_has_w0();
  inline void clear_has_w0();
  inline void set_has_w1();
  inline void clear_has_w1();
  inline void set_has_w2();
  inline void clear_has_w2();
  inline void set_has_w3();
  inline void clear_has_w3();
  inline void set_has_w4();
  inline void clear_has_w4();
  inline void set_has_w5();
  inline void clear_has_w5();
  inline void set_has_w6();
  inline void clear_has_w6();
  inline void set_has_w7();
  inline void clear_has_w7();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double dt_;
  double force_x_;
  double force_y_;
  double force_z_;
  double torque_x_;
  double torque_y_;
  double torque_z_;
  double acc_x_;
  double acc_y_;
  double acc_z_;
  double r_eff_x_;
  double r_eff_y_;
  double r_eff_z_;
  double r_trq_x_;
  double r_trq_y_;
  double r_trq_z_;
  double reference_eff_j0_;
  double reference_eff_j1_;
  double reference_eff_j2_;
  double reference_eff_j3_;
  double reference_eff_j4_;
  double reference_eff_j5_;
  double reference_eff_j6_;
  double taskref_x_;
  double taskref_y_;
  double taskref_z_;
  double taskref_phi_;
  double taskref_theta_;
  double taskref_psi_;
  double taskrefmodel_x_;
  double taskrefmodel_y_;
  double taskrefmodel_z_;
  double taskrefmodel_phi_;
  double taskrefmodel_theta_;
  double taskrefmodel_psi_;
  double m_cartpos_x_;
  double m_cartpos_y_;
  double m_cartpos_z_;
  double m_cartpos_qx_;
  double m_cartpos_qy_;
  double m_cartpos_qz_;
  double m_cartpos_qw_;
  double m_pos_x_;
  double m_pos_y_;
  double m_pos_z_;
  double m_vel_x_;
  double m_vel_y_;
  double m_vel_z_;
  double m_acc_x_;
  double m_acc_y_;
  double m_acc_z_;
  double m_pos_j0_;
  double m_pos_j1_;
  double m_pos_j2_;
  double m_pos_j3_;
  double m_pos_j4_;
  double m_pos_j5_;
  double m_pos_j6_;
  double m_vel_j0_;
  double m_vel_j1_;
  double m_vel_j2_;
  double m_vel_j3_;
  double m_vel_j4_;
  double m_vel_j5_;
  double m_vel_j6_;
  double m_acc_j0_;
  double m_acc_j1_;
  double m_acc_j2_;
  double m_acc_j3_;
  double m_acc_j4_;
  double m_acc_j5_;
  double m_acc_j6_;
  double m_eff_j0_;
  double m_eff_j1_;
  double m_eff_j2_;
  double m_eff_j3_;
  double m_eff_j4_;
  double m_eff_j5_;
  double m_eff_j6_;
  double control_eff_j0_;
  double control_eff_j1_;
  double control_eff_j2_;
  double control_eff_j3_;
  double control_eff_j4_;
  double control_eff_j5_;
  double control_eff_j6_;
  double r_cartpos_x_;
  double r_cartpos_y_;
  double r_cartpos_z_;
  double r_cartpos_qx_;
  double r_cartpos_qy_;
  double r_cartpos_qz_;
  double r_cartpos_qw_;
  double r_pos_j0_;
  double r_pos_j1_;
  double r_pos_j2_;
  double r_pos_j3_;
  double r_pos_j4_;
  double r_pos_j5_;
  double r_pos_j6_;
  double r_vel_j0_;
  double r_vel_j1_;
  double r_vel_j2_;
  double r_vel_j3_;
  double r_vel_j4_;
  double r_vel_j5_;
  double r_vel_j6_;
  double r_acc_j0_;
  double r_acc_j1_;
  double r_acc_j2_;
  double r_acc_j3_;
  double r_acc_j4_;
  double r_acc_j5_;
  double r_acc_j6_;
  double r_eff_j0_;
  double r_eff_j1_;
  double r_eff_j2_;
  double r_eff_j3_;
  double r_eff_j4_;
  double r_eff_j5_;
  double r_eff_j6_;
  double l_limit_0_;
  double l_limit_1_;
  double l_limit_2_;
  double l_limit_3_;
  double l_limit_4_;
  double l_limit_5_;
  double l_limit_6_;
  double u_limit_0_;
  double u_limit_1_;
  double u_limit_2_;
  double u_limit_3_;
  double u_limit_4_;
  double u_limit_5_;
  double u_limit_6_;
  double kappa_;
  double kv_;
  double lambda_;
  double kz_;
  double zb_;
  double f_;
  double g_;
  ::google::protobuf::int64 inparams_;
  ::google::protobuf::int64 outparams_;
  ::google::protobuf::int64 hiddennodes_;
  ::google::protobuf::int64 errorparams_;
  double feedforwardforce_;
  double nn_on_;
  double cartpos_kp_x_;
  double cartpos_kp_y_;
  double cartpos_kp_z_;
  double cartpos_kd_x_;
  double cartpos_kd_y_;
  double cartpos_kd_z_;
  double cartrot_kp_x_;
  double cartrot_kp_y_;
  double cartrot_kp_z_;
  double cartrot_kd_x_;
  double cartrot_kd_y_;
  double cartrot_kd_z_;
  double cartinix_;
  double cartiniy_;
  double cartiniz_;
  double cartiniroll_;
  double cartinipitch_;
  double cartiniyaw_;
  double cartdesx_;
  double cartdesy_;
  double cartdesz_;
  double cartdesroll_;
  double cartdespitch_;
  double cartdesyaw_;
  double m_;
  double d_;
  double k_;
  double task_ma_;
  double task_mb_;
  double fixedfilterweights_;
  double w0_;
  double w1_;
  double w2_;
  double w3_;
  double w4_;
  double w5_;
  double w6_;
  double w7_;
  bool usecurrentcartpose_;
  bool usenullspacepose_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(188 + 31) / 32];

  friend void  protobuf_AddDesc_controllerFullData_2eproto();
  friend void protobuf_AssignDesc_controllerFullData_2eproto();
  friend void protobuf_ShutdownFile_controllerFullData_2eproto();

  void InitAsDefaultInstance();
  static Datum* default_instance_;
};
// -------------------------------------------------------------------

class controllerFullData : public ::google::protobuf::Message {
 public:
  controllerFullData();
  virtual ~controllerFullData();

  controllerFullData(const controllerFullData& from);

  inline controllerFullData& operator=(const controllerFullData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const controllerFullData& default_instance();

  void Swap(controllerFullData* other);

  // implements Message ----------------------------------------------

  controllerFullData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const controllerFullData& from);
  void MergeFrom(const controllerFullData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dataPoint.Datum datum = 1;
  inline int datum_size() const;
  inline void clear_datum();
  static const int kDatumFieldNumber = 1;
  inline const ::dataPoint::Datum& datum(int index) const;
  inline ::dataPoint::Datum* mutable_datum(int index);
  inline ::dataPoint::Datum* add_datum();
  inline const ::google::protobuf::RepeatedPtrField< ::dataPoint::Datum >&
      datum() const;
  inline ::google::protobuf::RepeatedPtrField< ::dataPoint::Datum >*
      mutable_datum();

  // @@protoc_insertion_point(class_scope:dataPoint.controllerFullData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::dataPoint::Datum > datum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_controllerFullData_2eproto();
  friend void protobuf_AssignDesc_controllerFullData_2eproto();
  friend void protobuf_ShutdownFile_controllerFullData_2eproto();

  void InitAsDefaultInstance();
  static controllerFullData* default_instance_;
};
// ===================================================================


// ===================================================================

// Datum

// optional double dt = 1;
inline bool Datum::has_dt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Datum::set_has_dt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Datum::clear_has_dt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Datum::clear_dt() {
  dt_ = 0;
  clear_has_dt();
}
inline double Datum::dt() const {
  return dt_;
}
inline void Datum::set_dt(double value) {
  set_has_dt();
  dt_ = value;
}

// optional double force_x = 2;
inline bool Datum::has_force_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Datum::set_has_force_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Datum::clear_has_force_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Datum::clear_force_x() {
  force_x_ = 0;
  clear_has_force_x();
}
inline double Datum::force_x() const {
  return force_x_;
}
inline void Datum::set_force_x(double value) {
  set_has_force_x();
  force_x_ = value;
}

// optional double force_y = 3;
inline bool Datum::has_force_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Datum::set_has_force_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Datum::clear_has_force_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Datum::clear_force_y() {
  force_y_ = 0;
  clear_has_force_y();
}
inline double Datum::force_y() const {
  return force_y_;
}
inline void Datum::set_force_y(double value) {
  set_has_force_y();
  force_y_ = value;
}

// optional double force_z = 4;
inline bool Datum::has_force_z() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Datum::set_has_force_z() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Datum::clear_has_force_z() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Datum::clear_force_z() {
  force_z_ = 0;
  clear_has_force_z();
}
inline double Datum::force_z() const {
  return force_z_;
}
inline void Datum::set_force_z(double value) {
  set_has_force_z();
  force_z_ = value;
}

// optional double torque_x = 5;
inline bool Datum::has_torque_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Datum::set_has_torque_x() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Datum::clear_has_torque_x() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Datum::clear_torque_x() {
  torque_x_ = 0;
  clear_has_torque_x();
}
inline double Datum::torque_x() const {
  return torque_x_;
}
inline void Datum::set_torque_x(double value) {
  set_has_torque_x();
  torque_x_ = value;
}

// optional double torque_y = 6;
inline bool Datum::has_torque_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Datum::set_has_torque_y() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Datum::clear_has_torque_y() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Datum::clear_torque_y() {
  torque_y_ = 0;
  clear_has_torque_y();
}
inline double Datum::torque_y() const {
  return torque_y_;
}
inline void Datum::set_torque_y(double value) {
  set_has_torque_y();
  torque_y_ = value;
}

// optional double torque_z = 7;
inline bool Datum::has_torque_z() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Datum::set_has_torque_z() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Datum::clear_has_torque_z() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Datum::clear_torque_z() {
  torque_z_ = 0;
  clear_has_torque_z();
}
inline double Datum::torque_z() const {
  return torque_z_;
}
inline void Datum::set_torque_z(double value) {
  set_has_torque_z();
  torque_z_ = value;
}

// optional double acc_x = 8;
inline bool Datum::has_acc_x() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Datum::set_has_acc_x() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Datum::clear_has_acc_x() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Datum::clear_acc_x() {
  acc_x_ = 0;
  clear_has_acc_x();
}
inline double Datum::acc_x() const {
  return acc_x_;
}
inline void Datum::set_acc_x(double value) {
  set_has_acc_x();
  acc_x_ = value;
}

// optional double acc_y = 9;
inline bool Datum::has_acc_y() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Datum::set_has_acc_y() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Datum::clear_has_acc_y() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Datum::clear_acc_y() {
  acc_y_ = 0;
  clear_has_acc_y();
}
inline double Datum::acc_y() const {
  return acc_y_;
}
inline void Datum::set_acc_y(double value) {
  set_has_acc_y();
  acc_y_ = value;
}

// optional double acc_z = 10;
inline bool Datum::has_acc_z() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Datum::set_has_acc_z() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Datum::clear_has_acc_z() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Datum::clear_acc_z() {
  acc_z_ = 0;
  clear_has_acc_z();
}
inline double Datum::acc_z() const {
  return acc_z_;
}
inline void Datum::set_acc_z(double value) {
  set_has_acc_z();
  acc_z_ = value;
}

// optional double r_eff_x = 11;
inline bool Datum::has_r_eff_x() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Datum::set_has_r_eff_x() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Datum::clear_has_r_eff_x() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Datum::clear_r_eff_x() {
  r_eff_x_ = 0;
  clear_has_r_eff_x();
}
inline double Datum::r_eff_x() const {
  return r_eff_x_;
}
inline void Datum::set_r_eff_x(double value) {
  set_has_r_eff_x();
  r_eff_x_ = value;
}

// optional double r_eff_y = 12;
inline bool Datum::has_r_eff_y() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Datum::set_has_r_eff_y() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Datum::clear_has_r_eff_y() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Datum::clear_r_eff_y() {
  r_eff_y_ = 0;
  clear_has_r_eff_y();
}
inline double Datum::r_eff_y() const {
  return r_eff_y_;
}
inline void Datum::set_r_eff_y(double value) {
  set_has_r_eff_y();
  r_eff_y_ = value;
}

// optional double r_eff_z = 13;
inline bool Datum::has_r_eff_z() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Datum::set_has_r_eff_z() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Datum::clear_has_r_eff_z() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Datum::clear_r_eff_z() {
  r_eff_z_ = 0;
  clear_has_r_eff_z();
}
inline double Datum::r_eff_z() const {
  return r_eff_z_;
}
inline void Datum::set_r_eff_z(double value) {
  set_has_r_eff_z();
  r_eff_z_ = value;
}

// optional double r_trq_x = 14;
inline bool Datum::has_r_trq_x() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Datum::set_has_r_trq_x() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Datum::clear_has_r_trq_x() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Datum::clear_r_trq_x() {
  r_trq_x_ = 0;
  clear_has_r_trq_x();
}
inline double Datum::r_trq_x() const {
  return r_trq_x_;
}
inline void Datum::set_r_trq_x(double value) {
  set_has_r_trq_x();
  r_trq_x_ = value;
}

// optional double r_trq_y = 15;
inline bool Datum::has_r_trq_y() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Datum::set_has_r_trq_y() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Datum::clear_has_r_trq_y() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Datum::clear_r_trq_y() {
  r_trq_y_ = 0;
  clear_has_r_trq_y();
}
inline double Datum::r_trq_y() const {
  return r_trq_y_;
}
inline void Datum::set_r_trq_y(double value) {
  set_has_r_trq_y();
  r_trq_y_ = value;
}

// optional double r_trq_z = 16;
inline bool Datum::has_r_trq_z() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Datum::set_has_r_trq_z() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Datum::clear_has_r_trq_z() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Datum::clear_r_trq_z() {
  r_trq_z_ = 0;
  clear_has_r_trq_z();
}
inline double Datum::r_trq_z() const {
  return r_trq_z_;
}
inline void Datum::set_r_trq_z(double value) {
  set_has_r_trq_z();
  r_trq_z_ = value;
}

// optional double reference_eff_j0 = 17;
inline bool Datum::has_reference_eff_j0() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Datum::set_has_reference_eff_j0() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Datum::clear_has_reference_eff_j0() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Datum::clear_reference_eff_j0() {
  reference_eff_j0_ = 0;
  clear_has_reference_eff_j0();
}
inline double Datum::reference_eff_j0() const {
  return reference_eff_j0_;
}
inline void Datum::set_reference_eff_j0(double value) {
  set_has_reference_eff_j0();
  reference_eff_j0_ = value;
}

// optional double reference_eff_j1 = 18;
inline bool Datum::has_reference_eff_j1() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Datum::set_has_reference_eff_j1() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Datum::clear_has_reference_eff_j1() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Datum::clear_reference_eff_j1() {
  reference_eff_j1_ = 0;
  clear_has_reference_eff_j1();
}
inline double Datum::reference_eff_j1() const {
  return reference_eff_j1_;
}
inline void Datum::set_reference_eff_j1(double value) {
  set_has_reference_eff_j1();
  reference_eff_j1_ = value;
}

// optional double reference_eff_j2 = 19;
inline bool Datum::has_reference_eff_j2() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Datum::set_has_reference_eff_j2() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Datum::clear_has_reference_eff_j2() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Datum::clear_reference_eff_j2() {
  reference_eff_j2_ = 0;
  clear_has_reference_eff_j2();
}
inline double Datum::reference_eff_j2() const {
  return reference_eff_j2_;
}
inline void Datum::set_reference_eff_j2(double value) {
  set_has_reference_eff_j2();
  reference_eff_j2_ = value;
}

// optional double reference_eff_j3 = 20;
inline bool Datum::has_reference_eff_j3() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Datum::set_has_reference_eff_j3() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Datum::clear_has_reference_eff_j3() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Datum::clear_reference_eff_j3() {
  reference_eff_j3_ = 0;
  clear_has_reference_eff_j3();
}
inline double Datum::reference_eff_j3() const {
  return reference_eff_j3_;
}
inline void Datum::set_reference_eff_j3(double value) {
  set_has_reference_eff_j3();
  reference_eff_j3_ = value;
}

// optional double reference_eff_j4 = 21;
inline bool Datum::has_reference_eff_j4() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Datum::set_has_reference_eff_j4() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Datum::clear_has_reference_eff_j4() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Datum::clear_reference_eff_j4() {
  reference_eff_j4_ = 0;
  clear_has_reference_eff_j4();
}
inline double Datum::reference_eff_j4() const {
  return reference_eff_j4_;
}
inline void Datum::set_reference_eff_j4(double value) {
  set_has_reference_eff_j4();
  reference_eff_j4_ = value;
}

// optional double reference_eff_j5 = 22;
inline bool Datum::has_reference_eff_j5() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Datum::set_has_reference_eff_j5() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Datum::clear_has_reference_eff_j5() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Datum::clear_reference_eff_j5() {
  reference_eff_j5_ = 0;
  clear_has_reference_eff_j5();
}
inline double Datum::reference_eff_j5() const {
  return reference_eff_j5_;
}
inline void Datum::set_reference_eff_j5(double value) {
  set_has_reference_eff_j5();
  reference_eff_j5_ = value;
}

// optional double reference_eff_j6 = 23;
inline bool Datum::has_reference_eff_j6() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Datum::set_has_reference_eff_j6() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Datum::clear_has_reference_eff_j6() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Datum::clear_reference_eff_j6() {
  reference_eff_j6_ = 0;
  clear_has_reference_eff_j6();
}
inline double Datum::reference_eff_j6() const {
  return reference_eff_j6_;
}
inline void Datum::set_reference_eff_j6(double value) {
  set_has_reference_eff_j6();
  reference_eff_j6_ = value;
}

// optional double taskRef_x = 24;
inline bool Datum::has_taskref_x() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Datum::set_has_taskref_x() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Datum::clear_has_taskref_x() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Datum::clear_taskref_x() {
  taskref_x_ = 0;
  clear_has_taskref_x();
}
inline double Datum::taskref_x() const {
  return taskref_x_;
}
inline void Datum::set_taskref_x(double value) {
  set_has_taskref_x();
  taskref_x_ = value;
}

// optional double taskRef_y = 25;
inline bool Datum::has_taskref_y() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Datum::set_has_taskref_y() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Datum::clear_has_taskref_y() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Datum::clear_taskref_y() {
  taskref_y_ = 0;
  clear_has_taskref_y();
}
inline double Datum::taskref_y() const {
  return taskref_y_;
}
inline void Datum::set_taskref_y(double value) {
  set_has_taskref_y();
  taskref_y_ = value;
}

// optional double taskRef_z = 26;
inline bool Datum::has_taskref_z() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Datum::set_has_taskref_z() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Datum::clear_has_taskref_z() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Datum::clear_taskref_z() {
  taskref_z_ = 0;
  clear_has_taskref_z();
}
inline double Datum::taskref_z() const {
  return taskref_z_;
}
inline void Datum::set_taskref_z(double value) {
  set_has_taskref_z();
  taskref_z_ = value;
}

// optional double taskRef_phi = 27;
inline bool Datum::has_taskref_phi() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void Datum::set_has_taskref_phi() {
  _has_bits_[0] |= 0x04000000u;
}
inline void Datum::clear_has_taskref_phi() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void Datum::clear_taskref_phi() {
  taskref_phi_ = 0;
  clear_has_taskref_phi();
}
inline double Datum::taskref_phi() const {
  return taskref_phi_;
}
inline void Datum::set_taskref_phi(double value) {
  set_has_taskref_phi();
  taskref_phi_ = value;
}

// optional double taskRef_theta = 28;
inline bool Datum::has_taskref_theta() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void Datum::set_has_taskref_theta() {
  _has_bits_[0] |= 0x08000000u;
}
inline void Datum::clear_has_taskref_theta() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void Datum::clear_taskref_theta() {
  taskref_theta_ = 0;
  clear_has_taskref_theta();
}
inline double Datum::taskref_theta() const {
  return taskref_theta_;
}
inline void Datum::set_taskref_theta(double value) {
  set_has_taskref_theta();
  taskref_theta_ = value;
}

// optional double taskRef_psi = 29;
inline bool Datum::has_taskref_psi() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void Datum::set_has_taskref_psi() {
  _has_bits_[0] |= 0x10000000u;
}
inline void Datum::clear_has_taskref_psi() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void Datum::clear_taskref_psi() {
  taskref_psi_ = 0;
  clear_has_taskref_psi();
}
inline double Datum::taskref_psi() const {
  return taskref_psi_;
}
inline void Datum::set_taskref_psi(double value) {
  set_has_taskref_psi();
  taskref_psi_ = value;
}

// optional double taskRefModel_x = 30;
inline bool Datum::has_taskrefmodel_x() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void Datum::set_has_taskrefmodel_x() {
  _has_bits_[0] |= 0x20000000u;
}
inline void Datum::clear_has_taskrefmodel_x() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void Datum::clear_taskrefmodel_x() {
  taskrefmodel_x_ = 0;
  clear_has_taskrefmodel_x();
}
inline double Datum::taskrefmodel_x() const {
  return taskrefmodel_x_;
}
inline void Datum::set_taskrefmodel_x(double value) {
  set_has_taskrefmodel_x();
  taskrefmodel_x_ = value;
}

// optional double taskRefModel_y = 31;
inline bool Datum::has_taskrefmodel_y() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void Datum::set_has_taskrefmodel_y() {
  _has_bits_[0] |= 0x40000000u;
}
inline void Datum::clear_has_taskrefmodel_y() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void Datum::clear_taskrefmodel_y() {
  taskrefmodel_y_ = 0;
  clear_has_taskrefmodel_y();
}
inline double Datum::taskrefmodel_y() const {
  return taskrefmodel_y_;
}
inline void Datum::set_taskrefmodel_y(double value) {
  set_has_taskrefmodel_y();
  taskrefmodel_y_ = value;
}

// optional double taskRefModel_z = 32;
inline bool Datum::has_taskrefmodel_z() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void Datum::set_has_taskrefmodel_z() {
  _has_bits_[0] |= 0x80000000u;
}
inline void Datum::clear_has_taskrefmodel_z() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void Datum::clear_taskrefmodel_z() {
  taskrefmodel_z_ = 0;
  clear_has_taskrefmodel_z();
}
inline double Datum::taskrefmodel_z() const {
  return taskrefmodel_z_;
}
inline void Datum::set_taskrefmodel_z(double value) {
  set_has_taskrefmodel_z();
  taskrefmodel_z_ = value;
}

// optional double taskRefModel_phi = 33;
inline bool Datum::has_taskrefmodel_phi() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void Datum::set_has_taskrefmodel_phi() {
  _has_bits_[1] |= 0x00000001u;
}
inline void Datum::clear_has_taskrefmodel_phi() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void Datum::clear_taskrefmodel_phi() {
  taskrefmodel_phi_ = 0;
  clear_has_taskrefmodel_phi();
}
inline double Datum::taskrefmodel_phi() const {
  return taskrefmodel_phi_;
}
inline void Datum::set_taskrefmodel_phi(double value) {
  set_has_taskrefmodel_phi();
  taskrefmodel_phi_ = value;
}

// optional double taskRefModel_theta = 34;
inline bool Datum::has_taskrefmodel_theta() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void Datum::set_has_taskrefmodel_theta() {
  _has_bits_[1] |= 0x00000002u;
}
inline void Datum::clear_has_taskrefmodel_theta() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void Datum::clear_taskrefmodel_theta() {
  taskrefmodel_theta_ = 0;
  clear_has_taskrefmodel_theta();
}
inline double Datum::taskrefmodel_theta() const {
  return taskrefmodel_theta_;
}
inline void Datum::set_taskrefmodel_theta(double value) {
  set_has_taskrefmodel_theta();
  taskrefmodel_theta_ = value;
}

// optional double taskRefModel_psi = 35;
inline bool Datum::has_taskrefmodel_psi() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void Datum::set_has_taskrefmodel_psi() {
  _has_bits_[1] |= 0x00000004u;
}
inline void Datum::clear_has_taskrefmodel_psi() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void Datum::clear_taskrefmodel_psi() {
  taskrefmodel_psi_ = 0;
  clear_has_taskrefmodel_psi();
}
inline double Datum::taskrefmodel_psi() const {
  return taskrefmodel_psi_;
}
inline void Datum::set_taskrefmodel_psi(double value) {
  set_has_taskrefmodel_psi();
  taskrefmodel_psi_ = value;
}

// optional double m_cartPos_x = 36;
inline bool Datum::has_m_cartpos_x() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void Datum::set_has_m_cartpos_x() {
  _has_bits_[1] |= 0x00000008u;
}
inline void Datum::clear_has_m_cartpos_x() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void Datum::clear_m_cartpos_x() {
  m_cartpos_x_ = 0;
  clear_has_m_cartpos_x();
}
inline double Datum::m_cartpos_x() const {
  return m_cartpos_x_;
}
inline void Datum::set_m_cartpos_x(double value) {
  set_has_m_cartpos_x();
  m_cartpos_x_ = value;
}

// optional double m_cartPos_y = 37;
inline bool Datum::has_m_cartpos_y() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void Datum::set_has_m_cartpos_y() {
  _has_bits_[1] |= 0x00000010u;
}
inline void Datum::clear_has_m_cartpos_y() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void Datum::clear_m_cartpos_y() {
  m_cartpos_y_ = 0;
  clear_has_m_cartpos_y();
}
inline double Datum::m_cartpos_y() const {
  return m_cartpos_y_;
}
inline void Datum::set_m_cartpos_y(double value) {
  set_has_m_cartpos_y();
  m_cartpos_y_ = value;
}

// optional double m_cartPos_z = 38;
inline bool Datum::has_m_cartpos_z() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void Datum::set_has_m_cartpos_z() {
  _has_bits_[1] |= 0x00000020u;
}
inline void Datum::clear_has_m_cartpos_z() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void Datum::clear_m_cartpos_z() {
  m_cartpos_z_ = 0;
  clear_has_m_cartpos_z();
}
inline double Datum::m_cartpos_z() const {
  return m_cartpos_z_;
}
inline void Datum::set_m_cartpos_z(double value) {
  set_has_m_cartpos_z();
  m_cartpos_z_ = value;
}

// optional double m_cartPos_Qx = 39;
inline bool Datum::has_m_cartpos_qx() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void Datum::set_has_m_cartpos_qx() {
  _has_bits_[1] |= 0x00000040u;
}
inline void Datum::clear_has_m_cartpos_qx() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void Datum::clear_m_cartpos_qx() {
  m_cartpos_qx_ = 0;
  clear_has_m_cartpos_qx();
}
inline double Datum::m_cartpos_qx() const {
  return m_cartpos_qx_;
}
inline void Datum::set_m_cartpos_qx(double value) {
  set_has_m_cartpos_qx();
  m_cartpos_qx_ = value;
}

// optional double m_cartPos_Qy = 40;
inline bool Datum::has_m_cartpos_qy() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void Datum::set_has_m_cartpos_qy() {
  _has_bits_[1] |= 0x00000080u;
}
inline void Datum::clear_has_m_cartpos_qy() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void Datum::clear_m_cartpos_qy() {
  m_cartpos_qy_ = 0;
  clear_has_m_cartpos_qy();
}
inline double Datum::m_cartpos_qy() const {
  return m_cartpos_qy_;
}
inline void Datum::set_m_cartpos_qy(double value) {
  set_has_m_cartpos_qy();
  m_cartpos_qy_ = value;
}

// optional double m_cartPos_Qz = 41;
inline bool Datum::has_m_cartpos_qz() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void Datum::set_has_m_cartpos_qz() {
  _has_bits_[1] |= 0x00000100u;
}
inline void Datum::clear_has_m_cartpos_qz() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void Datum::clear_m_cartpos_qz() {
  m_cartpos_qz_ = 0;
  clear_has_m_cartpos_qz();
}
inline double Datum::m_cartpos_qz() const {
  return m_cartpos_qz_;
}
inline void Datum::set_m_cartpos_qz(double value) {
  set_has_m_cartpos_qz();
  m_cartpos_qz_ = value;
}

// optional double m_cartPos_QW = 42;
inline bool Datum::has_m_cartpos_qw() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void Datum::set_has_m_cartpos_qw() {
  _has_bits_[1] |= 0x00000200u;
}
inline void Datum::clear_has_m_cartpos_qw() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void Datum::clear_m_cartpos_qw() {
  m_cartpos_qw_ = 0;
  clear_has_m_cartpos_qw();
}
inline double Datum::m_cartpos_qw() const {
  return m_cartpos_qw_;
}
inline void Datum::set_m_cartpos_qw(double value) {
  set_has_m_cartpos_qw();
  m_cartpos_qw_ = value;
}

// optional double m_pos_x = 43;
inline bool Datum::has_m_pos_x() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void Datum::set_has_m_pos_x() {
  _has_bits_[1] |= 0x00000400u;
}
inline void Datum::clear_has_m_pos_x() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void Datum::clear_m_pos_x() {
  m_pos_x_ = 0;
  clear_has_m_pos_x();
}
inline double Datum::m_pos_x() const {
  return m_pos_x_;
}
inline void Datum::set_m_pos_x(double value) {
  set_has_m_pos_x();
  m_pos_x_ = value;
}

// optional double m_pos_y = 44;
inline bool Datum::has_m_pos_y() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void Datum::set_has_m_pos_y() {
  _has_bits_[1] |= 0x00000800u;
}
inline void Datum::clear_has_m_pos_y() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void Datum::clear_m_pos_y() {
  m_pos_y_ = 0;
  clear_has_m_pos_y();
}
inline double Datum::m_pos_y() const {
  return m_pos_y_;
}
inline void Datum::set_m_pos_y(double value) {
  set_has_m_pos_y();
  m_pos_y_ = value;
}

// optional double m_pos_z = 45;
inline bool Datum::has_m_pos_z() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void Datum::set_has_m_pos_z() {
  _has_bits_[1] |= 0x00001000u;
}
inline void Datum::clear_has_m_pos_z() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void Datum::clear_m_pos_z() {
  m_pos_z_ = 0;
  clear_has_m_pos_z();
}
inline double Datum::m_pos_z() const {
  return m_pos_z_;
}
inline void Datum::set_m_pos_z(double value) {
  set_has_m_pos_z();
  m_pos_z_ = value;
}

// optional double m_vel_x = 46;
inline bool Datum::has_m_vel_x() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void Datum::set_has_m_vel_x() {
  _has_bits_[1] |= 0x00002000u;
}
inline void Datum::clear_has_m_vel_x() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void Datum::clear_m_vel_x() {
  m_vel_x_ = 0;
  clear_has_m_vel_x();
}
inline double Datum::m_vel_x() const {
  return m_vel_x_;
}
inline void Datum::set_m_vel_x(double value) {
  set_has_m_vel_x();
  m_vel_x_ = value;
}

// optional double m_vel_y = 47;
inline bool Datum::has_m_vel_y() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void Datum::set_has_m_vel_y() {
  _has_bits_[1] |= 0x00004000u;
}
inline void Datum::clear_has_m_vel_y() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void Datum::clear_m_vel_y() {
  m_vel_y_ = 0;
  clear_has_m_vel_y();
}
inline double Datum::m_vel_y() const {
  return m_vel_y_;
}
inline void Datum::set_m_vel_y(double value) {
  set_has_m_vel_y();
  m_vel_y_ = value;
}

// optional double m_vel_z = 48;
inline bool Datum::has_m_vel_z() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void Datum::set_has_m_vel_z() {
  _has_bits_[1] |= 0x00008000u;
}
inline void Datum::clear_has_m_vel_z() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void Datum::clear_m_vel_z() {
  m_vel_z_ = 0;
  clear_has_m_vel_z();
}
inline double Datum::m_vel_z() const {
  return m_vel_z_;
}
inline void Datum::set_m_vel_z(double value) {
  set_has_m_vel_z();
  m_vel_z_ = value;
}

// optional double m_acc_x = 49;
inline bool Datum::has_m_acc_x() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void Datum::set_has_m_acc_x() {
  _has_bits_[1] |= 0x00010000u;
}
inline void Datum::clear_has_m_acc_x() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void Datum::clear_m_acc_x() {
  m_acc_x_ = 0;
  clear_has_m_acc_x();
}
inline double Datum::m_acc_x() const {
  return m_acc_x_;
}
inline void Datum::set_m_acc_x(double value) {
  set_has_m_acc_x();
  m_acc_x_ = value;
}

// optional double m_acc_y = 50;
inline bool Datum::has_m_acc_y() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void Datum::set_has_m_acc_y() {
  _has_bits_[1] |= 0x00020000u;
}
inline void Datum::clear_has_m_acc_y() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void Datum::clear_m_acc_y() {
  m_acc_y_ = 0;
  clear_has_m_acc_y();
}
inline double Datum::m_acc_y() const {
  return m_acc_y_;
}
inline void Datum::set_m_acc_y(double value) {
  set_has_m_acc_y();
  m_acc_y_ = value;
}

// optional double m_acc_z = 51;
inline bool Datum::has_m_acc_z() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void Datum::set_has_m_acc_z() {
  _has_bits_[1] |= 0x00040000u;
}
inline void Datum::clear_has_m_acc_z() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void Datum::clear_m_acc_z() {
  m_acc_z_ = 0;
  clear_has_m_acc_z();
}
inline double Datum::m_acc_z() const {
  return m_acc_z_;
}
inline void Datum::set_m_acc_z(double value) {
  set_has_m_acc_z();
  m_acc_z_ = value;
}

// optional double m_pos_j0 = 52;
inline bool Datum::has_m_pos_j0() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void Datum::set_has_m_pos_j0() {
  _has_bits_[1] |= 0x00080000u;
}
inline void Datum::clear_has_m_pos_j0() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void Datum::clear_m_pos_j0() {
  m_pos_j0_ = 0;
  clear_has_m_pos_j0();
}
inline double Datum::m_pos_j0() const {
  return m_pos_j0_;
}
inline void Datum::set_m_pos_j0(double value) {
  set_has_m_pos_j0();
  m_pos_j0_ = value;
}

// optional double m_pos_j1 = 53;
inline bool Datum::has_m_pos_j1() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void Datum::set_has_m_pos_j1() {
  _has_bits_[1] |= 0x00100000u;
}
inline void Datum::clear_has_m_pos_j1() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void Datum::clear_m_pos_j1() {
  m_pos_j1_ = 0;
  clear_has_m_pos_j1();
}
inline double Datum::m_pos_j1() const {
  return m_pos_j1_;
}
inline void Datum::set_m_pos_j1(double value) {
  set_has_m_pos_j1();
  m_pos_j1_ = value;
}

// optional double m_pos_j2 = 54;
inline bool Datum::has_m_pos_j2() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void Datum::set_has_m_pos_j2() {
  _has_bits_[1] |= 0x00200000u;
}
inline void Datum::clear_has_m_pos_j2() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void Datum::clear_m_pos_j2() {
  m_pos_j2_ = 0;
  clear_has_m_pos_j2();
}
inline double Datum::m_pos_j2() const {
  return m_pos_j2_;
}
inline void Datum::set_m_pos_j2(double value) {
  set_has_m_pos_j2();
  m_pos_j2_ = value;
}

// optional double m_pos_j3 = 55;
inline bool Datum::has_m_pos_j3() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void Datum::set_has_m_pos_j3() {
  _has_bits_[1] |= 0x00400000u;
}
inline void Datum::clear_has_m_pos_j3() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void Datum::clear_m_pos_j3() {
  m_pos_j3_ = 0;
  clear_has_m_pos_j3();
}
inline double Datum::m_pos_j3() const {
  return m_pos_j3_;
}
inline void Datum::set_m_pos_j3(double value) {
  set_has_m_pos_j3();
  m_pos_j3_ = value;
}

// optional double m_pos_j4 = 56;
inline bool Datum::has_m_pos_j4() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void Datum::set_has_m_pos_j4() {
  _has_bits_[1] |= 0x00800000u;
}
inline void Datum::clear_has_m_pos_j4() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void Datum::clear_m_pos_j4() {
  m_pos_j4_ = 0;
  clear_has_m_pos_j4();
}
inline double Datum::m_pos_j4() const {
  return m_pos_j4_;
}
inline void Datum::set_m_pos_j4(double value) {
  set_has_m_pos_j4();
  m_pos_j4_ = value;
}

// optional double m_pos_j5 = 57;
inline bool Datum::has_m_pos_j5() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void Datum::set_has_m_pos_j5() {
  _has_bits_[1] |= 0x01000000u;
}
inline void Datum::clear_has_m_pos_j5() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void Datum::clear_m_pos_j5() {
  m_pos_j5_ = 0;
  clear_has_m_pos_j5();
}
inline double Datum::m_pos_j5() const {
  return m_pos_j5_;
}
inline void Datum::set_m_pos_j5(double value) {
  set_has_m_pos_j5();
  m_pos_j5_ = value;
}

// optional double m_pos_j6 = 58;
inline bool Datum::has_m_pos_j6() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void Datum::set_has_m_pos_j6() {
  _has_bits_[1] |= 0x02000000u;
}
inline void Datum::clear_has_m_pos_j6() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void Datum::clear_m_pos_j6() {
  m_pos_j6_ = 0;
  clear_has_m_pos_j6();
}
inline double Datum::m_pos_j6() const {
  return m_pos_j6_;
}
inline void Datum::set_m_pos_j6(double value) {
  set_has_m_pos_j6();
  m_pos_j6_ = value;
}

// optional double m_vel_j0 = 59;
inline bool Datum::has_m_vel_j0() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void Datum::set_has_m_vel_j0() {
  _has_bits_[1] |= 0x04000000u;
}
inline void Datum::clear_has_m_vel_j0() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void Datum::clear_m_vel_j0() {
  m_vel_j0_ = 0;
  clear_has_m_vel_j0();
}
inline double Datum::m_vel_j0() const {
  return m_vel_j0_;
}
inline void Datum::set_m_vel_j0(double value) {
  set_has_m_vel_j0();
  m_vel_j0_ = value;
}

// optional double m_vel_j1 = 60;
inline bool Datum::has_m_vel_j1() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void Datum::set_has_m_vel_j1() {
  _has_bits_[1] |= 0x08000000u;
}
inline void Datum::clear_has_m_vel_j1() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void Datum::clear_m_vel_j1() {
  m_vel_j1_ = 0;
  clear_has_m_vel_j1();
}
inline double Datum::m_vel_j1() const {
  return m_vel_j1_;
}
inline void Datum::set_m_vel_j1(double value) {
  set_has_m_vel_j1();
  m_vel_j1_ = value;
}

// optional double m_vel_j2 = 61;
inline bool Datum::has_m_vel_j2() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void Datum::set_has_m_vel_j2() {
  _has_bits_[1] |= 0x10000000u;
}
inline void Datum::clear_has_m_vel_j2() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void Datum::clear_m_vel_j2() {
  m_vel_j2_ = 0;
  clear_has_m_vel_j2();
}
inline double Datum::m_vel_j2() const {
  return m_vel_j2_;
}
inline void Datum::set_m_vel_j2(double value) {
  set_has_m_vel_j2();
  m_vel_j2_ = value;
}

// optional double m_vel_j3 = 62;
inline bool Datum::has_m_vel_j3() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void Datum::set_has_m_vel_j3() {
  _has_bits_[1] |= 0x20000000u;
}
inline void Datum::clear_has_m_vel_j3() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void Datum::clear_m_vel_j3() {
  m_vel_j3_ = 0;
  clear_has_m_vel_j3();
}
inline double Datum::m_vel_j3() const {
  return m_vel_j3_;
}
inline void Datum::set_m_vel_j3(double value) {
  set_has_m_vel_j3();
  m_vel_j3_ = value;
}

// optional double m_vel_j4 = 63;
inline bool Datum::has_m_vel_j4() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void Datum::set_has_m_vel_j4() {
  _has_bits_[1] |= 0x40000000u;
}
inline void Datum::clear_has_m_vel_j4() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void Datum::clear_m_vel_j4() {
  m_vel_j4_ = 0;
  clear_has_m_vel_j4();
}
inline double Datum::m_vel_j4() const {
  return m_vel_j4_;
}
inline void Datum::set_m_vel_j4(double value) {
  set_has_m_vel_j4();
  m_vel_j4_ = value;
}

// optional double m_vel_j5 = 64;
inline bool Datum::has_m_vel_j5() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void Datum::set_has_m_vel_j5() {
  _has_bits_[1] |= 0x80000000u;
}
inline void Datum::clear_has_m_vel_j5() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void Datum::clear_m_vel_j5() {
  m_vel_j5_ = 0;
  clear_has_m_vel_j5();
}
inline double Datum::m_vel_j5() const {
  return m_vel_j5_;
}
inline void Datum::set_m_vel_j5(double value) {
  set_has_m_vel_j5();
  m_vel_j5_ = value;
}

// optional double m_vel_j6 = 65;
inline bool Datum::has_m_vel_j6() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void Datum::set_has_m_vel_j6() {
  _has_bits_[2] |= 0x00000001u;
}
inline void Datum::clear_has_m_vel_j6() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void Datum::clear_m_vel_j6() {
  m_vel_j6_ = 0;
  clear_has_m_vel_j6();
}
inline double Datum::m_vel_j6() const {
  return m_vel_j6_;
}
inline void Datum::set_m_vel_j6(double value) {
  set_has_m_vel_j6();
  m_vel_j6_ = value;
}

// optional double m_acc_j0 = 66;
inline bool Datum::has_m_acc_j0() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void Datum::set_has_m_acc_j0() {
  _has_bits_[2] |= 0x00000002u;
}
inline void Datum::clear_has_m_acc_j0() {
  _has_bits_[2] &= ~0x00000002u;
}
inline void Datum::clear_m_acc_j0() {
  m_acc_j0_ = 0;
  clear_has_m_acc_j0();
}
inline double Datum::m_acc_j0() const {
  return m_acc_j0_;
}
inline void Datum::set_m_acc_j0(double value) {
  set_has_m_acc_j0();
  m_acc_j0_ = value;
}

// optional double m_acc_j1 = 67;
inline bool Datum::has_m_acc_j1() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void Datum::set_has_m_acc_j1() {
  _has_bits_[2] |= 0x00000004u;
}
inline void Datum::clear_has_m_acc_j1() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void Datum::clear_m_acc_j1() {
  m_acc_j1_ = 0;
  clear_has_m_acc_j1();
}
inline double Datum::m_acc_j1() const {
  return m_acc_j1_;
}
inline void Datum::set_m_acc_j1(double value) {
  set_has_m_acc_j1();
  m_acc_j1_ = value;
}

// optional double m_acc_j2 = 68;
inline bool Datum::has_m_acc_j2() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void Datum::set_has_m_acc_j2() {
  _has_bits_[2] |= 0x00000008u;
}
inline void Datum::clear_has_m_acc_j2() {
  _has_bits_[2] &= ~0x00000008u;
}
inline void Datum::clear_m_acc_j2() {
  m_acc_j2_ = 0;
  clear_has_m_acc_j2();
}
inline double Datum::m_acc_j2() const {
  return m_acc_j2_;
}
inline void Datum::set_m_acc_j2(double value) {
  set_has_m_acc_j2();
  m_acc_j2_ = value;
}

// optional double m_acc_j3 = 69;
inline bool Datum::has_m_acc_j3() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void Datum::set_has_m_acc_j3() {
  _has_bits_[2] |= 0x00000010u;
}
inline void Datum::clear_has_m_acc_j3() {
  _has_bits_[2] &= ~0x00000010u;
}
inline void Datum::clear_m_acc_j3() {
  m_acc_j3_ = 0;
  clear_has_m_acc_j3();
}
inline double Datum::m_acc_j3() const {
  return m_acc_j3_;
}
inline void Datum::set_m_acc_j3(double value) {
  set_has_m_acc_j3();
  m_acc_j3_ = value;
}

// optional double m_acc_j4 = 70;
inline bool Datum::has_m_acc_j4() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void Datum::set_has_m_acc_j4() {
  _has_bits_[2] |= 0x00000020u;
}
inline void Datum::clear_has_m_acc_j4() {
  _has_bits_[2] &= ~0x00000020u;
}
inline void Datum::clear_m_acc_j4() {
  m_acc_j4_ = 0;
  clear_has_m_acc_j4();
}
inline double Datum::m_acc_j4() const {
  return m_acc_j4_;
}
inline void Datum::set_m_acc_j4(double value) {
  set_has_m_acc_j4();
  m_acc_j4_ = value;
}

// optional double m_acc_j5 = 71;
inline bool Datum::has_m_acc_j5() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
inline void Datum::set_has_m_acc_j5() {
  _has_bits_[2] |= 0x00000040u;
}
inline void Datum::clear_has_m_acc_j5() {
  _has_bits_[2] &= ~0x00000040u;
}
inline void Datum::clear_m_acc_j5() {
  m_acc_j5_ = 0;
  clear_has_m_acc_j5();
}
inline double Datum::m_acc_j5() const {
  return m_acc_j5_;
}
inline void Datum::set_m_acc_j5(double value) {
  set_has_m_acc_j5();
  m_acc_j5_ = value;
}

// optional double m_acc_j6 = 72;
inline bool Datum::has_m_acc_j6() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
inline void Datum::set_has_m_acc_j6() {
  _has_bits_[2] |= 0x00000080u;
}
inline void Datum::clear_has_m_acc_j6() {
  _has_bits_[2] &= ~0x00000080u;
}
inline void Datum::clear_m_acc_j6() {
  m_acc_j6_ = 0;
  clear_has_m_acc_j6();
}
inline double Datum::m_acc_j6() const {
  return m_acc_j6_;
}
inline void Datum::set_m_acc_j6(double value) {
  set_has_m_acc_j6();
  m_acc_j6_ = value;
}

// optional double m_eff_j0 = 73;
inline bool Datum::has_m_eff_j0() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
inline void Datum::set_has_m_eff_j0() {
  _has_bits_[2] |= 0x00000100u;
}
inline void Datum::clear_has_m_eff_j0() {
  _has_bits_[2] &= ~0x00000100u;
}
inline void Datum::clear_m_eff_j0() {
  m_eff_j0_ = 0;
  clear_has_m_eff_j0();
}
inline double Datum::m_eff_j0() const {
  return m_eff_j0_;
}
inline void Datum::set_m_eff_j0(double value) {
  set_has_m_eff_j0();
  m_eff_j0_ = value;
}

// optional double m_eff_j1 = 74;
inline bool Datum::has_m_eff_j1() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
inline void Datum::set_has_m_eff_j1() {
  _has_bits_[2] |= 0x00000200u;
}
inline void Datum::clear_has_m_eff_j1() {
  _has_bits_[2] &= ~0x00000200u;
}
inline void Datum::clear_m_eff_j1() {
  m_eff_j1_ = 0;
  clear_has_m_eff_j1();
}
inline double Datum::m_eff_j1() const {
  return m_eff_j1_;
}
inline void Datum::set_m_eff_j1(double value) {
  set_has_m_eff_j1();
  m_eff_j1_ = value;
}

// optional double m_eff_j2 = 75;
inline bool Datum::has_m_eff_j2() const {
  return (_has_bits_[2] & 0x00000400u) != 0;
}
inline void Datum::set_has_m_eff_j2() {
  _has_bits_[2] |= 0x00000400u;
}
inline void Datum::clear_has_m_eff_j2() {
  _has_bits_[2] &= ~0x00000400u;
}
inline void Datum::clear_m_eff_j2() {
  m_eff_j2_ = 0;
  clear_has_m_eff_j2();
}
inline double Datum::m_eff_j2() const {
  return m_eff_j2_;
}
inline void Datum::set_m_eff_j2(double value) {
  set_has_m_eff_j2();
  m_eff_j2_ = value;
}

// optional double m_eff_j3 = 76;
inline bool Datum::has_m_eff_j3() const {
  return (_has_bits_[2] & 0x00000800u) != 0;
}
inline void Datum::set_has_m_eff_j3() {
  _has_bits_[2] |= 0x00000800u;
}
inline void Datum::clear_has_m_eff_j3() {
  _has_bits_[2] &= ~0x00000800u;
}
inline void Datum::clear_m_eff_j3() {
  m_eff_j3_ = 0;
  clear_has_m_eff_j3();
}
inline double Datum::m_eff_j3() const {
  return m_eff_j3_;
}
inline void Datum::set_m_eff_j3(double value) {
  set_has_m_eff_j3();
  m_eff_j3_ = value;
}

// optional double m_eff_j4 = 77;
inline bool Datum::has_m_eff_j4() const {
  return (_has_bits_[2] & 0x00001000u) != 0;
}
inline void Datum::set_has_m_eff_j4() {
  _has_bits_[2] |= 0x00001000u;
}
inline void Datum::clear_has_m_eff_j4() {
  _has_bits_[2] &= ~0x00001000u;
}
inline void Datum::clear_m_eff_j4() {
  m_eff_j4_ = 0;
  clear_has_m_eff_j4();
}
inline double Datum::m_eff_j4() const {
  return m_eff_j4_;
}
inline void Datum::set_m_eff_j4(double value) {
  set_has_m_eff_j4();
  m_eff_j4_ = value;
}

// optional double m_eff_j5 = 78;
inline bool Datum::has_m_eff_j5() const {
  return (_has_bits_[2] & 0x00002000u) != 0;
}
inline void Datum::set_has_m_eff_j5() {
  _has_bits_[2] |= 0x00002000u;
}
inline void Datum::clear_has_m_eff_j5() {
  _has_bits_[2] &= ~0x00002000u;
}
inline void Datum::clear_m_eff_j5() {
  m_eff_j5_ = 0;
  clear_has_m_eff_j5();
}
inline double Datum::m_eff_j5() const {
  return m_eff_j5_;
}
inline void Datum::set_m_eff_j5(double value) {
  set_has_m_eff_j5();
  m_eff_j5_ = value;
}

// optional double m_eff_j6 = 79;
inline bool Datum::has_m_eff_j6() const {
  return (_has_bits_[2] & 0x00004000u) != 0;
}
inline void Datum::set_has_m_eff_j6() {
  _has_bits_[2] |= 0x00004000u;
}
inline void Datum::clear_has_m_eff_j6() {
  _has_bits_[2] &= ~0x00004000u;
}
inline void Datum::clear_m_eff_j6() {
  m_eff_j6_ = 0;
  clear_has_m_eff_j6();
}
inline double Datum::m_eff_j6() const {
  return m_eff_j6_;
}
inline void Datum::set_m_eff_j6(double value) {
  set_has_m_eff_j6();
  m_eff_j6_ = value;
}

// optional double control_eff_j0 = 80;
inline bool Datum::has_control_eff_j0() const {
  return (_has_bits_[2] & 0x00008000u) != 0;
}
inline void Datum::set_has_control_eff_j0() {
  _has_bits_[2] |= 0x00008000u;
}
inline void Datum::clear_has_control_eff_j0() {
  _has_bits_[2] &= ~0x00008000u;
}
inline void Datum::clear_control_eff_j0() {
  control_eff_j0_ = 0;
  clear_has_control_eff_j0();
}
inline double Datum::control_eff_j0() const {
  return control_eff_j0_;
}
inline void Datum::set_control_eff_j0(double value) {
  set_has_control_eff_j0();
  control_eff_j0_ = value;
}

// optional double control_eff_j1 = 81;
inline bool Datum::has_control_eff_j1() const {
  return (_has_bits_[2] & 0x00010000u) != 0;
}
inline void Datum::set_has_control_eff_j1() {
  _has_bits_[2] |= 0x00010000u;
}
inline void Datum::clear_has_control_eff_j1() {
  _has_bits_[2] &= ~0x00010000u;
}
inline void Datum::clear_control_eff_j1() {
  control_eff_j1_ = 0;
  clear_has_control_eff_j1();
}
inline double Datum::control_eff_j1() const {
  return control_eff_j1_;
}
inline void Datum::set_control_eff_j1(double value) {
  set_has_control_eff_j1();
  control_eff_j1_ = value;
}

// optional double control_eff_j2 = 82;
inline bool Datum::has_control_eff_j2() const {
  return (_has_bits_[2] & 0x00020000u) != 0;
}
inline void Datum::set_has_control_eff_j2() {
  _has_bits_[2] |= 0x00020000u;
}
inline void Datum::clear_has_control_eff_j2() {
  _has_bits_[2] &= ~0x00020000u;
}
inline void Datum::clear_control_eff_j2() {
  control_eff_j2_ = 0;
  clear_has_control_eff_j2();
}
inline double Datum::control_eff_j2() const {
  return control_eff_j2_;
}
inline void Datum::set_control_eff_j2(double value) {
  set_has_control_eff_j2();
  control_eff_j2_ = value;
}

// optional double control_eff_j3 = 83;
inline bool Datum::has_control_eff_j3() const {
  return (_has_bits_[2] & 0x00040000u) != 0;
}
inline void Datum::set_has_control_eff_j3() {
  _has_bits_[2] |= 0x00040000u;
}
inline void Datum::clear_has_control_eff_j3() {
  _has_bits_[2] &= ~0x00040000u;
}
inline void Datum::clear_control_eff_j3() {
  control_eff_j3_ = 0;
  clear_has_control_eff_j3();
}
inline double Datum::control_eff_j3() const {
  return control_eff_j3_;
}
inline void Datum::set_control_eff_j3(double value) {
  set_has_control_eff_j3();
  control_eff_j3_ = value;
}

// optional double control_eff_j4 = 84;
inline bool Datum::has_control_eff_j4() const {
  return (_has_bits_[2] & 0x00080000u) != 0;
}
inline void Datum::set_has_control_eff_j4() {
  _has_bits_[2] |= 0x00080000u;
}
inline void Datum::clear_has_control_eff_j4() {
  _has_bits_[2] &= ~0x00080000u;
}
inline void Datum::clear_control_eff_j4() {
  control_eff_j4_ = 0;
  clear_has_control_eff_j4();
}
inline double Datum::control_eff_j4() const {
  return control_eff_j4_;
}
inline void Datum::set_control_eff_j4(double value) {
  set_has_control_eff_j4();
  control_eff_j4_ = value;
}

// optional double control_eff_j5 = 85;
inline bool Datum::has_control_eff_j5() const {
  return (_has_bits_[2] & 0x00100000u) != 0;
}
inline void Datum::set_has_control_eff_j5() {
  _has_bits_[2] |= 0x00100000u;
}
inline void Datum::clear_has_control_eff_j5() {
  _has_bits_[2] &= ~0x00100000u;
}
inline void Datum::clear_control_eff_j5() {
  control_eff_j5_ = 0;
  clear_has_control_eff_j5();
}
inline double Datum::control_eff_j5() const {
  return control_eff_j5_;
}
inline void Datum::set_control_eff_j5(double value) {
  set_has_control_eff_j5();
  control_eff_j5_ = value;
}

// optional double control_eff_j6 = 86;
inline bool Datum::has_control_eff_j6() const {
  return (_has_bits_[2] & 0x00200000u) != 0;
}
inline void Datum::set_has_control_eff_j6() {
  _has_bits_[2] |= 0x00200000u;
}
inline void Datum::clear_has_control_eff_j6() {
  _has_bits_[2] &= ~0x00200000u;
}
inline void Datum::clear_control_eff_j6() {
  control_eff_j6_ = 0;
  clear_has_control_eff_j6();
}
inline double Datum::control_eff_j6() const {
  return control_eff_j6_;
}
inline void Datum::set_control_eff_j6(double value) {
  set_has_control_eff_j6();
  control_eff_j6_ = value;
}

// optional double r_cartPos_x = 87;
inline bool Datum::has_r_cartpos_x() const {
  return (_has_bits_[2] & 0x00400000u) != 0;
}
inline void Datum::set_has_r_cartpos_x() {
  _has_bits_[2] |= 0x00400000u;
}
inline void Datum::clear_has_r_cartpos_x() {
  _has_bits_[2] &= ~0x00400000u;
}
inline void Datum::clear_r_cartpos_x() {
  r_cartpos_x_ = 0;
  clear_has_r_cartpos_x();
}
inline double Datum::r_cartpos_x() const {
  return r_cartpos_x_;
}
inline void Datum::set_r_cartpos_x(double value) {
  set_has_r_cartpos_x();
  r_cartpos_x_ = value;
}

// optional double r_cartPos_y = 88;
inline bool Datum::has_r_cartpos_y() const {
  return (_has_bits_[2] & 0x00800000u) != 0;
}
inline void Datum::set_has_r_cartpos_y() {
  _has_bits_[2] |= 0x00800000u;
}
inline void Datum::clear_has_r_cartpos_y() {
  _has_bits_[2] &= ~0x00800000u;
}
inline void Datum::clear_r_cartpos_y() {
  r_cartpos_y_ = 0;
  clear_has_r_cartpos_y();
}
inline double Datum::r_cartpos_y() const {
  return r_cartpos_y_;
}
inline void Datum::set_r_cartpos_y(double value) {
  set_has_r_cartpos_y();
  r_cartpos_y_ = value;
}

// optional double r_cartPos_z = 89;
inline bool Datum::has_r_cartpos_z() const {
  return (_has_bits_[2] & 0x01000000u) != 0;
}
inline void Datum::set_has_r_cartpos_z() {
  _has_bits_[2] |= 0x01000000u;
}
inline void Datum::clear_has_r_cartpos_z() {
  _has_bits_[2] &= ~0x01000000u;
}
inline void Datum::clear_r_cartpos_z() {
  r_cartpos_z_ = 0;
  clear_has_r_cartpos_z();
}
inline double Datum::r_cartpos_z() const {
  return r_cartpos_z_;
}
inline void Datum::set_r_cartpos_z(double value) {
  set_has_r_cartpos_z();
  r_cartpos_z_ = value;
}

// optional double r_cartPos_Qx = 90;
inline bool Datum::has_r_cartpos_qx() const {
  return (_has_bits_[2] & 0x02000000u) != 0;
}
inline void Datum::set_has_r_cartpos_qx() {
  _has_bits_[2] |= 0x02000000u;
}
inline void Datum::clear_has_r_cartpos_qx() {
  _has_bits_[2] &= ~0x02000000u;
}
inline void Datum::clear_r_cartpos_qx() {
  r_cartpos_qx_ = 0;
  clear_has_r_cartpos_qx();
}
inline double Datum::r_cartpos_qx() const {
  return r_cartpos_qx_;
}
inline void Datum::set_r_cartpos_qx(double value) {
  set_has_r_cartpos_qx();
  r_cartpos_qx_ = value;
}

// optional double r_cartPos_Qy = 91;
inline bool Datum::has_r_cartpos_qy() const {
  return (_has_bits_[2] & 0x04000000u) != 0;
}
inline void Datum::set_has_r_cartpos_qy() {
  _has_bits_[2] |= 0x04000000u;
}
inline void Datum::clear_has_r_cartpos_qy() {
  _has_bits_[2] &= ~0x04000000u;
}
inline void Datum::clear_r_cartpos_qy() {
  r_cartpos_qy_ = 0;
  clear_has_r_cartpos_qy();
}
inline double Datum::r_cartpos_qy() const {
  return r_cartpos_qy_;
}
inline void Datum::set_r_cartpos_qy(double value) {
  set_has_r_cartpos_qy();
  r_cartpos_qy_ = value;
}

// optional double r_cartPos_Qz = 92;
inline bool Datum::has_r_cartpos_qz() const {
  return (_has_bits_[2] & 0x08000000u) != 0;
}
inline void Datum::set_has_r_cartpos_qz() {
  _has_bits_[2] |= 0x08000000u;
}
inline void Datum::clear_has_r_cartpos_qz() {
  _has_bits_[2] &= ~0x08000000u;
}
inline void Datum::clear_r_cartpos_qz() {
  r_cartpos_qz_ = 0;
  clear_has_r_cartpos_qz();
}
inline double Datum::r_cartpos_qz() const {
  return r_cartpos_qz_;
}
inline void Datum::set_r_cartpos_qz(double value) {
  set_has_r_cartpos_qz();
  r_cartpos_qz_ = value;
}

// optional double r_cartPos_QW = 93;
inline bool Datum::has_r_cartpos_qw() const {
  return (_has_bits_[2] & 0x10000000u) != 0;
}
inline void Datum::set_has_r_cartpos_qw() {
  _has_bits_[2] |= 0x10000000u;
}
inline void Datum::clear_has_r_cartpos_qw() {
  _has_bits_[2] &= ~0x10000000u;
}
inline void Datum::clear_r_cartpos_qw() {
  r_cartpos_qw_ = 0;
  clear_has_r_cartpos_qw();
}
inline double Datum::r_cartpos_qw() const {
  return r_cartpos_qw_;
}
inline void Datum::set_r_cartpos_qw(double value) {
  set_has_r_cartpos_qw();
  r_cartpos_qw_ = value;
}

// optional double r_pos_j0 = 94;
inline bool Datum::has_r_pos_j0() const {
  return (_has_bits_[2] & 0x20000000u) != 0;
}
inline void Datum::set_has_r_pos_j0() {
  _has_bits_[2] |= 0x20000000u;
}
inline void Datum::clear_has_r_pos_j0() {
  _has_bits_[2] &= ~0x20000000u;
}
inline void Datum::clear_r_pos_j0() {
  r_pos_j0_ = 0;
  clear_has_r_pos_j0();
}
inline double Datum::r_pos_j0() const {
  return r_pos_j0_;
}
inline void Datum::set_r_pos_j0(double value) {
  set_has_r_pos_j0();
  r_pos_j0_ = value;
}

// optional double r_pos_j1 = 95;
inline bool Datum::has_r_pos_j1() const {
  return (_has_bits_[2] & 0x40000000u) != 0;
}
inline void Datum::set_has_r_pos_j1() {
  _has_bits_[2] |= 0x40000000u;
}
inline void Datum::clear_has_r_pos_j1() {
  _has_bits_[2] &= ~0x40000000u;
}
inline void Datum::clear_r_pos_j1() {
  r_pos_j1_ = 0;
  clear_has_r_pos_j1();
}
inline double Datum::r_pos_j1() const {
  return r_pos_j1_;
}
inline void Datum::set_r_pos_j1(double value) {
  set_has_r_pos_j1();
  r_pos_j1_ = value;
}

// optional double r_pos_j2 = 96;
inline bool Datum::has_r_pos_j2() const {
  return (_has_bits_[2] & 0x80000000u) != 0;
}
inline void Datum::set_has_r_pos_j2() {
  _has_bits_[2] |= 0x80000000u;
}
inline void Datum::clear_has_r_pos_j2() {
  _has_bits_[2] &= ~0x80000000u;
}
inline void Datum::clear_r_pos_j2() {
  r_pos_j2_ = 0;
  clear_has_r_pos_j2();
}
inline double Datum::r_pos_j2() const {
  return r_pos_j2_;
}
inline void Datum::set_r_pos_j2(double value) {
  set_has_r_pos_j2();
  r_pos_j2_ = value;
}

// optional double r_pos_j3 = 97;
inline bool Datum::has_r_pos_j3() const {
  return (_has_bits_[3] & 0x00000001u) != 0;
}
inline void Datum::set_has_r_pos_j3() {
  _has_bits_[3] |= 0x00000001u;
}
inline void Datum::clear_has_r_pos_j3() {
  _has_bits_[3] &= ~0x00000001u;
}
inline void Datum::clear_r_pos_j3() {
  r_pos_j3_ = 0;
  clear_has_r_pos_j3();
}
inline double Datum::r_pos_j3() const {
  return r_pos_j3_;
}
inline void Datum::set_r_pos_j3(double value) {
  set_has_r_pos_j3();
  r_pos_j3_ = value;
}

// optional double r_pos_j4 = 98;
inline bool Datum::has_r_pos_j4() const {
  return (_has_bits_[3] & 0x00000002u) != 0;
}
inline void Datum::set_has_r_pos_j4() {
  _has_bits_[3] |= 0x00000002u;
}
inline void Datum::clear_has_r_pos_j4() {
  _has_bits_[3] &= ~0x00000002u;
}
inline void Datum::clear_r_pos_j4() {
  r_pos_j4_ = 0;
  clear_has_r_pos_j4();
}
inline double Datum::r_pos_j4() const {
  return r_pos_j4_;
}
inline void Datum::set_r_pos_j4(double value) {
  set_has_r_pos_j4();
  r_pos_j4_ = value;
}

// optional double r_pos_j5 = 99;
inline bool Datum::has_r_pos_j5() const {
  return (_has_bits_[3] & 0x00000004u) != 0;
}
inline void Datum::set_has_r_pos_j5() {
  _has_bits_[3] |= 0x00000004u;
}
inline void Datum::clear_has_r_pos_j5() {
  _has_bits_[3] &= ~0x00000004u;
}
inline void Datum::clear_r_pos_j5() {
  r_pos_j5_ = 0;
  clear_has_r_pos_j5();
}
inline double Datum::r_pos_j5() const {
  return r_pos_j5_;
}
inline void Datum::set_r_pos_j5(double value) {
  set_has_r_pos_j5();
  r_pos_j5_ = value;
}

// optional double r_pos_j6 = 100;
inline bool Datum::has_r_pos_j6() const {
  return (_has_bits_[3] & 0x00000008u) != 0;
}
inline void Datum::set_has_r_pos_j6() {
  _has_bits_[3] |= 0x00000008u;
}
inline void Datum::clear_has_r_pos_j6() {
  _has_bits_[3] &= ~0x00000008u;
}
inline void Datum::clear_r_pos_j6() {
  r_pos_j6_ = 0;
  clear_has_r_pos_j6();
}
inline double Datum::r_pos_j6() const {
  return r_pos_j6_;
}
inline void Datum::set_r_pos_j6(double value) {
  set_has_r_pos_j6();
  r_pos_j6_ = value;
}

// optional double r_vel_j0 = 101;
inline bool Datum::has_r_vel_j0() const {
  return (_has_bits_[3] & 0x00000010u) != 0;
}
inline void Datum::set_has_r_vel_j0() {
  _has_bits_[3] |= 0x00000010u;
}
inline void Datum::clear_has_r_vel_j0() {
  _has_bits_[3] &= ~0x00000010u;
}
inline void Datum::clear_r_vel_j0() {
  r_vel_j0_ = 0;
  clear_has_r_vel_j0();
}
inline double Datum::r_vel_j0() const {
  return r_vel_j0_;
}
inline void Datum::set_r_vel_j0(double value) {
  set_has_r_vel_j0();
  r_vel_j0_ = value;
}

// optional double r_vel_j1 = 102;
inline bool Datum::has_r_vel_j1() const {
  return (_has_bits_[3] & 0x00000020u) != 0;
}
inline void Datum::set_has_r_vel_j1() {
  _has_bits_[3] |= 0x00000020u;
}
inline void Datum::clear_has_r_vel_j1() {
  _has_bits_[3] &= ~0x00000020u;
}
inline void Datum::clear_r_vel_j1() {
  r_vel_j1_ = 0;
  clear_has_r_vel_j1();
}
inline double Datum::r_vel_j1() const {
  return r_vel_j1_;
}
inline void Datum::set_r_vel_j1(double value) {
  set_has_r_vel_j1();
  r_vel_j1_ = value;
}

// optional double r_vel_j2 = 103;
inline bool Datum::has_r_vel_j2() const {
  return (_has_bits_[3] & 0x00000040u) != 0;
}
inline void Datum::set_has_r_vel_j2() {
  _has_bits_[3] |= 0x00000040u;
}
inline void Datum::clear_has_r_vel_j2() {
  _has_bits_[3] &= ~0x00000040u;
}
inline void Datum::clear_r_vel_j2() {
  r_vel_j2_ = 0;
  clear_has_r_vel_j2();
}
inline double Datum::r_vel_j2() const {
  return r_vel_j2_;
}
inline void Datum::set_r_vel_j2(double value) {
  set_has_r_vel_j2();
  r_vel_j2_ = value;
}

// optional double r_vel_j3 = 104;
inline bool Datum::has_r_vel_j3() const {
  return (_has_bits_[3] & 0x00000080u) != 0;
}
inline void Datum::set_has_r_vel_j3() {
  _has_bits_[3] |= 0x00000080u;
}
inline void Datum::clear_has_r_vel_j3() {
  _has_bits_[3] &= ~0x00000080u;
}
inline void Datum::clear_r_vel_j3() {
  r_vel_j3_ = 0;
  clear_has_r_vel_j3();
}
inline double Datum::r_vel_j3() const {
  return r_vel_j3_;
}
inline void Datum::set_r_vel_j3(double value) {
  set_has_r_vel_j3();
  r_vel_j3_ = value;
}

// optional double r_vel_j4 = 105;
inline bool Datum::has_r_vel_j4() const {
  return (_has_bits_[3] & 0x00000100u) != 0;
}
inline void Datum::set_has_r_vel_j4() {
  _has_bits_[3] |= 0x00000100u;
}
inline void Datum::clear_has_r_vel_j4() {
  _has_bits_[3] &= ~0x00000100u;
}
inline void Datum::clear_r_vel_j4() {
  r_vel_j4_ = 0;
  clear_has_r_vel_j4();
}
inline double Datum::r_vel_j4() const {
  return r_vel_j4_;
}
inline void Datum::set_r_vel_j4(double value) {
  set_has_r_vel_j4();
  r_vel_j4_ = value;
}

// optional double r_vel_j5 = 106;
inline bool Datum::has_r_vel_j5() const {
  return (_has_bits_[3] & 0x00000200u) != 0;
}
inline void Datum::set_has_r_vel_j5() {
  _has_bits_[3] |= 0x00000200u;
}
inline void Datum::clear_has_r_vel_j5() {
  _has_bits_[3] &= ~0x00000200u;
}
inline void Datum::clear_r_vel_j5() {
  r_vel_j5_ = 0;
  clear_has_r_vel_j5();
}
inline double Datum::r_vel_j5() const {
  return r_vel_j5_;
}
inline void Datum::set_r_vel_j5(double value) {
  set_has_r_vel_j5();
  r_vel_j5_ = value;
}

// optional double r_vel_j6 = 107;
inline bool Datum::has_r_vel_j6() const {
  return (_has_bits_[3] & 0x00000400u) != 0;
}
inline void Datum::set_has_r_vel_j6() {
  _has_bits_[3] |= 0x00000400u;
}
inline void Datum::clear_has_r_vel_j6() {
  _has_bits_[3] &= ~0x00000400u;
}
inline void Datum::clear_r_vel_j6() {
  r_vel_j6_ = 0;
  clear_has_r_vel_j6();
}
inline double Datum::r_vel_j6() const {
  return r_vel_j6_;
}
inline void Datum::set_r_vel_j6(double value) {
  set_has_r_vel_j6();
  r_vel_j6_ = value;
}

// optional double r_acc_j0 = 108;
inline bool Datum::has_r_acc_j0() const {
  return (_has_bits_[3] & 0x00000800u) != 0;
}
inline void Datum::set_has_r_acc_j0() {
  _has_bits_[3] |= 0x00000800u;
}
inline void Datum::clear_has_r_acc_j0() {
  _has_bits_[3] &= ~0x00000800u;
}
inline void Datum::clear_r_acc_j0() {
  r_acc_j0_ = 0;
  clear_has_r_acc_j0();
}
inline double Datum::r_acc_j0() const {
  return r_acc_j0_;
}
inline void Datum::set_r_acc_j0(double value) {
  set_has_r_acc_j0();
  r_acc_j0_ = value;
}

// optional double r_acc_j1 = 109;
inline bool Datum::has_r_acc_j1() const {
  return (_has_bits_[3] & 0x00001000u) != 0;
}
inline void Datum::set_has_r_acc_j1() {
  _has_bits_[3] |= 0x00001000u;
}
inline void Datum::clear_has_r_acc_j1() {
  _has_bits_[3] &= ~0x00001000u;
}
inline void Datum::clear_r_acc_j1() {
  r_acc_j1_ = 0;
  clear_has_r_acc_j1();
}
inline double Datum::r_acc_j1() const {
  return r_acc_j1_;
}
inline void Datum::set_r_acc_j1(double value) {
  set_has_r_acc_j1();
  r_acc_j1_ = value;
}

// optional double r_acc_j2 = 110;
inline bool Datum::has_r_acc_j2() const {
  return (_has_bits_[3] & 0x00002000u) != 0;
}
inline void Datum::set_has_r_acc_j2() {
  _has_bits_[3] |= 0x00002000u;
}
inline void Datum::clear_has_r_acc_j2() {
  _has_bits_[3] &= ~0x00002000u;
}
inline void Datum::clear_r_acc_j2() {
  r_acc_j2_ = 0;
  clear_has_r_acc_j2();
}
inline double Datum::r_acc_j2() const {
  return r_acc_j2_;
}
inline void Datum::set_r_acc_j2(double value) {
  set_has_r_acc_j2();
  r_acc_j2_ = value;
}

// optional double r_acc_j3 = 111;
inline bool Datum::has_r_acc_j3() const {
  return (_has_bits_[3] & 0x00004000u) != 0;
}
inline void Datum::set_has_r_acc_j3() {
  _has_bits_[3] |= 0x00004000u;
}
inline void Datum::clear_has_r_acc_j3() {
  _has_bits_[3] &= ~0x00004000u;
}
inline void Datum::clear_r_acc_j3() {
  r_acc_j3_ = 0;
  clear_has_r_acc_j3();
}
inline double Datum::r_acc_j3() const {
  return r_acc_j3_;
}
inline void Datum::set_r_acc_j3(double value) {
  set_has_r_acc_j3();
  r_acc_j3_ = value;
}

// optional double r_acc_j4 = 112;
inline bool Datum::has_r_acc_j4() const {
  return (_has_bits_[3] & 0x00008000u) != 0;
}
inline void Datum::set_has_r_acc_j4() {
  _has_bits_[3] |= 0x00008000u;
}
inline void Datum::clear_has_r_acc_j4() {
  _has_bits_[3] &= ~0x00008000u;
}
inline void Datum::clear_r_acc_j4() {
  r_acc_j4_ = 0;
  clear_has_r_acc_j4();
}
inline double Datum::r_acc_j4() const {
  return r_acc_j4_;
}
inline void Datum::set_r_acc_j4(double value) {
  set_has_r_acc_j4();
  r_acc_j4_ = value;
}

// optional double r_acc_j5 = 113;
inline bool Datum::has_r_acc_j5() const {
  return (_has_bits_[3] & 0x00010000u) != 0;
}
inline void Datum::set_has_r_acc_j5() {
  _has_bits_[3] |= 0x00010000u;
}
inline void Datum::clear_has_r_acc_j5() {
  _has_bits_[3] &= ~0x00010000u;
}
inline void Datum::clear_r_acc_j5() {
  r_acc_j5_ = 0;
  clear_has_r_acc_j5();
}
inline double Datum::r_acc_j5() const {
  return r_acc_j5_;
}
inline void Datum::set_r_acc_j5(double value) {
  set_has_r_acc_j5();
  r_acc_j5_ = value;
}

// optional double r_acc_j6 = 114;
inline bool Datum::has_r_acc_j6() const {
  return (_has_bits_[3] & 0x00020000u) != 0;
}
inline void Datum::set_has_r_acc_j6() {
  _has_bits_[3] |= 0x00020000u;
}
inline void Datum::clear_has_r_acc_j6() {
  _has_bits_[3] &= ~0x00020000u;
}
inline void Datum::clear_r_acc_j6() {
  r_acc_j6_ = 0;
  clear_has_r_acc_j6();
}
inline double Datum::r_acc_j6() const {
  return r_acc_j6_;
}
inline void Datum::set_r_acc_j6(double value) {
  set_has_r_acc_j6();
  r_acc_j6_ = value;
}

// optional double r_eff_j0 = 115;
inline bool Datum::has_r_eff_j0() const {
  return (_has_bits_[3] & 0x00040000u) != 0;
}
inline void Datum::set_has_r_eff_j0() {
  _has_bits_[3] |= 0x00040000u;
}
inline void Datum::clear_has_r_eff_j0() {
  _has_bits_[3] &= ~0x00040000u;
}
inline void Datum::clear_r_eff_j0() {
  r_eff_j0_ = 0;
  clear_has_r_eff_j0();
}
inline double Datum::r_eff_j0() const {
  return r_eff_j0_;
}
inline void Datum::set_r_eff_j0(double value) {
  set_has_r_eff_j0();
  r_eff_j0_ = value;
}

// optional double r_eff_j1 = 116;
inline bool Datum::has_r_eff_j1() const {
  return (_has_bits_[3] & 0x00080000u) != 0;
}
inline void Datum::set_has_r_eff_j1() {
  _has_bits_[3] |= 0x00080000u;
}
inline void Datum::clear_has_r_eff_j1() {
  _has_bits_[3] &= ~0x00080000u;
}
inline void Datum::clear_r_eff_j1() {
  r_eff_j1_ = 0;
  clear_has_r_eff_j1();
}
inline double Datum::r_eff_j1() const {
  return r_eff_j1_;
}
inline void Datum::set_r_eff_j1(double value) {
  set_has_r_eff_j1();
  r_eff_j1_ = value;
}

// optional double r_eff_j2 = 117;
inline bool Datum::has_r_eff_j2() const {
  return (_has_bits_[3] & 0x00100000u) != 0;
}
inline void Datum::set_has_r_eff_j2() {
  _has_bits_[3] |= 0x00100000u;
}
inline void Datum::clear_has_r_eff_j2() {
  _has_bits_[3] &= ~0x00100000u;
}
inline void Datum::clear_r_eff_j2() {
  r_eff_j2_ = 0;
  clear_has_r_eff_j2();
}
inline double Datum::r_eff_j2() const {
  return r_eff_j2_;
}
inline void Datum::set_r_eff_j2(double value) {
  set_has_r_eff_j2();
  r_eff_j2_ = value;
}

// optional double r_eff_j3 = 118;
inline bool Datum::has_r_eff_j3() const {
  return (_has_bits_[3] & 0x00200000u) != 0;
}
inline void Datum::set_has_r_eff_j3() {
  _has_bits_[3] |= 0x00200000u;
}
inline void Datum::clear_has_r_eff_j3() {
  _has_bits_[3] &= ~0x00200000u;
}
inline void Datum::clear_r_eff_j3() {
  r_eff_j3_ = 0;
  clear_has_r_eff_j3();
}
inline double Datum::r_eff_j3() const {
  return r_eff_j3_;
}
inline void Datum::set_r_eff_j3(double value) {
  set_has_r_eff_j3();
  r_eff_j3_ = value;
}

// optional double r_eff_j4 = 119;
inline bool Datum::has_r_eff_j4() const {
  return (_has_bits_[3] & 0x00400000u) != 0;
}
inline void Datum::set_has_r_eff_j4() {
  _has_bits_[3] |= 0x00400000u;
}
inline void Datum::clear_has_r_eff_j4() {
  _has_bits_[3] &= ~0x00400000u;
}
inline void Datum::clear_r_eff_j4() {
  r_eff_j4_ = 0;
  clear_has_r_eff_j4();
}
inline double Datum::r_eff_j4() const {
  return r_eff_j4_;
}
inline void Datum::set_r_eff_j4(double value) {
  set_has_r_eff_j4();
  r_eff_j4_ = value;
}

// optional double r_eff_j5 = 120;
inline bool Datum::has_r_eff_j5() const {
  return (_has_bits_[3] & 0x00800000u) != 0;
}
inline void Datum::set_has_r_eff_j5() {
  _has_bits_[3] |= 0x00800000u;
}
inline void Datum::clear_has_r_eff_j5() {
  _has_bits_[3] &= ~0x00800000u;
}
inline void Datum::clear_r_eff_j5() {
  r_eff_j5_ = 0;
  clear_has_r_eff_j5();
}
inline double Datum::r_eff_j5() const {
  return r_eff_j5_;
}
inline void Datum::set_r_eff_j5(double value) {
  set_has_r_eff_j5();
  r_eff_j5_ = value;
}

// optional double r_eff_j6 = 121;
inline bool Datum::has_r_eff_j6() const {
  return (_has_bits_[3] & 0x01000000u) != 0;
}
inline void Datum::set_has_r_eff_j6() {
  _has_bits_[3] |= 0x01000000u;
}
inline void Datum::clear_has_r_eff_j6() {
  _has_bits_[3] &= ~0x01000000u;
}
inline void Datum::clear_r_eff_j6() {
  r_eff_j6_ = 0;
  clear_has_r_eff_j6();
}
inline double Datum::r_eff_j6() const {
  return r_eff_j6_;
}
inline void Datum::set_r_eff_j6(double value) {
  set_has_r_eff_j6();
  r_eff_j6_ = value;
}

// optional double l_limit_0 = 122;
inline bool Datum::has_l_limit_0() const {
  return (_has_bits_[3] & 0x02000000u) != 0;
}
inline void Datum::set_has_l_limit_0() {
  _has_bits_[3] |= 0x02000000u;
}
inline void Datum::clear_has_l_limit_0() {
  _has_bits_[3] &= ~0x02000000u;
}
inline void Datum::clear_l_limit_0() {
  l_limit_0_ = 0;
  clear_has_l_limit_0();
}
inline double Datum::l_limit_0() const {
  return l_limit_0_;
}
inline void Datum::set_l_limit_0(double value) {
  set_has_l_limit_0();
  l_limit_0_ = value;
}

// optional double l_limit_1 = 123;
inline bool Datum::has_l_limit_1() const {
  return (_has_bits_[3] & 0x04000000u) != 0;
}
inline void Datum::set_has_l_limit_1() {
  _has_bits_[3] |= 0x04000000u;
}
inline void Datum::clear_has_l_limit_1() {
  _has_bits_[3] &= ~0x04000000u;
}
inline void Datum::clear_l_limit_1() {
  l_limit_1_ = 0;
  clear_has_l_limit_1();
}
inline double Datum::l_limit_1() const {
  return l_limit_1_;
}
inline void Datum::set_l_limit_1(double value) {
  set_has_l_limit_1();
  l_limit_1_ = value;
}

// optional double l_limit_2 = 124;
inline bool Datum::has_l_limit_2() const {
  return (_has_bits_[3] & 0x08000000u) != 0;
}
inline void Datum::set_has_l_limit_2() {
  _has_bits_[3] |= 0x08000000u;
}
inline void Datum::clear_has_l_limit_2() {
  _has_bits_[3] &= ~0x08000000u;
}
inline void Datum::clear_l_limit_2() {
  l_limit_2_ = 0;
  clear_has_l_limit_2();
}
inline double Datum::l_limit_2() const {
  return l_limit_2_;
}
inline void Datum::set_l_limit_2(double value) {
  set_has_l_limit_2();
  l_limit_2_ = value;
}

// optional double l_limit_3 = 125;
inline bool Datum::has_l_limit_3() const {
  return (_has_bits_[3] & 0x10000000u) != 0;
}
inline void Datum::set_has_l_limit_3() {
  _has_bits_[3] |= 0x10000000u;
}
inline void Datum::clear_has_l_limit_3() {
  _has_bits_[3] &= ~0x10000000u;
}
inline void Datum::clear_l_limit_3() {
  l_limit_3_ = 0;
  clear_has_l_limit_3();
}
inline double Datum::l_limit_3() const {
  return l_limit_3_;
}
inline void Datum::set_l_limit_3(double value) {
  set_has_l_limit_3();
  l_limit_3_ = value;
}

// optional double l_limit_4 = 126;
inline bool Datum::has_l_limit_4() const {
  return (_has_bits_[3] & 0x20000000u) != 0;
}
inline void Datum::set_has_l_limit_4() {
  _has_bits_[3] |= 0x20000000u;
}
inline void Datum::clear_has_l_limit_4() {
  _has_bits_[3] &= ~0x20000000u;
}
inline void Datum::clear_l_limit_4() {
  l_limit_4_ = 0;
  clear_has_l_limit_4();
}
inline double Datum::l_limit_4() const {
  return l_limit_4_;
}
inline void Datum::set_l_limit_4(double value) {
  set_has_l_limit_4();
  l_limit_4_ = value;
}

// optional double l_limit_5 = 127;
inline bool Datum::has_l_limit_5() const {
  return (_has_bits_[3] & 0x40000000u) != 0;
}
inline void Datum::set_has_l_limit_5() {
  _has_bits_[3] |= 0x40000000u;
}
inline void Datum::clear_has_l_limit_5() {
  _has_bits_[3] &= ~0x40000000u;
}
inline void Datum::clear_l_limit_5() {
  l_limit_5_ = 0;
  clear_has_l_limit_5();
}
inline double Datum::l_limit_5() const {
  return l_limit_5_;
}
inline void Datum::set_l_limit_5(double value) {
  set_has_l_limit_5();
  l_limit_5_ = value;
}

// optional double l_limit_6 = 128;
inline bool Datum::has_l_limit_6() const {
  return (_has_bits_[3] & 0x80000000u) != 0;
}
inline void Datum::set_has_l_limit_6() {
  _has_bits_[3] |= 0x80000000u;
}
inline void Datum::clear_has_l_limit_6() {
  _has_bits_[3] &= ~0x80000000u;
}
inline void Datum::clear_l_limit_6() {
  l_limit_6_ = 0;
  clear_has_l_limit_6();
}
inline double Datum::l_limit_6() const {
  return l_limit_6_;
}
inline void Datum::set_l_limit_6(double value) {
  set_has_l_limit_6();
  l_limit_6_ = value;
}

// optional double u_limit_0 = 129;
inline bool Datum::has_u_limit_0() const {
  return (_has_bits_[4] & 0x00000001u) != 0;
}
inline void Datum::set_has_u_limit_0() {
  _has_bits_[4] |= 0x00000001u;
}
inline void Datum::clear_has_u_limit_0() {
  _has_bits_[4] &= ~0x00000001u;
}
inline void Datum::clear_u_limit_0() {
  u_limit_0_ = 0;
  clear_has_u_limit_0();
}
inline double Datum::u_limit_0() const {
  return u_limit_0_;
}
inline void Datum::set_u_limit_0(double value) {
  set_has_u_limit_0();
  u_limit_0_ = value;
}

// optional double u_limit_1 = 130;
inline bool Datum::has_u_limit_1() const {
  return (_has_bits_[4] & 0x00000002u) != 0;
}
inline void Datum::set_has_u_limit_1() {
  _has_bits_[4] |= 0x00000002u;
}
inline void Datum::clear_has_u_limit_1() {
  _has_bits_[4] &= ~0x00000002u;
}
inline void Datum::clear_u_limit_1() {
  u_limit_1_ = 0;
  clear_has_u_limit_1();
}
inline double Datum::u_limit_1() const {
  return u_limit_1_;
}
inline void Datum::set_u_limit_1(double value) {
  set_has_u_limit_1();
  u_limit_1_ = value;
}

// optional double u_limit_2 = 131;
inline bool Datum::has_u_limit_2() const {
  return (_has_bits_[4] & 0x00000004u) != 0;
}
inline void Datum::set_has_u_limit_2() {
  _has_bits_[4] |= 0x00000004u;
}
inline void Datum::clear_has_u_limit_2() {
  _has_bits_[4] &= ~0x00000004u;
}
inline void Datum::clear_u_limit_2() {
  u_limit_2_ = 0;
  clear_has_u_limit_2();
}
inline double Datum::u_limit_2() const {
  return u_limit_2_;
}
inline void Datum::set_u_limit_2(double value) {
  set_has_u_limit_2();
  u_limit_2_ = value;
}

// optional double u_limit_3 = 132;
inline bool Datum::has_u_limit_3() const {
  return (_has_bits_[4] & 0x00000008u) != 0;
}
inline void Datum::set_has_u_limit_3() {
  _has_bits_[4] |= 0x00000008u;
}
inline void Datum::clear_has_u_limit_3() {
  _has_bits_[4] &= ~0x00000008u;
}
inline void Datum::clear_u_limit_3() {
  u_limit_3_ = 0;
  clear_has_u_limit_3();
}
inline double Datum::u_limit_3() const {
  return u_limit_3_;
}
inline void Datum::set_u_limit_3(double value) {
  set_has_u_limit_3();
  u_limit_3_ = value;
}

// optional double u_limit_4 = 133;
inline bool Datum::has_u_limit_4() const {
  return (_has_bits_[4] & 0x00000010u) != 0;
}
inline void Datum::set_has_u_limit_4() {
  _has_bits_[4] |= 0x00000010u;
}
inline void Datum::clear_has_u_limit_4() {
  _has_bits_[4] &= ~0x00000010u;
}
inline void Datum::clear_u_limit_4() {
  u_limit_4_ = 0;
  clear_has_u_limit_4();
}
inline double Datum::u_limit_4() const {
  return u_limit_4_;
}
inline void Datum::set_u_limit_4(double value) {
  set_has_u_limit_4();
  u_limit_4_ = value;
}

// optional double u_limit_5 = 134;
inline bool Datum::has_u_limit_5() const {
  return (_has_bits_[4] & 0x00000020u) != 0;
}
inline void Datum::set_has_u_limit_5() {
  _has_bits_[4] |= 0x00000020u;
}
inline void Datum::clear_has_u_limit_5() {
  _has_bits_[4] &= ~0x00000020u;
}
inline void Datum::clear_u_limit_5() {
  u_limit_5_ = 0;
  clear_has_u_limit_5();
}
inline double Datum::u_limit_5() const {
  return u_limit_5_;
}
inline void Datum::set_u_limit_5(double value) {
  set_has_u_limit_5();
  u_limit_5_ = value;
}

// optional double u_limit_6 = 135;
inline bool Datum::has_u_limit_6() const {
  return (_has_bits_[4] & 0x00000040u) != 0;
}
inline void Datum::set_has_u_limit_6() {
  _has_bits_[4] |= 0x00000040u;
}
inline void Datum::clear_has_u_limit_6() {
  _has_bits_[4] &= ~0x00000040u;
}
inline void Datum::clear_u_limit_6() {
  u_limit_6_ = 0;
  clear_has_u_limit_6();
}
inline double Datum::u_limit_6() const {
  return u_limit_6_;
}
inline void Datum::set_u_limit_6(double value) {
  set_has_u_limit_6();
  u_limit_6_ = value;
}

// optional double kappa = 136;
inline bool Datum::has_kappa() const {
  return (_has_bits_[4] & 0x00000080u) != 0;
}
inline void Datum::set_has_kappa() {
  _has_bits_[4] |= 0x00000080u;
}
inline void Datum::clear_has_kappa() {
  _has_bits_[4] &= ~0x00000080u;
}
inline void Datum::clear_kappa() {
  kappa_ = 0;
  clear_has_kappa();
}
inline double Datum::kappa() const {
  return kappa_;
}
inline void Datum::set_kappa(double value) {
  set_has_kappa();
  kappa_ = value;
}

// optional double Kv = 137;
inline bool Datum::has_kv() const {
  return (_has_bits_[4] & 0x00000100u) != 0;
}
inline void Datum::set_has_kv() {
  _has_bits_[4] |= 0x00000100u;
}
inline void Datum::clear_has_kv() {
  _has_bits_[4] &= ~0x00000100u;
}
inline void Datum::clear_kv() {
  kv_ = 0;
  clear_has_kv();
}
inline double Datum::kv() const {
  return kv_;
}
inline void Datum::set_kv(double value) {
  set_has_kv();
  kv_ = value;
}

// optional double lambda = 138;
inline bool Datum::has_lambda() const {
  return (_has_bits_[4] & 0x00000200u) != 0;
}
inline void Datum::set_has_lambda() {
  _has_bits_[4] |= 0x00000200u;
}
inline void Datum::clear_has_lambda() {
  _has_bits_[4] &= ~0x00000200u;
}
inline void Datum::clear_lambda() {
  lambda_ = 0;
  clear_has_lambda();
}
inline double Datum::lambda() const {
  return lambda_;
}
inline void Datum::set_lambda(double value) {
  set_has_lambda();
  lambda_ = value;
}

// optional double Kz = 139;
inline bool Datum::has_kz() const {
  return (_has_bits_[4] & 0x00000400u) != 0;
}
inline void Datum::set_has_kz() {
  _has_bits_[4] |= 0x00000400u;
}
inline void Datum::clear_has_kz() {
  _has_bits_[4] &= ~0x00000400u;
}
inline void Datum::clear_kz() {
  kz_ = 0;
  clear_has_kz();
}
inline double Datum::kz() const {
  return kz_;
}
inline void Datum::set_kz(double value) {
  set_has_kz();
  kz_ = value;
}

// optional double Zb = 140;
inline bool Datum::has_zb() const {
  return (_has_bits_[4] & 0x00000800u) != 0;
}
inline void Datum::set_has_zb() {
  _has_bits_[4] |= 0x00000800u;
}
inline void Datum::clear_has_zb() {
  _has_bits_[4] &= ~0x00000800u;
}
inline void Datum::clear_zb() {
  zb_ = 0;
  clear_has_zb();
}
inline double Datum::zb() const {
  return zb_;
}
inline void Datum::set_zb(double value) {
  set_has_zb();
  zb_ = value;
}

// optional double F = 141;
inline bool Datum::has_f() const {
  return (_has_bits_[4] & 0x00001000u) != 0;
}
inline void Datum::set_has_f() {
  _has_bits_[4] |= 0x00001000u;
}
inline void Datum::clear_has_f() {
  _has_bits_[4] &= ~0x00001000u;
}
inline void Datum::clear_f() {
  f_ = 0;
  clear_has_f();
}
inline double Datum::f() const {
  return f_;
}
inline void Datum::set_f(double value) {
  set_has_f();
  f_ = value;
}

// optional double G = 142;
inline bool Datum::has_g() const {
  return (_has_bits_[4] & 0x00002000u) != 0;
}
inline void Datum::set_has_g() {
  _has_bits_[4] |= 0x00002000u;
}
inline void Datum::clear_has_g() {
  _has_bits_[4] &= ~0x00002000u;
}
inline void Datum::clear_g() {
  g_ = 0;
  clear_has_g();
}
inline double Datum::g() const {
  return g_;
}
inline void Datum::set_g(double value) {
  set_has_g();
  g_ = value;
}

// optional int64 inParams = 143;
inline bool Datum::has_inparams() const {
  return (_has_bits_[4] & 0x00004000u) != 0;
}
inline void Datum::set_has_inparams() {
  _has_bits_[4] |= 0x00004000u;
}
inline void Datum::clear_has_inparams() {
  _has_bits_[4] &= ~0x00004000u;
}
inline void Datum::clear_inparams() {
  inparams_ = GOOGLE_LONGLONG(0);
  clear_has_inparams();
}
inline ::google::protobuf::int64 Datum::inparams() const {
  return inparams_;
}
inline void Datum::set_inparams(::google::protobuf::int64 value) {
  set_has_inparams();
  inparams_ = value;
}

// optional int64 outParams = 144;
inline bool Datum::has_outparams() const {
  return (_has_bits_[4] & 0x00008000u) != 0;
}
inline void Datum::set_has_outparams() {
  _has_bits_[4] |= 0x00008000u;
}
inline void Datum::clear_has_outparams() {
  _has_bits_[4] &= ~0x00008000u;
}
inline void Datum::clear_outparams() {
  outparams_ = GOOGLE_LONGLONG(0);
  clear_has_outparams();
}
inline ::google::protobuf::int64 Datum::outparams() const {
  return outparams_;
}
inline void Datum::set_outparams(::google::protobuf::int64 value) {
  set_has_outparams();
  outparams_ = value;
}

// optional int64 hiddenNodes = 145;
inline bool Datum::has_hiddennodes() const {
  return (_has_bits_[4] & 0x00010000u) != 0;
}
inline void Datum::set_has_hiddennodes() {
  _has_bits_[4] |= 0x00010000u;
}
inline void Datum::clear_has_hiddennodes() {
  _has_bits_[4] &= ~0x00010000u;
}
inline void Datum::clear_hiddennodes() {
  hiddennodes_ = GOOGLE_LONGLONG(0);
  clear_has_hiddennodes();
}
inline ::google::protobuf::int64 Datum::hiddennodes() const {
  return hiddennodes_;
}
inline void Datum::set_hiddennodes(::google::protobuf::int64 value) {
  set_has_hiddennodes();
  hiddennodes_ = value;
}

// optional int64 errorParams = 146;
inline bool Datum::has_errorparams() const {
  return (_has_bits_[4] & 0x00020000u) != 0;
}
inline void Datum::set_has_errorparams() {
  _has_bits_[4] |= 0x00020000u;
}
inline void Datum::clear_has_errorparams() {
  _has_bits_[4] &= ~0x00020000u;
}
inline void Datum::clear_errorparams() {
  errorparams_ = GOOGLE_LONGLONG(0);
  clear_has_errorparams();
}
inline ::google::protobuf::int64 Datum::errorparams() const {
  return errorparams_;
}
inline void Datum::set_errorparams(::google::protobuf::int64 value) {
  set_has_errorparams();
  errorparams_ = value;
}

// optional double feedForwardForce = 147;
inline bool Datum::has_feedforwardforce() const {
  return (_has_bits_[4] & 0x00040000u) != 0;
}
inline void Datum::set_has_feedforwardforce() {
  _has_bits_[4] |= 0x00040000u;
}
inline void Datum::clear_has_feedforwardforce() {
  _has_bits_[4] &= ~0x00040000u;
}
inline void Datum::clear_feedforwardforce() {
  feedforwardforce_ = 0;
  clear_has_feedforwardforce();
}
inline double Datum::feedforwardforce() const {
  return feedforwardforce_;
}
inline void Datum::set_feedforwardforce(double value) {
  set_has_feedforwardforce();
  feedforwardforce_ = value;
}

// optional double nn_ON = 148;
inline bool Datum::has_nn_on() const {
  return (_has_bits_[4] & 0x00080000u) != 0;
}
inline void Datum::set_has_nn_on() {
  _has_bits_[4] |= 0x00080000u;
}
inline void Datum::clear_has_nn_on() {
  _has_bits_[4] &= ~0x00080000u;
}
inline void Datum::clear_nn_on() {
  nn_on_ = 0;
  clear_has_nn_on();
}
inline double Datum::nn_on() const {
  return nn_on_;
}
inline void Datum::set_nn_on(double value) {
  set_has_nn_on();
  nn_on_ = value;
}

// optional double cartPos_Kp_x = 149;
inline bool Datum::has_cartpos_kp_x() const {
  return (_has_bits_[4] & 0x00100000u) != 0;
}
inline void Datum::set_has_cartpos_kp_x() {
  _has_bits_[4] |= 0x00100000u;
}
inline void Datum::clear_has_cartpos_kp_x() {
  _has_bits_[4] &= ~0x00100000u;
}
inline void Datum::clear_cartpos_kp_x() {
  cartpos_kp_x_ = 0;
  clear_has_cartpos_kp_x();
}
inline double Datum::cartpos_kp_x() const {
  return cartpos_kp_x_;
}
inline void Datum::set_cartpos_kp_x(double value) {
  set_has_cartpos_kp_x();
  cartpos_kp_x_ = value;
}

// optional double cartPos_Kp_y = 150;
inline bool Datum::has_cartpos_kp_y() const {
  return (_has_bits_[4] & 0x00200000u) != 0;
}
inline void Datum::set_has_cartpos_kp_y() {
  _has_bits_[4] |= 0x00200000u;
}
inline void Datum::clear_has_cartpos_kp_y() {
  _has_bits_[4] &= ~0x00200000u;
}
inline void Datum::clear_cartpos_kp_y() {
  cartpos_kp_y_ = 0;
  clear_has_cartpos_kp_y();
}
inline double Datum::cartpos_kp_y() const {
  return cartpos_kp_y_;
}
inline void Datum::set_cartpos_kp_y(double value) {
  set_has_cartpos_kp_y();
  cartpos_kp_y_ = value;
}

// optional double cartPos_Kp_z = 151;
inline bool Datum::has_cartpos_kp_z() const {
  return (_has_bits_[4] & 0x00400000u) != 0;
}
inline void Datum::set_has_cartpos_kp_z() {
  _has_bits_[4] |= 0x00400000u;
}
inline void Datum::clear_has_cartpos_kp_z() {
  _has_bits_[4] &= ~0x00400000u;
}
inline void Datum::clear_cartpos_kp_z() {
  cartpos_kp_z_ = 0;
  clear_has_cartpos_kp_z();
}
inline double Datum::cartpos_kp_z() const {
  return cartpos_kp_z_;
}
inline void Datum::set_cartpos_kp_z(double value) {
  set_has_cartpos_kp_z();
  cartpos_kp_z_ = value;
}

// optional double cartPos_Kd_x = 152;
inline bool Datum::has_cartpos_kd_x() const {
  return (_has_bits_[4] & 0x00800000u) != 0;
}
inline void Datum::set_has_cartpos_kd_x() {
  _has_bits_[4] |= 0x00800000u;
}
inline void Datum::clear_has_cartpos_kd_x() {
  _has_bits_[4] &= ~0x00800000u;
}
inline void Datum::clear_cartpos_kd_x() {
  cartpos_kd_x_ = 0;
  clear_has_cartpos_kd_x();
}
inline double Datum::cartpos_kd_x() const {
  return cartpos_kd_x_;
}
inline void Datum::set_cartpos_kd_x(double value) {
  set_has_cartpos_kd_x();
  cartpos_kd_x_ = value;
}

// optional double cartPos_Kd_y = 153;
inline bool Datum::has_cartpos_kd_y() const {
  return (_has_bits_[4] & 0x01000000u) != 0;
}
inline void Datum::set_has_cartpos_kd_y() {
  _has_bits_[4] |= 0x01000000u;
}
inline void Datum::clear_has_cartpos_kd_y() {
  _has_bits_[4] &= ~0x01000000u;
}
inline void Datum::clear_cartpos_kd_y() {
  cartpos_kd_y_ = 0;
  clear_has_cartpos_kd_y();
}
inline double Datum::cartpos_kd_y() const {
  return cartpos_kd_y_;
}
inline void Datum::set_cartpos_kd_y(double value) {
  set_has_cartpos_kd_y();
  cartpos_kd_y_ = value;
}

// optional double cartPos_Kd_z = 154;
inline bool Datum::has_cartpos_kd_z() const {
  return (_has_bits_[4] & 0x02000000u) != 0;
}
inline void Datum::set_has_cartpos_kd_z() {
  _has_bits_[4] |= 0x02000000u;
}
inline void Datum::clear_has_cartpos_kd_z() {
  _has_bits_[4] &= ~0x02000000u;
}
inline void Datum::clear_cartpos_kd_z() {
  cartpos_kd_z_ = 0;
  clear_has_cartpos_kd_z();
}
inline double Datum::cartpos_kd_z() const {
  return cartpos_kd_z_;
}
inline void Datum::set_cartpos_kd_z(double value) {
  set_has_cartpos_kd_z();
  cartpos_kd_z_ = value;
}

// optional double cartRot_Kp_x = 155;
inline bool Datum::has_cartrot_kp_x() const {
  return (_has_bits_[4] & 0x04000000u) != 0;
}
inline void Datum::set_has_cartrot_kp_x() {
  _has_bits_[4] |= 0x04000000u;
}
inline void Datum::clear_has_cartrot_kp_x() {
  _has_bits_[4] &= ~0x04000000u;
}
inline void Datum::clear_cartrot_kp_x() {
  cartrot_kp_x_ = 0;
  clear_has_cartrot_kp_x();
}
inline double Datum::cartrot_kp_x() const {
  return cartrot_kp_x_;
}
inline void Datum::set_cartrot_kp_x(double value) {
  set_has_cartrot_kp_x();
  cartrot_kp_x_ = value;
}

// optional double cartRot_Kp_y = 156;
inline bool Datum::has_cartrot_kp_y() const {
  return (_has_bits_[4] & 0x08000000u) != 0;
}
inline void Datum::set_has_cartrot_kp_y() {
  _has_bits_[4] |= 0x08000000u;
}
inline void Datum::clear_has_cartrot_kp_y() {
  _has_bits_[4] &= ~0x08000000u;
}
inline void Datum::clear_cartrot_kp_y() {
  cartrot_kp_y_ = 0;
  clear_has_cartrot_kp_y();
}
inline double Datum::cartrot_kp_y() const {
  return cartrot_kp_y_;
}
inline void Datum::set_cartrot_kp_y(double value) {
  set_has_cartrot_kp_y();
  cartrot_kp_y_ = value;
}

// optional double cartRot_Kp_z = 157;
inline bool Datum::has_cartrot_kp_z() const {
  return (_has_bits_[4] & 0x10000000u) != 0;
}
inline void Datum::set_has_cartrot_kp_z() {
  _has_bits_[4] |= 0x10000000u;
}
inline void Datum::clear_has_cartrot_kp_z() {
  _has_bits_[4] &= ~0x10000000u;
}
inline void Datum::clear_cartrot_kp_z() {
  cartrot_kp_z_ = 0;
  clear_has_cartrot_kp_z();
}
inline double Datum::cartrot_kp_z() const {
  return cartrot_kp_z_;
}
inline void Datum::set_cartrot_kp_z(double value) {
  set_has_cartrot_kp_z();
  cartrot_kp_z_ = value;
}

// optional double cartRot_Kd_x = 158;
inline bool Datum::has_cartrot_kd_x() const {
  return (_has_bits_[4] & 0x20000000u) != 0;
}
inline void Datum::set_has_cartrot_kd_x() {
  _has_bits_[4] |= 0x20000000u;
}
inline void Datum::clear_has_cartrot_kd_x() {
  _has_bits_[4] &= ~0x20000000u;
}
inline void Datum::clear_cartrot_kd_x() {
  cartrot_kd_x_ = 0;
  clear_has_cartrot_kd_x();
}
inline double Datum::cartrot_kd_x() const {
  return cartrot_kd_x_;
}
inline void Datum::set_cartrot_kd_x(double value) {
  set_has_cartrot_kd_x();
  cartrot_kd_x_ = value;
}

// optional double cartRot_Kd_y = 159;
inline bool Datum::has_cartrot_kd_y() const {
  return (_has_bits_[4] & 0x40000000u) != 0;
}
inline void Datum::set_has_cartrot_kd_y() {
  _has_bits_[4] |= 0x40000000u;
}
inline void Datum::clear_has_cartrot_kd_y() {
  _has_bits_[4] &= ~0x40000000u;
}
inline void Datum::clear_cartrot_kd_y() {
  cartrot_kd_y_ = 0;
  clear_has_cartrot_kd_y();
}
inline double Datum::cartrot_kd_y() const {
  return cartrot_kd_y_;
}
inline void Datum::set_cartrot_kd_y(double value) {
  set_has_cartrot_kd_y();
  cartrot_kd_y_ = value;
}

// optional double cartRot_Kd_z = 160;
inline bool Datum::has_cartrot_kd_z() const {
  return (_has_bits_[4] & 0x80000000u) != 0;
}
inline void Datum::set_has_cartrot_kd_z() {
  _has_bits_[4] |= 0x80000000u;
}
inline void Datum::clear_has_cartrot_kd_z() {
  _has_bits_[4] &= ~0x80000000u;
}
inline void Datum::clear_cartrot_kd_z() {
  cartrot_kd_z_ = 0;
  clear_has_cartrot_kd_z();
}
inline double Datum::cartrot_kd_z() const {
  return cartrot_kd_z_;
}
inline void Datum::set_cartrot_kd_z(double value) {
  set_has_cartrot_kd_z();
  cartrot_kd_z_ = value;
}

// optional bool useCurrentCartPose = 161;
inline bool Datum::has_usecurrentcartpose() const {
  return (_has_bits_[5] & 0x00000001u) != 0;
}
inline void Datum::set_has_usecurrentcartpose() {
  _has_bits_[5] |= 0x00000001u;
}
inline void Datum::clear_has_usecurrentcartpose() {
  _has_bits_[5] &= ~0x00000001u;
}
inline void Datum::clear_usecurrentcartpose() {
  usecurrentcartpose_ = false;
  clear_has_usecurrentcartpose();
}
inline bool Datum::usecurrentcartpose() const {
  return usecurrentcartpose_;
}
inline void Datum::set_usecurrentcartpose(bool value) {
  set_has_usecurrentcartpose();
  usecurrentcartpose_ = value;
}

// optional bool useNullspacePose = 162;
inline bool Datum::has_usenullspacepose() const {
  return (_has_bits_[5] & 0x00000002u) != 0;
}
inline void Datum::set_has_usenullspacepose() {
  _has_bits_[5] |= 0x00000002u;
}
inline void Datum::clear_has_usenullspacepose() {
  _has_bits_[5] &= ~0x00000002u;
}
inline void Datum::clear_usenullspacepose() {
  usenullspacepose_ = false;
  clear_has_usenullspacepose();
}
inline bool Datum::usenullspacepose() const {
  return usenullspacepose_;
}
inline void Datum::set_usenullspacepose(bool value) {
  set_has_usenullspacepose();
  usenullspacepose_ = value;
}

// optional double cartIniX = 163;
inline bool Datum::has_cartinix() const {
  return (_has_bits_[5] & 0x00000004u) != 0;
}
inline void Datum::set_has_cartinix() {
  _has_bits_[5] |= 0x00000004u;
}
inline void Datum::clear_has_cartinix() {
  _has_bits_[5] &= ~0x00000004u;
}
inline void Datum::clear_cartinix() {
  cartinix_ = 0;
  clear_has_cartinix();
}
inline double Datum::cartinix() const {
  return cartinix_;
}
inline void Datum::set_cartinix(double value) {
  set_has_cartinix();
  cartinix_ = value;
}

// optional double cartIniY = 164;
inline bool Datum::has_cartiniy() const {
  return (_has_bits_[5] & 0x00000008u) != 0;
}
inline void Datum::set_has_cartiniy() {
  _has_bits_[5] |= 0x00000008u;
}
inline void Datum::clear_has_cartiniy() {
  _has_bits_[5] &= ~0x00000008u;
}
inline void Datum::clear_cartiniy() {
  cartiniy_ = 0;
  clear_has_cartiniy();
}
inline double Datum::cartiniy() const {
  return cartiniy_;
}
inline void Datum::set_cartiniy(double value) {
  set_has_cartiniy();
  cartiniy_ = value;
}

// optional double cartIniZ = 165;
inline bool Datum::has_cartiniz() const {
  return (_has_bits_[5] & 0x00000010u) != 0;
}
inline void Datum::set_has_cartiniz() {
  _has_bits_[5] |= 0x00000010u;
}
inline void Datum::clear_has_cartiniz() {
  _has_bits_[5] &= ~0x00000010u;
}
inline void Datum::clear_cartiniz() {
  cartiniz_ = 0;
  clear_has_cartiniz();
}
inline double Datum::cartiniz() const {
  return cartiniz_;
}
inline void Datum::set_cartiniz(double value) {
  set_has_cartiniz();
  cartiniz_ = value;
}

// optional double cartIniRoll = 166;
inline bool Datum::has_cartiniroll() const {
  return (_has_bits_[5] & 0x00000020u) != 0;
}
inline void Datum::set_has_cartiniroll() {
  _has_bits_[5] |= 0x00000020u;
}
inline void Datum::clear_has_cartiniroll() {
  _has_bits_[5] &= ~0x00000020u;
}
inline void Datum::clear_cartiniroll() {
  cartiniroll_ = 0;
  clear_has_cartiniroll();
}
inline double Datum::cartiniroll() const {
  return cartiniroll_;
}
inline void Datum::set_cartiniroll(double value) {
  set_has_cartiniroll();
  cartiniroll_ = value;
}

// optional double cartIniPitch = 167;
inline bool Datum::has_cartinipitch() const {
  return (_has_bits_[5] & 0x00000040u) != 0;
}
inline void Datum::set_has_cartinipitch() {
  _has_bits_[5] |= 0x00000040u;
}
inline void Datum::clear_has_cartinipitch() {
  _has_bits_[5] &= ~0x00000040u;
}
inline void Datum::clear_cartinipitch() {
  cartinipitch_ = 0;
  clear_has_cartinipitch();
}
inline double Datum::cartinipitch() const {
  return cartinipitch_;
}
inline void Datum::set_cartinipitch(double value) {
  set_has_cartinipitch();
  cartinipitch_ = value;
}

// optional double cartIniYaw = 168;
inline bool Datum::has_cartiniyaw() const {
  return (_has_bits_[5] & 0x00000080u) != 0;
}
inline void Datum::set_has_cartiniyaw() {
  _has_bits_[5] |= 0x00000080u;
}
inline void Datum::clear_has_cartiniyaw() {
  _has_bits_[5] &= ~0x00000080u;
}
inline void Datum::clear_cartiniyaw() {
  cartiniyaw_ = 0;
  clear_has_cartiniyaw();
}
inline double Datum::cartiniyaw() const {
  return cartiniyaw_;
}
inline void Datum::set_cartiniyaw(double value) {
  set_has_cartiniyaw();
  cartiniyaw_ = value;
}

// optional double cartDesX = 169;
inline bool Datum::has_cartdesx() const {
  return (_has_bits_[5] & 0x00000100u) != 0;
}
inline void Datum::set_has_cartdesx() {
  _has_bits_[5] |= 0x00000100u;
}
inline void Datum::clear_has_cartdesx() {
  _has_bits_[5] &= ~0x00000100u;
}
inline void Datum::clear_cartdesx() {
  cartdesx_ = 0;
  clear_has_cartdesx();
}
inline double Datum::cartdesx() const {
  return cartdesx_;
}
inline void Datum::set_cartdesx(double value) {
  set_has_cartdesx();
  cartdesx_ = value;
}

// optional double cartDesY = 170;
inline bool Datum::has_cartdesy() const {
  return (_has_bits_[5] & 0x00000200u) != 0;
}
inline void Datum::set_has_cartdesy() {
  _has_bits_[5] |= 0x00000200u;
}
inline void Datum::clear_has_cartdesy() {
  _has_bits_[5] &= ~0x00000200u;
}
inline void Datum::clear_cartdesy() {
  cartdesy_ = 0;
  clear_has_cartdesy();
}
inline double Datum::cartdesy() const {
  return cartdesy_;
}
inline void Datum::set_cartdesy(double value) {
  set_has_cartdesy();
  cartdesy_ = value;
}

// optional double cartDesZ = 171;
inline bool Datum::has_cartdesz() const {
  return (_has_bits_[5] & 0x00000400u) != 0;
}
inline void Datum::set_has_cartdesz() {
  _has_bits_[5] |= 0x00000400u;
}
inline void Datum::clear_has_cartdesz() {
  _has_bits_[5] &= ~0x00000400u;
}
inline void Datum::clear_cartdesz() {
  cartdesz_ = 0;
  clear_has_cartdesz();
}
inline double Datum::cartdesz() const {
  return cartdesz_;
}
inline void Datum::set_cartdesz(double value) {
  set_has_cartdesz();
  cartdesz_ = value;
}

// optional double cartDesRoll = 172;
inline bool Datum::has_cartdesroll() const {
  return (_has_bits_[5] & 0x00000800u) != 0;
}
inline void Datum::set_has_cartdesroll() {
  _has_bits_[5] |= 0x00000800u;
}
inline void Datum::clear_has_cartdesroll() {
  _has_bits_[5] &= ~0x00000800u;
}
inline void Datum::clear_cartdesroll() {
  cartdesroll_ = 0;
  clear_has_cartdesroll();
}
inline double Datum::cartdesroll() const {
  return cartdesroll_;
}
inline void Datum::set_cartdesroll(double value) {
  set_has_cartdesroll();
  cartdesroll_ = value;
}

// optional double cartDesPitch = 173;
inline bool Datum::has_cartdespitch() const {
  return (_has_bits_[5] & 0x00001000u) != 0;
}
inline void Datum::set_has_cartdespitch() {
  _has_bits_[5] |= 0x00001000u;
}
inline void Datum::clear_has_cartdespitch() {
  _has_bits_[5] &= ~0x00001000u;
}
inline void Datum::clear_cartdespitch() {
  cartdespitch_ = 0;
  clear_has_cartdespitch();
}
inline double Datum::cartdespitch() const {
  return cartdespitch_;
}
inline void Datum::set_cartdespitch(double value) {
  set_has_cartdespitch();
  cartdespitch_ = value;
}

// optional double cartDesYaw = 174;
inline bool Datum::has_cartdesyaw() const {
  return (_has_bits_[5] & 0x00002000u) != 0;
}
inline void Datum::set_has_cartdesyaw() {
  _has_bits_[5] |= 0x00002000u;
}
inline void Datum::clear_has_cartdesyaw() {
  _has_bits_[5] &= ~0x00002000u;
}
inline void Datum::clear_cartdesyaw() {
  cartdesyaw_ = 0;
  clear_has_cartdesyaw();
}
inline double Datum::cartdesyaw() const {
  return cartdesyaw_;
}
inline void Datum::set_cartdesyaw(double value) {
  set_has_cartdesyaw();
  cartdesyaw_ = value;
}

// optional double m = 175;
inline bool Datum::has_m() const {
  return (_has_bits_[5] & 0x00004000u) != 0;
}
inline void Datum::set_has_m() {
  _has_bits_[5] |= 0x00004000u;
}
inline void Datum::clear_has_m() {
  _has_bits_[5] &= ~0x00004000u;
}
inline void Datum::clear_m() {
  m_ = 0;
  clear_has_m();
}
inline double Datum::m() const {
  return m_;
}
inline void Datum::set_m(double value) {
  set_has_m();
  m_ = value;
}

// optional double d = 176;
inline bool Datum::has_d() const {
  return (_has_bits_[5] & 0x00008000u) != 0;
}
inline void Datum::set_has_d() {
  _has_bits_[5] |= 0x00008000u;
}
inline void Datum::clear_has_d() {
  _has_bits_[5] &= ~0x00008000u;
}
inline void Datum::clear_d() {
  d_ = 0;
  clear_has_d();
}
inline double Datum::d() const {
  return d_;
}
inline void Datum::set_d(double value) {
  set_has_d();
  d_ = value;
}

// optional double k = 177;
inline bool Datum::has_k() const {
  return (_has_bits_[5] & 0x00010000u) != 0;
}
inline void Datum::set_has_k() {
  _has_bits_[5] |= 0x00010000u;
}
inline void Datum::clear_has_k() {
  _has_bits_[5] &= ~0x00010000u;
}
inline void Datum::clear_k() {
  k_ = 0;
  clear_has_k();
}
inline double Datum::k() const {
  return k_;
}
inline void Datum::set_k(double value) {
  set_has_k();
  k_ = value;
}

// optional double task_mA = 178;
inline bool Datum::has_task_ma() const {
  return (_has_bits_[5] & 0x00020000u) != 0;
}
inline void Datum::set_has_task_ma() {
  _has_bits_[5] |= 0x00020000u;
}
inline void Datum::clear_has_task_ma() {
  _has_bits_[5] &= ~0x00020000u;
}
inline void Datum::clear_task_ma() {
  task_ma_ = 0;
  clear_has_task_ma();
}
inline double Datum::task_ma() const {
  return task_ma_;
}
inline void Datum::set_task_ma(double value) {
  set_has_task_ma();
  task_ma_ = value;
}

// optional double task_mB = 179;
inline bool Datum::has_task_mb() const {
  return (_has_bits_[5] & 0x00040000u) != 0;
}
inline void Datum::set_has_task_mb() {
  _has_bits_[5] |= 0x00040000u;
}
inline void Datum::clear_has_task_mb() {
  _has_bits_[5] &= ~0x00040000u;
}
inline void Datum::clear_task_mb() {
  task_mb_ = 0;
  clear_has_task_mb();
}
inline double Datum::task_mb() const {
  return task_mb_;
}
inline void Datum::set_task_mb(double value) {
  set_has_task_mb();
  task_mb_ = value;
}

// optional double fixedFilterWeights = 180;
inline bool Datum::has_fixedfilterweights() const {
  return (_has_bits_[5] & 0x00080000u) != 0;
}
inline void Datum::set_has_fixedfilterweights() {
  _has_bits_[5] |= 0x00080000u;
}
inline void Datum::clear_has_fixedfilterweights() {
  _has_bits_[5] &= ~0x00080000u;
}
inline void Datum::clear_fixedfilterweights() {
  fixedfilterweights_ = 0;
  clear_has_fixedfilterweights();
}
inline double Datum::fixedfilterweights() const {
  return fixedfilterweights_;
}
inline void Datum::set_fixedfilterweights(double value) {
  set_has_fixedfilterweights();
  fixedfilterweights_ = value;
}

// optional double w0 = 182;
inline bool Datum::has_w0() const {
  return (_has_bits_[5] & 0x00100000u) != 0;
}
inline void Datum::set_has_w0() {
  _has_bits_[5] |= 0x00100000u;
}
inline void Datum::clear_has_w0() {
  _has_bits_[5] &= ~0x00100000u;
}
inline void Datum::clear_w0() {
  w0_ = 0;
  clear_has_w0();
}
inline double Datum::w0() const {
  return w0_;
}
inline void Datum::set_w0(double value) {
  set_has_w0();
  w0_ = value;
}

// optional double w1 = 183;
inline bool Datum::has_w1() const {
  return (_has_bits_[5] & 0x00200000u) != 0;
}
inline void Datum::set_has_w1() {
  _has_bits_[5] |= 0x00200000u;
}
inline void Datum::clear_has_w1() {
  _has_bits_[5] &= ~0x00200000u;
}
inline void Datum::clear_w1() {
  w1_ = 0;
  clear_has_w1();
}
inline double Datum::w1() const {
  return w1_;
}
inline void Datum::set_w1(double value) {
  set_has_w1();
  w1_ = value;
}

// optional double w2 = 184;
inline bool Datum::has_w2() const {
  return (_has_bits_[5] & 0x00400000u) != 0;
}
inline void Datum::set_has_w2() {
  _has_bits_[5] |= 0x00400000u;
}
inline void Datum::clear_has_w2() {
  _has_bits_[5] &= ~0x00400000u;
}
inline void Datum::clear_w2() {
  w2_ = 0;
  clear_has_w2();
}
inline double Datum::w2() const {
  return w2_;
}
inline void Datum::set_w2(double value) {
  set_has_w2();
  w2_ = value;
}

// optional double w3 = 185;
inline bool Datum::has_w3() const {
  return (_has_bits_[5] & 0x00800000u) != 0;
}
inline void Datum::set_has_w3() {
  _has_bits_[5] |= 0x00800000u;
}
inline void Datum::clear_has_w3() {
  _has_bits_[5] &= ~0x00800000u;
}
inline void Datum::clear_w3() {
  w3_ = 0;
  clear_has_w3();
}
inline double Datum::w3() const {
  return w3_;
}
inline void Datum::set_w3(double value) {
  set_has_w3();
  w3_ = value;
}

// optional double w4 = 186;
inline bool Datum::has_w4() const {
  return (_has_bits_[5] & 0x01000000u) != 0;
}
inline void Datum::set_has_w4() {
  _has_bits_[5] |= 0x01000000u;
}
inline void Datum::clear_has_w4() {
  _has_bits_[5] &= ~0x01000000u;
}
inline void Datum::clear_w4() {
  w4_ = 0;
  clear_has_w4();
}
inline double Datum::w4() const {
  return w4_;
}
inline void Datum::set_w4(double value) {
  set_has_w4();
  w4_ = value;
}

// optional double w5 = 187;
inline bool Datum::has_w5() const {
  return (_has_bits_[5] & 0x02000000u) != 0;
}
inline void Datum::set_has_w5() {
  _has_bits_[5] |= 0x02000000u;
}
inline void Datum::clear_has_w5() {
  _has_bits_[5] &= ~0x02000000u;
}
inline void Datum::clear_w5() {
  w5_ = 0;
  clear_has_w5();
}
inline double Datum::w5() const {
  return w5_;
}
inline void Datum::set_w5(double value) {
  set_has_w5();
  w5_ = value;
}

// optional double w6 = 188;
inline bool Datum::has_w6() const {
  return (_has_bits_[5] & 0x04000000u) != 0;
}
inline void Datum::set_has_w6() {
  _has_bits_[5] |= 0x04000000u;
}
inline void Datum::clear_has_w6() {
  _has_bits_[5] &= ~0x04000000u;
}
inline void Datum::clear_w6() {
  w6_ = 0;
  clear_has_w6();
}
inline double Datum::w6() const {
  return w6_;
}
inline void Datum::set_w6(double value) {
  set_has_w6();
  w6_ = value;
}

// optional double w7 = 189;
inline bool Datum::has_w7() const {
  return (_has_bits_[5] & 0x08000000u) != 0;
}
inline void Datum::set_has_w7() {
  _has_bits_[5] |= 0x08000000u;
}
inline void Datum::clear_has_w7() {
  _has_bits_[5] &= ~0x08000000u;
}
inline void Datum::clear_w7() {
  w7_ = 0;
  clear_has_w7();
}
inline double Datum::w7() const {
  return w7_;
}
inline void Datum::set_w7(double value) {
  set_has_w7();
  w7_ = value;
}

// -------------------------------------------------------------------

// controllerFullData

// repeated .dataPoint.Datum datum = 1;
inline int controllerFullData::datum_size() const {
  return datum_.size();
}
inline void controllerFullData::clear_datum() {
  datum_.Clear();
}
inline const ::dataPoint::Datum& controllerFullData::datum(int index) const {
  return datum_.Get(index);
}
inline ::dataPoint::Datum* controllerFullData::mutable_datum(int index) {
  return datum_.Mutable(index);
}
inline ::dataPoint::Datum* controllerFullData::add_datum() {
  return datum_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dataPoint::Datum >&
controllerFullData::datum() const {
  return datum_;
}
inline ::google::protobuf::RepeatedPtrField< ::dataPoint::Datum >*
controllerFullData::mutable_datum() {
  return &datum_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dataPoint

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_controllerFullData_2eproto__INCLUDED
