/* Auto-generated by genmsg_cpp for file /home/isura/workspace/uta_pr2_robotVisualservo/msg/imgFeature.msg */
#ifndef UTA_PR2_ROBOTVISUALSERVO_MESSAGE_IMGFEATURE_H
#define UTA_PR2_ROBOTVISUALSERVO_MESSAGE_IMGFEATURE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace uta_pr2_robotVisualservo
{
template <class ContainerAllocator>
struct imgFeature_ {
  typedef imgFeature_<ContainerAllocator> Type;

  imgFeature_()
  : header()
  , points()
  , fKu(0.0)
  , fKv(0.0)
  , u0(0.0)
  , v0(0.0)
  , Z(0.0)
  , state()
  {
  }

  imgFeature_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , points(_alloc)
  , fKu(0.0)
  , fKv(0.0)
  , u0(0.0)
  , v0(0.0)
  , Z(0.0)
  , state(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _points_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  points;

  typedef double _fKu_type;
  double fKu;

  typedef double _fKv_type;
  double fKv;

  typedef double _u0_type;
  double u0;

  typedef double _v0_type;
  double v0;

  typedef double _Z_type;
  double Z;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _state_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  state;


  typedef boost::shared_ptr< ::uta_pr2_robotVisualservo::imgFeature_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uta_pr2_robotVisualservo::imgFeature_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct imgFeature
typedef  ::uta_pr2_robotVisualservo::imgFeature_<std::allocator<void> > imgFeature;

typedef boost::shared_ptr< ::uta_pr2_robotVisualservo::imgFeature> imgFeaturePtr;
typedef boost::shared_ptr< ::uta_pr2_robotVisualservo::imgFeature const> imgFeatureConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::uta_pr2_robotVisualservo::imgFeature_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::uta_pr2_robotVisualservo::imgFeature_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace uta_pr2_robotVisualservo

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::uta_pr2_robotVisualservo::imgFeature_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::uta_pr2_robotVisualservo::imgFeature_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::uta_pr2_robotVisualservo::imgFeature_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4987f811964aec808522bb2ded240c4f";
  }

  static const char* value(const  ::uta_pr2_robotVisualservo::imgFeature_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4987f811964aec80ULL;
  static const uint64_t static_value2 = 0x8522bb2ded240c4fULL;
};

template<class ContainerAllocator>
struct DataType< ::uta_pr2_robotVisualservo::imgFeature_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uta_pr2_robotVisualservo/imgFeature";
  }

  static const char* value(const  ::uta_pr2_robotVisualservo::imgFeature_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::uta_pr2_robotVisualservo::imgFeature_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# This is a message that holds data about the pixel locations of detected features.\n\
# These are to be used for visual servoing.\n\
#\n\
# Defined by Isura Ranatunga (isura@ieee.org) - 12/03/2012\n\
#\n\
# Each element is uniquely identified by its name\n\
# The header specifies the time at which the features were recorded. All the features\n\
# in one message have to be recorded at the same time.\n\
#\n\
# This message consists of a multiple arrays, one for each component of the image information. \n\
# The goal is to make each of the fields optional. When e.g. you do not have\n\
# camera callibration values, you can leave the callibration array empty.\n\
#\n\
# All arrays in this message should have the same size, or be empty.\n\
# This is the only way to uniquely associate the state name with the correct\n\
# states.\n\
\n\
\n\
Header header\n\
\n\
float64[] points\n\
float64 fKu\n\
float64 fKv\n\
float64 u0\n\
float64 v0\n\
float64 Z\n\
string state\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::uta_pr2_robotVisualservo::imgFeature_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::uta_pr2_robotVisualservo::imgFeature_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::uta_pr2_robotVisualservo::imgFeature_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::uta_pr2_robotVisualservo::imgFeature_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.points);
    stream.next(m.fKu);
    stream.next(m.fKv);
    stream.next(m.u0);
    stream.next(m.v0);
    stream.next(m.Z);
    stream.next(m.state);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct imgFeature_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uta_pr2_robotVisualservo::imgFeature_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::uta_pr2_robotVisualservo::imgFeature_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.points[i]);
    }
    s << indent << "fKu: ";
    Printer<double>::stream(s, indent + "  ", v.fKu);
    s << indent << "fKv: ";
    Printer<double>::stream(s, indent + "  ", v.fKv);
    s << indent << "u0: ";
    Printer<double>::stream(s, indent + "  ", v.u0);
    s << indent << "v0: ";
    Printer<double>::stream(s, indent + "  ", v.v0);
    s << indent << "Z: ";
    Printer<double>::stream(s, indent + "  ", v.Z);
    s << indent << "state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.state);
  }
};


} // namespace message_operations
} // namespace ros

#endif // UTA_PR2_ROBOTVISUALSERVO_MESSAGE_IMGFEATURE_H

