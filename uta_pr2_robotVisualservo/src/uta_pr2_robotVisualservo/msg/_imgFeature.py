"""autogenerated by genpy from uta_pr2_robotVisualservo/imgFeature.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class imgFeature(genpy.Message):
  _md5sum = "4987f811964aec808522bb2ded240c4f"
  _type = "uta_pr2_robotVisualservo/imgFeature"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# This is a message that holds data about the pixel locations of detected features.
# These are to be used for visual servoing.
#
# Defined by Isura Ranatunga (isura@ieee.org) - 12/03/2012
#
# Each element is uniquely identified by its name
# The header specifies the time at which the features were recorded. All the features
# in one message have to be recorded at the same time.
#
# This message consists of a multiple arrays, one for each component of the image information. 
# The goal is to make each of the fields optional. When e.g. you do not have
# camera callibration values, you can leave the callibration array empty.
#
# All arrays in this message should have the same size, or be empty.
# This is the only way to uniquely associate the state name with the correct
# states.


Header header

float64[] points
float64 fKu
float64 fKv
float64 u0
float64 v0
float64 Z
string state

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['header','points','fKu','fKv','u0','v0','Z','state']
  _slot_types = ['std_msgs/Header','float64[]','float64','float64','float64','float64','float64','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,points,fKu,fKv,u0,v0,Z,state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(imgFeature, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.points is None:
        self.points = []
      if self.fKu is None:
        self.fKu = 0.
      if self.fKv is None:
        self.fKv = 0.
      if self.u0 is None:
        self.u0 = 0.
      if self.v0 is None:
        self.v0 = 0.
      if self.Z is None:
        self.Z = 0.
      if self.state is None:
        self.state = ''
    else:
      self.header = std_msgs.msg.Header()
      self.points = []
      self.fKu = 0.
      self.fKv = 0.
      self.u0 = 0.
      self.v0 = 0.
      self.Z = 0.
      self.state = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.points)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.points))
      _x = self
      buff.write(_struct_5d.pack(_x.fKu, _x.fKv, _x.u0, _x.v0, _x.Z))
      _x = self.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.points = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 40
      (_x.fKu, _x.fKv, _x.u0, _x.v0, _x.Z,) = _struct_5d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state = str[start:end].decode('utf-8')
      else:
        self.state = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.points)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.points.tostring())
      _x = self
      buff.write(_struct_5d.pack(_x.fKu, _x.fKv, _x.u0, _x.v0, _x.Z))
      _x = self.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.points = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 40
      (_x.fKu, _x.fKv, _x.u0, _x.v0, _x.Z,) = _struct_5d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state = str[start:end].decode('utf-8')
      else:
        self.state = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_5d = struct.Struct("<5d")
_struct_3I = struct.Struct("<3I")
